const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":473,\"nextId\":473,\"documentIds\":{\"0\":\"1\",\"1\":\"1#how-can-i-make-adze-work-with-nestjs\",\"2\":\"1#problem\",\"3\":\"1#solution\",\"4\":\"1#use-experimental-require-module-flag\",\"5\":\"1#use-helpers\",\"6\":\"2\",\"7\":\"2#adze-transport-file\",\"8\":\"3\",\"9\":\"3#using-namespaces\",\"10\":\"3#example-output\",\"11\":\"3#example-output-1\",\"12\":\"3#using-labels\",\"13\":\"3#example-output-2\",\"14\":\"3#example-output-3\",\"15\":\"4\",\"16\":\"4#middleware\",\"17\":\"4#log-listeners\",\"18\":\"5\",\"19\":\"5#lifecycle\",\"20\":\"5#the-log-chain\",\"21\":\"5#example\",\"22\":\"5#log-class\",\"23\":\"5#modifiers\",\"24\":\"5#terminator\",\"25\":\"6\",\"26\":\"6#set-the-active-log-level\",\"27\":\"6#structured-logging-json\",\"28\":\"6#example-output\",\"29\":\"6#by-the-setup-function\",\"30\":\"6#by-the-meta-modifier\",\"31\":\"6#example-output-1\",\"32\":\"6#create-a-custom-log-level\",\"33\":\"6#example-output-2\",\"34\":\"7\",\"35\":\"7#filtering-namespaces\",\"36\":\"7#example-output\",\"37\":\"7#restricting-namespaces-ts-only\",\"38\":\"7#filtering-labels\",\"39\":\"7#example-output-1\",\"40\":\"7#filtering-by-levels\",\"41\":\"7#example-output-2\",\"42\":\"8\",\"43\":\"8#how-does-it-work\",\"44\":\"8#using-the-setup-function\",\"45\":\"8#browser-output\",\"46\":\"8#server-output\",\"47\":\"9\",\"48\":\"9#install-the-package\",\"49\":\"9#version-requirements\",\"50\":\"9#typescript-configuration\",\"51\":\"9#example\",\"52\":\"9#importing-adze\",\"53\":\"9#commonjs\",\"54\":\"9#esm-typescript\",\"55\":\"9#line-numbers-blackboxing\",\"56\":\"10\",\"57\":\"10#why-is-this-named-adze\",\"58\":\"10#why-should-i-use-adze\",\"59\":\"10#here-is-a-simple-preview\",\"60\":\"10#what-does-the-api-look-like\",\"61\":\"10#what-about-child-loggers\",\"62\":\"11\",\"63\":\"11#adze-factory-changes\",\"64\":\"11#v1-example\",\"65\":\"11#v2-example\",\"66\":\"11#sealing-changes\",\"67\":\"11#v1-example-1\",\"68\":\"11#v2-example-1\",\"69\":\"11#calling-createshed-not-required\",\"70\":\"11#v1-example-2\",\"71\":\"11#v2-example-2\",\"72\":\"11#createshed-replaced-with-setup\",\"73\":\"11#v1-example-3\",\"74\":\"11#v2-example-3\",\"75\":\"11#global-context-is-now-adzeglobal\",\"76\":\"11#v1-example-4\",\"77\":\"11#v2-example-4\",\"78\":\"11#configuration-has-new-schema\",\"79\":\"11#v1-example-5\",\"80\":\"11#v2-example-5\",\"81\":\"12\",\"82\":\"12#production-example\",\"83\":\"13\",\"84\":\"13#create-a-shared-logger\",\"85\":\"13#example-output-from-index-ts\",\"86\":\"13#shared-logger-configuration\",\"87\":\"14\",\"88\":\"14#example-output\",\"89\":\"15\",\"90\":\"15#browser-tools\",\"91\":\"15#server-tools\",\"92\":\"16\",\"93\":\"17\",\"94\":\"18\",\"95\":\"19\",\"96\":\"20\",\"97\":\"21\",\"98\":\"22\",\"99\":\"23\",\"100\":\"24\",\"101\":\"24#user-configuration\",\"102\":\"24#userconfiguration-interface\",\"103\":\"24#userconfiguration-property-descriptions\",\"104\":\"24#setup-function\",\"105\":\"24#setup-example\",\"106\":\"24#levelconfiguration\",\"107\":\"24#levelconfiguration-interface\",\"108\":\"24#custom-level-example\",\"109\":\"24#browser-output\",\"110\":\"24#server-output\",\"111\":\"24#default-level-override-example\",\"112\":\"24#browser-output-1\",\"113\":\"24#server-output-1\",\"114\":\"24#styling\",\"115\":\"24#default-browser-styles\",\"116\":\"24#default-level-styles\",\"117\":\"24#default-server-styles\",\"118\":\"24#default-level-styles-1\",\"119\":\"24#default-level-style-functions\",\"120\":\"24#level-style-function-example\",\"121\":\"24#browser-output-2\",\"122\":\"24#server-output-2\",\"123\":\"24#filters\",\"124\":\"24#interface\",\"125\":\"24#example\",\"126\":\"24#browser-output-3\",\"127\":\"24#server-output-3\",\"128\":\"24#customized-timestamps\",\"129\":\"24#interface-1\",\"130\":\"24#example-1\",\"131\":\"24#browser-output-4\",\"132\":\"24#server-output-4\",\"133\":\"24#levelselector-type\",\"134\":\"24#interface-2\",\"135\":\"24#example-2\",\"136\":\"25\",\"137\":\"25#pretty-formatter\",\"138\":\"25#browser-and-server-output\",\"139\":\"25#json-formatter\",\"140\":\"25#jsonlogformatmeta-interface\",\"141\":\"25#usage-example\",\"142\":\"25#interface\",\"143\":\"25#jsonlogformatmeta-serializer-functions\",\"144\":\"25#serializeerror\",\"145\":\"25#example\",\"146\":\"25#example-output\",\"147\":\"25#serializerequest\",\"148\":\"25#example-1\",\"149\":\"25#example-output-1\",\"150\":\"25#serializeresponse\",\"151\":\"25#example-2\",\"152\":\"25#example-output-2\",\"153\":\"25#standard-formatter\",\"154\":\"25#example-output-3\",\"155\":\"25#common-formatter\",\"156\":\"25#commonlogformatmeta\",\"157\":\"25#usage-example-1\",\"158\":\"25#interface-1\",\"159\":\"25#example-output-4\",\"160\":\"25#creating-third-party-formatters\",\"161\":\"25#formatter-class\",\"162\":\"25#interface-2\",\"163\":\"25#properties\",\"164\":\"25#timestampformatter-getter\",\"165\":\"25#formatbrowser\",\"166\":\"25#example-3\",\"167\":\"25#formatserver\",\"168\":\"25#example-4\",\"169\":\"25#using-a-third-party-formatter\",\"170\":\"25#example-5\",\"171\":\"26\",\"172\":\"26#data\",\"173\":\"26#example\",\"174\":\"26#modifierdata\",\"175\":\"26#example-1\",\"176\":\"26#browser-output\",\"177\":\"26#server-output\",\"178\":\"26#configuration\",\"179\":\"26#example-2\",\"180\":\"27\",\"181\":\"27#setup-function\",\"182\":\"27#interface\",\"183\":\"27#example\",\"184\":\"27#teardown-function\",\"185\":\"27#interface-1\",\"186\":\"27#example-1\",\"187\":\"27#browser-output\",\"188\":\"27#server-output\",\"189\":\"27#public-getters\",\"190\":\"27#cache\",\"191\":\"27#interface-2\",\"192\":\"27#example-2\",\"193\":\"27#configuration\",\"194\":\"27#interface-3\",\"195\":\"27#example-3\",\"196\":\"27#pid\",\"197\":\"27#interface-4\",\"198\":\"27#example-4\",\"199\":\"27#tools\",\"200\":\"27#interface-5\",\"201\":\"27#example-5\",\"202\":\"27#public-methods\",\"203\":\"27#addlogtocache\",\"204\":\"27#interface-6\",\"205\":\"27#example-6\",\"206\":\"27#clearcache\",\"207\":\"27#interface-7\",\"208\":\"27#example-7\",\"209\":\"27#getlabel\",\"210\":\"27#interface-8\",\"211\":\"27#example-8\",\"212\":\"27#setlabel\",\"213\":\"27#interface-9\",\"214\":\"27#example-9\",\"215\":\"27#addlistener\",\"216\":\"27#interface-10\",\"217\":\"27#example-10\",\"218\":\"27#removelistener\",\"219\":\"27#interface-11\",\"220\":\"27#example-11\",\"221\":\"27#getlisteners\",\"222\":\"27#interface-12\",\"223\":\"27#example-12\",\"224\":\"28\",\"225\":\"28#lifecycle\",\"226\":\"28#lifecycle-diagram\",\"227\":\"28#explanation\",\"228\":\"29\",\"229\":\"29#example\",\"230\":\"29#class-methods\",\"231\":\"29#example-1\",\"232\":\"29#getters\",\"233\":\"29#modifiers\",\"234\":\"29#terminators\",\"235\":\"30\",\"236\":\"30#micro-frontend-logging\",\"237\":\"30#example-architecture\",\"238\":\"30#explanation\",\"239\":\"30#best-practices\",\"240\":\"31\",\"241\":\"31#environment-targeting\",\"242\":\"31#example\",\"243\":\"31#loading-dependencies\",\"244\":\"31#example-1\",\"245\":\"31#using-the-middleware\",\"246\":\"31#using-lifecycle-hooks\",\"247\":\"31#constructed\",\"248\":\"31#beforemodifierapplied\",\"249\":\"31#aftermodifierapplied\",\"250\":\"31#beforeformatapplied\",\"251\":\"31#afterformatapplied\",\"252\":\"31#beforeprint\",\"253\":\"31#beforeterminated\",\"254\":\"31#afterterminated\",\"255\":\"32\",\"256\":\"32#assert\",\"257\":\"32#interface\",\"258\":\"32#example\",\"259\":\"32#browser-output\",\"260\":\"32#server-output\",\"261\":\"32#closethread\",\"262\":\"32#interface-1\",\"263\":\"32#example-1\",\"264\":\"32#browser-output-1\",\"265\":\"32#server-output-1\",\"266\":\"32#count\",\"267\":\"32#interface-2\",\"268\":\"32#example-2\",\"269\":\"32#browser-output-2\",\"270\":\"32#server-output-2\",\"271\":\"32#countclear\",\"272\":\"32#interface-3\",\"273\":\"32#example-3\",\"274\":\"32#output\",\"275\":\"32#countreset\",\"276\":\"32#interface-4\",\"277\":\"32#example-4\",\"278\":\"32#browser-output-3\",\"279\":\"32#server-output-3\",\"280\":\"32#dir\",\"281\":\"32#interface-5\",\"282\":\"32#example-5\",\"283\":\"32#browser-output-4\",\"284\":\"32#server-output-4\",\"285\":\"32#dirxml\",\"286\":\"32#dirxml-interface\",\"287\":\"32#example-6\",\"288\":\"32#dump\",\"289\":\"32#interface-6\",\"290\":\"32#example-7\",\"291\":\"32#browser-output-5\",\"292\":\"32#server-output-5\",\"293\":\"32#format\",\"294\":\"32#interface-7\",\"295\":\"32#example-8\",\"296\":\"32#browser-output-6\",\"297\":\"32#server-output-6\",\"298\":\"32#group\",\"299\":\"32#interface-8\",\"300\":\"32#example-9\",\"301\":\"32#browser-output-7\",\"302\":\"32#server-output-7\",\"303\":\"32#groupcollapsed\",\"304\":\"32#interface-9\",\"305\":\"32#example-10\",\"306\":\"32#browser-output-8\",\"307\":\"32#server-output-8\",\"308\":\"32#groupend\",\"309\":\"32#interface-10\",\"310\":\"32#example-11\",\"311\":\"32#browser-output-9\",\"312\":\"32#server-output-9\",\"313\":\"32#if\",\"314\":\"32#interface-11\",\"315\":\"32#example-12\",\"316\":\"32#browser-output-10\",\"317\":\"32#server-output-10\",\"318\":\"32#label\",\"319\":\"32#interface-12\",\"320\":\"32#example-13\",\"321\":\"32#browser-output-11\",\"322\":\"32#server-output-11\",\"323\":\"32#meta\",\"324\":\"32#interface-13\",\"325\":\"32#basic-example\",\"326\":\"32#example-with-generic-type-ts-only\",\"327\":\"32#example-with-listener\",\"328\":\"32#browser-output-from-listener\",\"329\":\"32#server-output-from-listener\",\"330\":\"32#namespace-ns\",\"331\":\"32#interface-14\",\"332\":\"32#example-14\",\"333\":\"32#browser-output-12\",\"334\":\"32#server-output-12\",\"335\":\"32#namespaces-with-constraints\",\"336\":\"32#silent\",\"337\":\"32#interface-15\",\"338\":\"32#example-15\",\"339\":\"32#browser-output-13\",\"340\":\"32#server-output-13\",\"341\":\"32#table\",\"342\":\"32#interface-16\",\"343\":\"32#example-16\",\"344\":\"32#browser-output-14\",\"345\":\"32#server-output-14\",\"346\":\"32#time\",\"347\":\"32#interface-17\",\"348\":\"32#example-17\",\"349\":\"32#browser-output-15\",\"350\":\"32#server-output-15\",\"351\":\"32#timeend\",\"352\":\"32#interface-18\",\"353\":\"32#example-18\",\"354\":\"32#browser-output-16\",\"355\":\"32#server-output-16\",\"356\":\"32#timenow\",\"357\":\"32#interface-19\",\"358\":\"32#example-19\",\"359\":\"32#browser-output-17\",\"360\":\"32#server-output-17\",\"361\":\"32#timestamp\",\"362\":\"32#interface-20\",\"363\":\"32#example-20\",\"364\":\"32#browser-output-18\",\"365\":\"32#server-output-18\",\"366\":\"32#trace\",\"367\":\"32#interface-21\",\"368\":\"32#example-21\",\"369\":\"32#browser-output-19\",\"370\":\"32#server-output-19\",\"371\":\"32#withemoji\",\"372\":\"32#interface-22\",\"373\":\"32#example-22\",\"374\":\"32#browser-output-20\",\"375\":\"32#server-output-20\",\"376\":\"33\",\"377\":\"33#level-terminators\",\"378\":\"33#alert\",\"379\":\"33#interface\",\"380\":\"33#example\",\"381\":\"33#browser-output\",\"382\":\"33#server-output\",\"383\":\"33#error\",\"384\":\"33#interface-1\",\"385\":\"33#example-1\",\"386\":\"33#browser-output-1\",\"387\":\"33#server-output-1\",\"388\":\"33#warn\",\"389\":\"33#interface-2\",\"390\":\"33#example-2\",\"391\":\"33#browser-output-2\",\"392\":\"33#server-output-2\",\"393\":\"33#info\",\"394\":\"33#interface-3\",\"395\":\"33#example-3\",\"396\":\"33#browser-output-3\",\"397\":\"33#server-output-3\",\"398\":\"33#fail\",\"399\":\"33#interface-4\",\"400\":\"33#example-4\",\"401\":\"33#browser-output-4\",\"402\":\"33#server-output-4\",\"403\":\"33#success\",\"404\":\"33#interface-5\",\"405\":\"33#example-5\",\"406\":\"33#browser-output-5\",\"407\":\"33#server-output-5\",\"408\":\"33#log\",\"409\":\"33#interface-6\",\"410\":\"33#example-6\",\"411\":\"33#browser-output-6\",\"412\":\"33#server-output-6\",\"413\":\"33#debug\",\"414\":\"33#interface-7\",\"415\":\"33#example-7\",\"416\":\"33#browser-output-7\",\"417\":\"33#server-output-7\",\"418\":\"33#verbose\",\"419\":\"33#interface-8\",\"420\":\"33#example-8\",\"421\":\"33#browser-output-8\",\"422\":\"33#server-output-8\",\"423\":\"33#other-terminators\",\"424\":\"33#clear-clr\",\"425\":\"33#interface-9\",\"426\":\"33#example-9\",\"427\":\"33#custom\",\"428\":\"33#interface-10\",\"429\":\"33#example-10\",\"430\":\"33#browser-output-9\",\"431\":\"33#server-output-9\",\"432\":\"33#seal\",\"433\":\"33#interface-11\",\"434\":\"33#example-11\",\"435\":\"33#browser-output-10\",\"436\":\"33#server-output-10\",\"437\":\"33#sealtag\",\"438\":\"33#interface-12\",\"439\":\"33#example-12\",\"440\":\"33#browser-output-11\",\"441\":\"33#server-output-11\",\"442\":\"33#thread\",\"443\":\"33#interface-13\",\"444\":\"33#example-13\",\"445\":\"33#browser-output-12\",\"446\":\"33#server-output-12\",\"447\":\"34\",\"448\":\"34#public-methods\",\"449\":\"34#filterbylabel\",\"450\":\"34#interface\",\"451\":\"34#example\",\"452\":\"34#browser-output\",\"453\":\"34#server-output\",\"454\":\"34#filterbynamespace\",\"455\":\"34#interface-1\",\"456\":\"34#example-1\",\"457\":\"34#browser-output-1\",\"458\":\"34#server-output-1\",\"459\":\"34#filterbylevel\",\"460\":\"34#interface-2\",\"461\":\"34#example-2\",\"462\":\"34#browser-output-2\",\"463\":\"34#server-output-2\",\"464\":\"34#renderall\",\"465\":\"34#interface-3\",\"466\":\"34#example-3\",\"467\":\"34#browser-output-3\",\"468\":\"34#server-output-3\",\"469\":\"35\",\"470\":\"35#example\",\"471\":\"35#url-parameter-override\",\"472\":\"36\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[3,17],\"1\":[9],\"2\":[1,33],\"3\":[1,29],\"4\":[5,54],\"5\":[2,53],\"6\":[2,39],\"7\":[4,39],\"8\":[2,63],\"9\":[2,108],\"10\":[2,138],\"11\":[2],\"12\":[2,81],\"13\":[2,69],\"14\":[2,24],\"15\":[3,57],\"16\":[1,166],\"17\":[2,146],\"18\":[1,92],\"19\":[1,24],\"20\":[3,43],\"21\":[1,16],\"22\":[2,39],\"23\":[1,60],\"24\":[1,51],\"25\":[1,42],\"26\":[5,209],\"27\":[4,79],\"28\":[2,71],\"29\":[4,30],\"30\":[4,29],\"31\":[2,88],\"32\":[5,123],\"33\":[2,21],\"34\":[2,74],\"35\":[2,46],\"36\":[2,44],\"37\":[5,102],\"38\":[2,44],\"39\":[2],\"40\":[3,33],\"41\":[2],\"42\":[2,40],\"43\":[5,147],\"44\":[4,84],\"45\":[2],\"46\":[2,43],\"47\":[2],\"48\":[3,19],\"49\":[2,27],\"50\":[2,61],\"51\":[1,9],\"52\":[2,16],\"53\":[1,12],\"54\":[2,7],\"55\":[3,126],\"56\":[1],\"57\":[6,36],\"58\":[6,181],\"59\":[5,18],\"60\":[7,46],\"61\":[5,56],\"62\":[4,101],\"63\":[3,5],\"64\":[2,8],\"65\":[2,8],\"66\":[2,11],\"67\":[2,14],\"68\":[2,14],\"69\":[4,14],\"70\":[2,12],\"71\":[2,12],\"72\":[4,16],\"73\":[2,18],\"74\":[2,15],\"75\":[5,11],\"76\":[2,17],\"77\":[2,14],\"78\":[4,9],\"79\":[2,27],\"80\":[2,42],\"81\":[4,71],\"82\":[2,117],\"83\":[3,33],\"84\":[4,124],\"85\":[5],\"86\":[3,115],\"87\":[4,102],\"88\":[2,60],\"89\":[1,15],\"90\":[2,149],\"91\":[2,96],\"92\":[1,42],\"93\":[1,46],\"94\":[1,8],\"95\":[1,28],\"96\":[1,59],\"97\":[1,32],\"98\":[1,29],\"99\":[1,39],\"100\":[1,40],\"101\":[2,19],\"102\":[2,42],\"103\":[3,139],\"104\":[2,56],\"105\":[2,19],\"106\":[1,28],\"107\":[2,23],\"108\":[3,53],\"109\":[2],\"110\":[2],\"111\":[4,57],\"112\":[2],\"113\":[2],\"114\":[1,45],\"115\":[3,60],\"116\":[3,97],\"117\":[3,30],\"118\":[3,33],\"119\":[4,43],\"120\":[4,16],\"121\":[2],\"122\":[2],\"123\":[1,61],\"124\":[1,18],\"125\":[1,24],\"126\":[2],\"127\":[2],\"128\":[2,35],\"129\":[1,8],\"130\":[1,18],\"131\":[2],\"132\":[2],\"133\":[2,34],\"134\":[1,7],\"135\":[1,44],\"136\":[1,60],\"137\":[2,33],\"138\":[4],\"139\":[2,43],\"140\":[2,30],\"141\":[2,74],\"142\":[1,156],\"143\":[3,27],\"144\":[1,20],\"145\":[1,25],\"146\":[2],\"147\":[1,20],\"148\":[1,50],\"149\":[2],\"150\":[1,20],\"151\":[1,51],\"152\":[2],\"153\":[2,55],\"154\":[2],\"155\":[2,32],\"156\":[1,47],\"157\":[2,23],\"158\":[1,7],\"159\":[2],\"160\":[4,21],\"161\":[2,39],\"162\":[1,28],\"163\":[1,32],\"164\":[2,32],\"165\":[1,47],\"166\":[1,63],\"167\":[1,47],\"168\":[1,41],\"169\":[5,27],\"170\":[1,22],\"171\":[2,40],\"172\":[1,64],\"173\":[1,25],\"174\":[1,72],\"175\":[1,32],\"176\":[2],\"177\":[2],\"178\":[1,46],\"179\":[1,32],\"180\":[2,31],\"181\":[2,53],\"182\":[1,11],\"183\":[1,30],\"184\":[2,43],\"185\":[1,4],\"186\":[1,19],\"187\":[2],\"188\":[2],\"189\":[2,13],\"190\":[1,16],\"191\":[1,7],\"192\":[1,19],\"193\":[1,6],\"194\":[1,7],\"195\":[1,17],\"196\":[1,20],\"197\":[1,7],\"198\":[1,19],\"199\":[1,14],\"200\":[1,7],\"201\":[1,20],\"202\":[2,15],\"203\":[1,14],\"204\":[1,8],\"205\":[1,33],\"206\":[1,5],\"207\":[1,6],\"208\":[1,24],\"209\":[1,7],\"210\":[1,10],\"211\":[1,22],\"212\":[1,7],\"213\":[1,10],\"214\":[1,31],\"215\":[1,31],\"216\":[1,10],\"217\":[1,21],\"218\":[1,16],\"219\":[1,8],\"220\":[1,23],\"221\":[1,14],\"222\":[1,8],\"223\":[1,24],\"224\":[2,43],\"225\":[1,31],\"226\":[2,37],\"227\":[1,81],\"228\":[2,40],\"229\":[1,4],\"230\":[2,29],\"231\":[1,17],\"232\":[1,27],\"233\":[1,35],\"234\":[1,23],\"235\":[2,50],\"236\":[3,106],\"237\":[2],\"238\":[1,41],\"239\":[2,30],\"240\":[1,51],\"241\":[2,58],\"242\":[1,20],\"243\":[2,58],\"244\":[1,72],\"245\":[3,34],\"246\":[3,26],\"247\":[1,29],\"248\":[1,45],\"249\":[1,45],\"250\":[1,53],\"251\":[1,45],\"252\":[1,34],\"253\":[1,43],\"254\":[1,46],\"255\":[1,42],\"256\":[1,20],\"257\":[1,7],\"258\":[1,38],\"259\":[2],\"260\":[2],\"261\":[1,30],\"262\":[1,6],\"263\":[1,39],\"264\":[2],\"265\":[2],\"266\":[1,15],\"267\":[1,6],\"268\":[1,20],\"269\":[2],\"270\":[2],\"271\":[1,52],\"272\":[1,6],\"273\":[1,27],\"274\":[1],\"275\":[1,45],\"276\":[1,6],\"277\":[1,24],\"278\":[2],\"279\":[2],\"280\":[1,52],\"281\":[1,6],\"282\":[1,8],\"283\":[2],\"284\":[2],\"285\":[1,62],\"286\":[2,6],\"287\":[1,37],\"288\":[1,32],\"289\":[1,6],\"290\":[1,63],\"291\":[2],\"292\":[2],\"293\":[1,34],\"294\":[1,6],\"295\":[1,12],\"296\":[2],\"297\":[2],\"298\":[1,25],\"299\":[1,6],\"300\":[1,24],\"301\":[2],\"302\":[2],\"303\":[1,39],\"304\":[1,6],\"305\":[1,24],\"306\":[2],\"307\":[2],\"308\":[1,17],\"309\":[1,6],\"310\":[1,29],\"311\":[2],\"312\":[2],\"313\":[1,24],\"314\":[1,7],\"315\":[1,35],\"316\":[2],\"317\":[2],\"318\":[1,47],\"319\":[1,7],\"320\":[1,20],\"321\":[2],\"322\":[2],\"323\":[1,35],\"324\":[1,17],\"325\":[2,27],\"326\":[7,39],\"327\":[3,44],\"328\":[4],\"329\":[4],\"330\":[2,65],\"331\":[1,7],\"332\":[1,39],\"333\":[2],\"334\":[2],\"335\":[3,98],\"336\":[1,32],\"337\":[1,6],\"338\":[1,14],\"339\":[2],\"340\":[2],\"341\":[1,21],\"342\":[1,6],\"343\":[1,16],\"344\":[2],\"345\":[2],\"346\":[1,35],\"347\":[1,6],\"348\":[1,42],\"349\":[2],\"350\":[2],\"351\":[1,35],\"352\":[1,6],\"353\":[1,42],\"354\":[2],\"355\":[2],\"356\":[1,30],\"357\":[1,6],\"358\":[1,43],\"359\":[2],\"360\":[2],\"361\":[1,17],\"362\":[1,6],\"363\":[1,9],\"364\":[2],\"365\":[2],\"366\":[1,35],\"367\":[1,6],\"368\":[1,11],\"369\":[2],\"370\":[2],\"371\":[1,29],\"372\":[1,6],\"373\":[1,10],\"374\":[2],\"375\":[2],\"376\":[1,102],\"377\":[2,13],\"378\":[1,34],\"379\":[1,8],\"380\":[1,14],\"381\":[2],\"382\":[2],\"383\":[1,25],\"384\":[1,8],\"385\":[1,12],\"386\":[2],\"387\":[2],\"388\":[1,30],\"389\":[1,8],\"390\":[1,14],\"391\":[2],\"392\":[2],\"393\":[1,27],\"394\":[1,8],\"395\":[1,12],\"396\":[2],\"397\":[2],\"398\":[1,33],\"399\":[1,8],\"400\":[1,15],\"401\":[2],\"402\":[2],\"403\":[1,30],\"404\":[1,8],\"405\":[1,14],\"406\":[2],\"407\":[2],\"408\":[1,26],\"409\":[1,8],\"410\":[1,13],\"411\":[2],\"412\":[2],\"413\":[1,38],\"414\":[1,8],\"415\":[1,25],\"416\":[2],\"417\":[2],\"418\":[1,39],\"419\":[1,8],\"420\":[1,26],\"421\":[2],\"422\":[2],\"423\":[2,18],\"424\":[2,16],\"425\":[1,7],\"426\":[1,12],\"427\":[1,38],\"428\":[1,10],\"429\":[1,44],\"430\":[2],\"431\":[2],\"432\":[1,44],\"433\":[1,8],\"434\":[1,18],\"435\":[2],\"436\":[2],\"437\":[1,43],\"438\":[1,10],\"439\":[1,24],\"440\":[2],\"441\":[2],\"442\":[1,45],\"443\":[1,10],\"444\":[1,30],\"445\":[2],\"446\":[2],\"447\":[1,48],\"448\":[2,13],\"449\":[1,10],\"450\":[1,8],\"451\":[1,27],\"452\":[2],\"453\":[2],\"454\":[1,9],\"455\":[1,8],\"456\":[1,27],\"457\":[2],\"458\":[2],\"459\":[1,10],\"460\":[1,8],\"461\":[1,25],\"462\":[2],\"463\":[2],\"464\":[1,5],\"465\":[1,6],\"466\":[1,23],\"467\":[2],\"468\":[2],\"469\":[2,48],\"470\":[1,9],\"471\":[3,39],\"472\":[1,3]},\"averageFieldLength\":[1.7399577167019036,36.43207272481158],\"storedFields\":{\"0\":{\"h\":\"Frequently Asked Questions\",\"t\":[\"On this page we hope to document frequently asked questions in regards to using the adze library.\"]},\"1\":{\"h\":\"How can I make Adze work with NestJS?\"},\"2\":{\"h\":\"Problem\",\"t\":[\"\\\"When installing Adze in NestJS I get the following error:\\\"\",\"Error [ERR_REQUIRE_ESM]: require() of ES Module /Users/andrewstacy/Projects/personal/adze/dist/index.js from /Users/andrewstacy/Projects/personal/project-name/dist/logger.js not supported. \"]},\"3\":{\"h\":\"Solution\",\"t\":[\"NestJS currently does not support importing of ES Modules directly. There is currently an open PR on GitHub to resolve this.\",\"There are currently two preferred options for working around this limitation:\"]},\"4\":{\"h\":\"Use Experimental Require Module Flag\",\"t\":[\"The easiest way to work around this issue is to use the node --experimental-require-module flag. Keep in mind that this will only work with node version >= 22.x and it is an experimental feature that can change at any time with new node versions.\",\"Change your nestjs scripts to look like this:\",\"{ \\\"scripts\\\": { \\\"start\\\": \\\"nest start -e 'node --experimental-require-module'\\\", \\\"start:dev\\\": \\\"nest start --watch -e 'node --experimental-require-module'\\\", \\\"start:debug\\\": \\\"nest start --debug --watch -e 'node --experimental-require-module'\\\", \\\"start:prod\\\": \\\"node --experimental-require-module dist/main\\\" } } \"]},\"5\":{\"h\":\"Use Helpers\",\"t\":[\"This method is a bit safer, but is also quite ugly. It requires the use of the dynamic import function with means that you'll have to await the function each time you want a copy of your adze logger.\",\"More information about this method can be found at this StackOverflow post:\",\"https://stackoverflow.com/questions/74830166/unable-to-import-esm-module-in-nestjs\"]},\"6\":{\"h\":\"Official Plugins\",\"t\":[\"The following list contains plugins that are officially supported by core Adze contributors and are maintained under the @adze npm organization namespace. We hope that over time this list will grow and hopefully community created add-on's can be adopted by the official organization.\"]},\"7\":{\"h\":\"@adze/transport-file\",\"t\":[\"This plugin is middleware for automatically transporting logs to rotating log files. It is based on the file-stream-rotator library and accepts all of the same configuration.\",\"Location\",\"Source Code\",\"https://github.com/adzejs/transport-file\",\"npm\",\"https://www.npmjs.com/package/@adze/transport-file\"]},\"8\":{\"h\":\"Annotating Logs\",\"t\":[\"When logging, often there is extra information we would like to know about the context of the log.\",\"For instance, if I generate a log inside of a utility function, I might want to know that's where it came from when I'm reading through my logs at a later time.\",\"This is where namespaces and labels come in to help.\",\"Let's assume a file structure for our project like this:\",\"src/\",\"index.ts\",\"logger.ts\",\"utilities.ts\"]},\"9\":{\"h\":\"Using Namespaces\",\"t\":[\"We'll assume we have already set up our logger for our project in logger.ts that just uses emoji's and we would like to write a utility function to fetch a value from a remote source.\",\"// utilities.ts import logger from './logger'; /** * Fetch data and return the body as an object. */ export async function getJsonData(url: string) { try { const response = await fetch(url); return await response.json(); } catch (e) { logger.error('An error occurred while fetching from the provided url.', url); } } \",\"In our example above, if the resource at the provided URL returns an error response, the function will catch it and log an error message.\",\"However, when sifting through our logs, we might not know that this error originated from the utilities.ts / getJsonData() function.\",\"Let's apply some namespaces to the error log to annotate the logs source. You can use the .namespace() modifier to apply the namespace.\",\"You can alternatively use the .ns() modifier alias which is just shorthand for the namespace modifier. We'll use the shorter .ns() for our example.\",\"// utilities.ts import logger from './logger'; /** * Fetch data and return the body as an object. */ export async function getJsonData(url: string) { try { const response = await fetch(url); return await response.json(); } catch (e) { logger .ns('utilities', 'getJsonData') .error('An error occurred while fetching from the provided url.', url); } } \",\"When we run our application, we will see a log that looks like the following when an error occurs in the getJsonData function.\"]},\"10\":{\"h\":\"Example Output\",\"t\":[\"TIP\",\"Notice, the log output contains #utilities #getJsonData which indicates the namespaces.\",\"Great! We have a log with namespaces to help us identify it's origin.\",\"But what happens if we have many utility functions? Do we have to repeat ourselves by writing .ns('utilities') every time?\",\"Fortunately, Adze let's us progressively enhance our logs through the seal() terminator. Let's look at how we can apply a namespace of \\\"utilities\\\" to all logs within the utilities.ts file.\",\"// utilities.ts import _logger from './logger'; // <-- Change the import name to \\\"_logger\\\" from \\\"logger\\\" // We'll define a local logger for this file that applies the \\\"utilities\\\" namespace. const logger = _logger.ns('utilities').seal(); /** * Fetch data and return the body as an object. */ export async function getJsonData(url: string) { try { const response = await fetch(url); return await response.json(); } catch (e) { logger.ns('getJsonData').error('An error occurred while fetching from the provided url.', url); } } /** * Validates that two unknown values are numbers and then adds them together. */ export function addValues(val1: unknown, val2: unknown) { // Check if our values are numbers first. if (!isNumber(val1) || !isNumber(val2)) { logger.ns('addValues').warn('One or both of the values to add was not a number!'); } return val1 + val2; } /** * Type Guard to validate that the value is a number. */ export function isNumber(value: unknown): value is number { return value !== null && !isNaN(Number(value)); } \"]},\"11\":{\"h\":\"Example Output\"},\"12\":{\"h\":\"Using Labels\",\"t\":[\"When writing logs we can also apply a label to the log using the label() modifier.\",\"Labels differ from namespaces in a couple ways.\",\"Only one label may be applied to a log.\",\"Labels associate logs together for modifiers like count and time and for other features like threads.\",\"Let's revisit our utility functions above and let's add a new function that executes a callback function 10 times and generates a log that counts its iterations.\",\"// utilities.ts import _logger from './logger'; const logger = _logger.ns('utilities').seal(); // ...other functions hidden for brevity /** * Does something 10 times. */ export function doTen(cb: () => void) { for (let i = 0; i < 10; i++) { logger.ns('doTen').count.log('Doing the thing!'); cb(); } } \"]},\"13\":{\"h\":\"Example Output\",\"t\":[\"Notice here that no counter was applied to the generated logs. This is because in order for the logs to be properly counted, they must be associated with each other via a label. Let's fix our mistake.\",\"// utilities.ts import _logger from './logger'; const logger = _logger.ns('utilities').seal(); // ...other functions hidden for brevity /** * Does something 10 times. */ export function doTen(cb: () => void) { for (let i = 0; i < 10; i++) { logger.ns('doTen').label('doTenLoop').count.log('Doing the thing!'); // <-- Add a label of 'doTenLoop' cb(); } } \"]},\"14\":{\"h\":\"Example Output\",\"t\":[\"Now we see in the output above the name of the label [doTenLoop] as well as the counter showing the number of times this log was called; (Count: n).\"]},\"15\":{\"h\":\"Capturing Log Data\",\"t\":[\"Now that we have setup our logger and configured it to our liking, we may also want to capture our log data and transport it to another source for tracking and monitoring our application.\",\"Transports are a term for moving our log data from our application to anothe source. Adze provides two ways for capturing the log data and then acting upon it to either send over the network, write to a file, or insert into a database.\",\"The two supported methods are middleware and log listeners.\"]},\"16\":{\"h\":\"Middleware\",\"t\":[\"Middleware can be created by extending the base Middleware class that is provided by Adze. The Middleware class allows you to hook into various points in the Adze log lifecycle.\",\"When the lifecycle hooks are called, they always provide the log instance which can be accessed to get its data, configuration, and formatted message, as well as any other relevant information to that hook.\",\"The hook can then process the data and transport it to a destination, such as a file, API, or database.\",\"For more information about creating middleware, please visit the middleware page in the Reference Manual.\",\"As an example, let's take a look at adding middleware to a logger that transports data to a local file and rotates the file on a specified interval. We'll use the @adze/transport-file middleware package to handle this.\",\"import adze, { setup } from 'adze'; import AdzeFileTransport from '@adze/transport-file'; // First, we will create an instance of our file transport. We'll rotate our log file every 12 hours. const fileTransport = new AdzeTransportFile({ directory: './logs', frequency: '12h' }); // Next, we call the load method. // This is necessary for our middleware to conditionally load its dependencies based on the runtime environment. // File transports are only relative to server environments. await fileTransport.load(); // Now, we'll setup Adze and provide the middleware instance. setup({ middleware: [fileTransport], }); const logger = adze.timestamp.seal(); export default logger; \",\"Pay special attention to how the AdzeTransportFile middleware class is used. First, it is instantiated with some options. Second, we must call the load method.\",\"We must call the load method because Adze is isomorphic and support both the browser and server out of the box. The dependencies that AdzeTransportFile uses under the hood can only be loaded in a server environment. The load method allows the middleware to load these dependencies only if it is in a server environment, thus prevent errors from occuring in the browser.\"]},\"17\":{\"h\":\"Log Listeners\",\"t\":[\"Another method of capturing or reacting to logs is by using log listeners. Log listeners are callback functions that are called when a log has been terminated. They have less capability than middleware for hooking into the log lifecycle, but are much simpler to implement and can be handy for simple use cases.\",\"Let's take a look at how to set up a listener.\",\"import adze, { setup } from 'adze'; // When the setup function is called, it returns a reference to the Adze global store. const store = setup(); // From our store reference we can add one or more listeners that target specific log levels. // The first one here will target all log levels by passing the `'*'` wildcard. const allListenerId = store.addListener('*', (log: Log) => { const data = log.data; // Do something with the log instance... }); // Let's add another listener that only targets alerts. const alertListenerId = store.addListener('alert', (log: Log) => { // Do something with the alert log such as triggering a notification. }); const logger = adze.timestamp.seal(); export default logger; \",\"In the above example we have created two log listeners. One targets all logs and the other targets only alert logs. You can also target logs with a number array that represents specific log levels or a string array of log level names. For more information on targeting levels, refer to the Reference Manual on LevelSelector's.\",\"Also notice that the addListener returns the ID for the registered listener. You can use this ID elsewhere in your application to remove the listeners if necessary.\",\"const allListenerId = store.addListener('*', (log: Log) => { // Do something with the log instance... }); // elsewhere in your application... store.removeListener(allListenerId); \"]},\"18\":{\"h\":\"Concepts\",\"t\":[\"Adze as a library has a few core goals it attempts to meet.\",\"The first goal is to provide a logging library that just works in both the server and browser environments.\",\"The second goal is to provide a simple Typescript compatible API that wraps, extends, or replicates all of the functionality of the standard Console API. The API is nearly identical to the standard console API, but is more feature rich and includes chaining methods for configuring your logs as you go.\",\"Lastly, most other libraries do too much. Adze seeks to separate concerns when it comes to generating logs and transporting them to another source. Other libraries tend to try to solve both problems which leads to library bloat. Adze provides a middleware API and log listeners for handling log data transport separately.\"]},\"19\":{\"h\":\"Lifecycle\",\"t\":[\"Let's take a look under the hood to see how the Adze architecture enables its API and see when the various middleware hooks are called.\"]},\"20\":{\"h\":\"The Log Chain\",\"t\":[\"As you can see in the diagram, a log chain is made up of three parts:\",\"Log Class\",\"This is where all logs begin, often by calling its static methods to start a chain.\",\"Modifiers\",\"These log methods modify the instance and then return it.\",\"Terminator\",\"These methods end the chain and generate the log.\"]},\"21\":{\"h\":\"Example\",\"t\":[\"//[Log Class].[Modifier].[Modifier].[Terminator](...arguments) adze.timestamp.timeNow.log('Logging the current time since pageload.'); \"]},\"22\":{\"h\":\"Log Class\",\"t\":[\"Every modifier and terminator method that can be called has a static implementation.\",\"By calling any of the methods statically, it will also generate a log instance. If a modifier was called, the log instance will be returned and you can continue your chain. To finalize and print a log, simply call a terminator method.\"]},\"23\":{\"h\":\"Modifiers\",\"t\":[\"Once you have a Log instance you can immediately terminate it, or you can call certain methods that this library calls modifiers. Modifiers are methods on a Log instance that changes its behavior. For example, if you wanted to add a performance timestamp to your log you could use the timeNow modifier.\",\"adze.timeNow.log('This is the time from pageload.'); \",\"And it would output like this:\",\"For documentation of all of the supported modifiers, please read the Modifiers page of the Reference Manual.\"]},\"24\":{\"h\":\"Terminator\",\"t\":[\"In our Modifiers example code above, you can see we ended our chain with log(). The log method is one of the nine default log terminators. The library also comes with other special terminators like custom. A log method is considered a terminator when it ends your log chain.\",\"For more information about all of the supported terminators, please read the Terminators page of the Reference Manual.\"]},\"25\":{\"h\":\"Configuration\",\"t\":[\"Now that we have a shared logger from the setup section we may want to apply some more advanced configuration. In the following steps we'll take a look at how to change the active log level, change the output format of our logs, and even add a completely custom log level.\"]},\"26\":{\"h\":\"Set the Active Log Level\",\"t\":[\"When we are writing logs for our applications, there are many different levels of information that we want to capture. However, we do not always want to see every level of detail at all times. This is where log levels come into play.\",\"Log levels are categorized by the most severe being the lowest to the most innocuous being the highest.\",\"By ordering our logs by severity in this way, when problems arise, we can simply raise our active log level and all logs that are less than or equal to the active level will be rendered. This allows us to capture only the most important logs the majority of the time, but in cases where we need to debug something, we can increase the visibility into our application.\",\"Adze comes with 9 log levels by default, ranging from levels 0 through 8.\",\"Alert - This level should only be used for logs that require immediate attention. This should be used sparingly and only for the most critical of errors.\",\"Error - Use this for logging fatal errors or errors that impact functionality of your application.\",\"Warn - Use this for logging issues that may impact app performance in a less impactful way than an error.\",\"Info - Use this for logging general insights into your application. This level does not indicate any problems.\",\"Fail - Use this for logging network communication errors or other non-fatal errors that do not break your application.\",\"Success - Use this for logging successful network communications or other successful operations within your app.\",\"Log - Use this for general logging that doesn't apply to any of the lower levels.\",\"Debug - Use this for logging information that you typically do not want to see unless you are debugging a problem with your application. This is typically hidden by default.\",\"Verbose - Use this for logging extremely detailed debugging information. Use this level when the values you are logging are granular enough that they are no longer easily human readable.\",\"TIP\",\"By default the active level is set to 6.\",\"Let's lower our active level so that we only see alert, error, warn, and info logs.\",\"// ./src/logger.ts import adze, { setup } from 'adze'; // Set our active level to 3 setup({ activeLevel: 3, }); const logger = adze.withEmoji.timestamp.seal(); export default logger; \",\"Adze also supports using level names for setting the active level. We'll use this going forward since it's more readable.\",\"// ./src/logger.ts import adze, { setup } from 'adze'; // Set our active level to 'info' which is equivalent to 3 setup({ activeLevel: 'info', }); const logger = adze.withEmoji.timestamp.seal(); export default logger; \",\"When we run our application, all alert, error, warning, and info logs will render and all other logs will be hidden.\",\"Since we would still like to see our log in index.ts, let's change that to an info level.\",\"// ./src/index.ts import logger from './logger'; // Change -> logger.log('Logging from the index.'); logger.info('Logging from the index.'); \"]},\"27\":{\"h\":\"Structured Logging (JSON)\",\"t\":[\"Now that we have our active log level configured, we decide that what's best for our application is to generate logs as structured data, also known as JSON logs.\",\"Adze comes with four log formatters built in:\",\"Pretty - Human readable, pretty printed logs.\",\"JSON - Machine readable, structured JSON logs.\",\"Common - Logs that conform to the Common Log Format\",\"Standard - Logs that are human-readable but formatted for stdout in backend/terminal environments.\",\"Let's configure our shared logger to output as JSON.\",\"// ./src/logger.ts import adze, { setup } from 'adze'; // Set the format to \\\"json\\\" setup({ activeLevel: 'info', format: 'json', }); const logger = adze.withEmoji.timestamp.seal(); export default logger; \",\"Now run the code.\"]},\"28\":{\"h\":\"Example Output\",\"t\":[\"Oops! When we run our code we ge the following error:\",\"Error: Required fields are missing from the log meta for generating a JSON log. \",\"Certain formatters require specific meta data for generating the logs.\",\"In this case, the JSON formatter requires the following fields:\",\"hostname - The name of the machine or client that is running the code.\",\"name - The name of the application that is running.\",\"There are two ways we can provide this meta data to the logger.\",\"The first way is through the setup function. The second way is by the meta modifier.\",\"Adze also provides a convenient type (JsonLogFormatMeta) that can be used for type safety when adding the meta data.\"]},\"29\":{\"h\":\"By the setup function\",\"t\":[\"// ./src/logger.ts import adze, { setup, type JsonLogFormatMeta } from 'adze'; // Set the format to \\\"json\\\" setup<JsonLogFormatMeta>({ activeLevel: 'info', format: 'json', meta: { hostname: 'localhost', name: 'myapp', }, }); const logger = adze.withEmoji.timestamp.seal(); export default logger; \"]},\"30\":{\"h\":\"By the meta modifier\",\"t\":[\"// ./src/logger.ts import adze, { setup, type JsonLogFormatMeta } from 'adze'; // Set the format to \\\"json\\\" setup({ activeLevel: 'info', format: 'json', }); const logger = adze .meta<JsonLogFormatMeta>({ hostname: 'localhost', name: 'myapp', }) .withEmoji.timestamp.seal(); export default logger; \"]},\"31\":{\"h\":\"Example Output\",\"t\":[\"{\\\"v\\\":1,\\\"level\\\":3,\\\"levelName\\\":\\\"info\\\",\\\"name\\\":\\\"myapp\\\",\\\"hostname\\\":\\\"localhost\\\",\\\"msg\\\":\\\"Logging from the index.\\\",\\\"args\\\":[],\\\"pid\\\":1,\\\"time\\\":\\\"2024-08-21T10:15:38-04:00\\\"} \",\"Notice, even though we configured the withEmoji modifier on the logger, no emoji is rendered. This is because not every formatter will abide by every configuration value. It would not make sense to include emoji's in a machine-readable log.\",\"Before continuing, let's change our format back to the default of \\\"pretty\\\" and remove the meta data.\",\"// ./src/logger.ts import adze, { setup } from 'adze'; // Set the format to \\\"json\\\" setup({ activeLevel: 'info', }); const logger = adze.withEmoji.timestamp.seal(); export default logger; \"]},\"32\":{\"h\":\"Create a Custom Log Level\",\"t\":[\"Sometimes when we use a logger it can be useful to create a custom log level.\",\"For instance, let's say that we want an error logger that is less important than the default error level and the same importance as a warning. We can create a custom log level to handle this condition.\",\"Let's create a new log level named \\\"issue\\\".\",\"To create the log level we first must create a LevelConfig object. If you are using TypeScript you can import the type from Adze to assist with filling out the required fields.\",\"// ./src/logger.ts import adze, { setup, type LevelConfig } from 'adze'; // Here we create the configuration for our new custom level named \\\"issue\\\" const issue: LevelConfig = { levelName: 'issue', level: 2, method: 'error', style: 'padding-right: 32px; font-size: 12px; border-radius: 4px; background: linear-gradient(to right, #fff, #ffd1d1); color: #a4000f; border-color: #e3bbbb;', terminalStyle: ['white', 'bgRed'], emoji: '🔥', }; setup({ activeLevel: 'info', levels: { issue, // <-- Add the issue level configuration value here. }, }); const logger = adze.withEmoji.timestamp.seal(); export default logger; \",\"Now that we have added our custom log level, let's go to index.ts and write a log for our new level.\",\"// ./src/index.ts import logger from './logger'; logger.info('Logging from the index.'); logger.custom('issue', 'An issue has occurred that needs attention.'); \"]},\"33\":{\"h\":\"Example Output\",\"t\":[\"Adze will always apply namespaces in an additive manner. Inherited namespaces will never be overwritten by subsequent calls to the namespace modifier.\"]},\"34\":{\"h\":\"Filtering Logs\",\"t\":[\"When working in large applications, often you will have a large number of logs that are generated. With a large number of logs it can be difficult to sift through them to find the logs that you care about.\",\"Adze offers a few ways to help deal with filtering your logs so that you can focus on the ones that are currently relevant to you.\",\"When setting up Adze, in the configuration you can provide criteria for what logs will be rendered based on either their label, namespace, or level. This filter can either \\\"include\\\" or \\\"exclude\\\" logs.\",\"If the include filter type is used, only logs that match the values will be printed.\",\"If the exclude filter type is used, any logs that match the values will not be printed.\"]},\"35\":{\"h\":\"Filtering Namespaces\",\"t\":[\"Let's take a look at an example of how to apply an \\\"include\\\" filter against some logs with namespaces.\",\"import adze, { setup } from 'adze'; setup({ filters: { namespaces: { type: 'include', values: ['foo', 'bar'], }, }, }); adze.ns('foo').warn(\\\"I will print because I'm included.\\\"); adze.ns('bar').info(\\\"I will print because I'm included.\\\"); adze.ns('baz').log('I will NOT print because I am not included.'); adze.ns('foo', 'baz').log(\\\"I will print because I'm included.\\\"); adze.log('I will not print because I do not have any namespaces.'); \"]},\"36\":{\"h\":\"Example Output\",\"t\":[\"Filtering by namespaces is particularly useful when debugging as it allows you to focus on a specific code module without the noise of other logs. There is, however, one drawback that can make filtering by namespaces cumbersome.\",\"How do I know what the namespaces in my app are?\"]},\"37\":{\"h\":\"Restricting Namespaces (TS Only)\",\"t\":[\"If your application uses TypeScript, Adze provides a convenient way to force all namespaces to be registered in a centralized location. This is especially helpful because it forces developers to keep a running list of all namespaces in use. This makes it much easier to know which namespaces to filter by.\",\"Let's look at an example of restricting namespaces.\",\"import adze, { setup } from 'adze'; // Let's create a TS type for the valid namespaces in our application type ValidNamespaces = 'foo' | 'bar'; setup(); const logger = adze.timestamp.seal<ValidNamespaces>(); \",\"Now, in other places in our app where we import our sealed logger we will only be able to apply namespaces of \\\"foo\\\" and \\\"bar\\\".\",\"Let's look at an example where we try to use an invalid namespace.\",\"import logger from './logger'; adze.ns('baz').log('Trying to log something in the baz module.'); // ~~~~~ <- Argument of type '\\\"baz\\\"' is not assignable to parameter of type 'ValidNamespaces'.ts(2345) \",\"Typescript will prevent us from writing a namespace of 'baz' until we add 'baz' to our ValidNamespaces type.\"]},\"38\":{\"h\":\"Filtering Labels\",\"t\":[\"Just like our example above where we are filtering namespaces, we can also filter logs by labels.\",\"import adze, { setup } from 'adze'; setup({ filters: { labels: { type: 'exclude', values: ['foo'], }, }, }); adze.label('foo').warn(\\\"I will not print because I'm excluded.\\\"); adze.label('bar').info(\\\"I will print because I'm NOT excluded.\\\"); adze.label('baz').log('I will print because I am NOT excluded.'); adze.label('foo').log(\\\"I will not print because I'm excluded.\\\"); adze.log('I will not print because I do not have a label.'); \"]},\"39\":{\"h\":\"Example Output\"},\"40\":{\"h\":\"Filtering by Levels\",\"t\":[\"Lastly, we can filter logs by log levels using a LevelSelector value.\",\"import adze, { setup } from 'adze'; setup({ filters: { levels: { type: 'include', values: ['warn', 'log'], }, }, }); adze.warn('I will print because I am included.'); adze.info('I will not print because I am NOT included.'); adze.log('I will print because I am included.'); adze.debug('I will not print because I am not included.'); adze.verbose('I will not print because I am not included.'); \"]},\"41\":{\"h\":\"Example Output\"},\"42\":{\"h\":\"Global Store\",\"t\":[\"The Global Store is a global cache and control hub for your Adze logs. The primary purposes of a GlobalStore are to enable global configuration overrides, log listeners, and tools for filtering and recalling your cached logs. To see how a GlobalStore fits into the architecture, refer to the Lifecycle Diagram.\"]},\"43\":{\"h\":\"How Does It Work?\",\"t\":[\"One of the primary purposes of the Global Store is to enable large project to centrally control how their logs render. Let's imagine we have a micro-frontend architecture where we have multiple front-end applications running in the same browser context.\",\"One of the major challenges with logging with microfrontends is that all of the applications share the same runtime environment. This means that any logs that an application generates are mixed in with logs generated by any of the other applications.\",\"Debugging one of these apps would mean we would have to sort through a lot of logs that are not applicable. In addition, there would normally be no easy way to configure the logging of these applications centrally.\",\"With the Adze Global Store you can easily configure all instances running in the same browser context. Let's take a look at some code:\",\"import adze from 'adze'; adze.log('This is a log!'); \",\"This code looks pretty simple. We're just importing Adze and generating a single log. However, behind the scenes, Adze will check if a Global Store exists, and if it doesn't exist it will automatically instantiate an instance of it in the global context of your environment.\",\"Here's where it will be created:\",\"window.$adzeGlobal - If your environment is a web browser / deno, the Global Store will be attached to the window.\",\"global.$adzeGlobal - If your environment is node / bun, the Global Store will be attached to the global value.\",\"The logs that are generated within your runtime context will take any configuration that is set on the Global Store and merge it on top of its current configuration as an override.\",\"What this means is that even if multiple applications generate logs, you can control all of the logs by providing configuration to the Global Store.\"]},\"44\":{\"h\":\"Using the Setup Function\",\"t\":[\"Let's look at an example of overriding log configuration centrally using the Global Store with the setup() function.\",\"import adze, { setup } from 'adze'; // By calling setup, we will instantiate the global store with some configuration overrides. // We will restrict the active log level to info for everything in our runtime context. setup({ activeLevel: 'info', format: 'pretty', }); \",\"Meanwhile... in microfrontend application #1...\",\"// mfe-application-1.ts import adze from 'adze'; const logger = adze.format('json').ns('application-1').seal(); logger.info('Welcome to Application #1!'); logger.log('Something happened that I want to log about.', 123); logger.debug('Some more details here...', { foo: 'bar' }); \",\"And in microfrontend application #2...\",\"// mfe-application-2.ts import adze from 'adze'; const logger = adze.format('json').ns('application-2').seal(); logger.info('Welcome to Application #2!'); logger.error('Oh no! An error occurred in application #2!'); logger.debug('Logging some more details for debugging purposes.', { foo: 'bar' }); \"]},\"45\":{\"h\":\"Browser Output\"},\"46\":{\"h\":\"Server Output\",\"t\":[\"Notice that in our example output that the log and debug logs are not rendering. This is because our store is forcing their log level to only show up to info level. Also, even though each application is defining the log format to use the json format, the logs are printing with the pretty format because the log configuration is overwritten by the global configuration.\"]},\"47\":{\"h\":\"Installing Adze\"},\"48\":{\"h\":\"Install the Package\",\"t\":[\"You can install Adze from NPM using the following command:\",\"# npm npm i -S adze #pnpm pnpm add adze # Yarn yarn add adze \"]},\"49\":{\"h\":\"Version Requirements\",\"t\":[\"Dependency\",\"Supported Versions\",\"Notes\",\"node\",\">= 18.19.x\",\"When running Adze in a Node environment.\",\"bun\",\">= 1.1.x\",\"When running in a Bun environment.\",\"deno\",\">= 1.46.x\",\"When running in a Deno environment.\",\"typescript\",\">= 5.5.x\",\"When using Adze with TypeScript\"]},\"50\":{\"h\":\"TypeScript Configuration\",\"t\":[\"Adze is built to be used with TypeScript and we highly encourage using it in this way.\",\"When building your project with TypeScript, you need to make sure you use the \\\"DOM\\\" lib because Adze supports both the web browser and Node. Also, to support the dependencies of Adze, you'll need to add \\\"esModuleInterop\\\": true to your tsconfig as well.\",\"For more information about configuring TypeScript, go to https://www.typescriptlang.org/docs/handbook/tsconfig-json.html.\"]},\"51\":{\"h\":\"Example\",\"t\":[\"{ \\\"compilerOptions\\\": { // ...your other options \\\"lib\\\": [\\\"DOM\\\"], \\\"esModuleInterop\\\": true } } \"]},\"52\":{\"h\":\"Importing Adze\",\"t\":[\"Adze comes bundled with a few different ways of accessing it. Here are some examples:\"]},\"53\":{\"h\":\"CommonJS\",\"t\":[\"const { adze } = require('adze'); // Or alternatively `const adze = require('adze').adze;` adze.log('Hello World!'); \"]},\"54\":{\"h\":\"ESM / TypeScript\",\"t\":[\"import adze from 'adze'; adze.log('Hello World!'); \"]},\"55\":{\"h\":\"Line Numbers / Blackboxing\",\"t\":[\"Although Adze is meant primarily for long-lived logs that should be in production environments you can use it for debugging purposes just like the standard console API. The caveat with using it for debugging is that you will need to enable Blackboxing.\",\"A common problem with libraries that wrap the standard console API is that they lose line numbers in the browser console. This occurs because the browser console is reporting the line number at which the console API was called, which is usually within the library wrapper. To get around this problem, Chromium based browsers (like Chrome, Edge and Brave) added the Ignore List concept. This tells the browser to pretend like the library source code doesn't exist. This enables Adze logs to print correct line numbers from where they are called.\",\"TIP\",\"For information on setting up an Ignore List, please go to https://bit.ly/3d1eOex.\",\"To ignore the adze library you will need to supply the following regular expression:\",\"/\\\\b(?:log|json|formatter)\\\\b\\\\.js/g; \",\"For non-chromium based browsers, right now there is no easy way to work around this issue. We suggest using the standard console API for debugging purposes where line numbers are important and reserving Adze logs for long-lived logs that will be used in production environments.\"]},\"56\":{\"h\":\"Introduction\"},\"57\":{\"h\":\"Why is this named Adze?\",\"t\":[\"Illustration from Wikipedia\",\"Adze - a cutting tool that ... is used chiefly for shaping wood.\",\"Pronounced as \\\"adz\\\"\",\"Adze was chosen as a name for this library to maintain solidarity with the logging puns and to emphasize that this library is a tool for shaping the logs of your application.\"]},\"58\":{\"h\":\"Why should I use Adze?\",\"t\":[\"TIP\",\"Adze is UNIVERSAL, meaning it can run in any JS runtime (node, bun, deno, browser) without any special considerations.\",\"Compared to existing Javascript logging libraries, Adze sets itself apart because it is universal, meaning it can run in both server and browser environments with zero config. Other libraries, such as Winston or Bunyan only support server environments. Libraries like Pino and Log4JS support both environments, but it either requires some configuration or it only provides you with a very limited feature set. None of them directly support Deno or Bun.\",\"Javascript frameworks have been shifting to server-side rendering (SSR) and to micro-frontend style architectures. Both of these architecture approaches present unique challenges with logging in a production-ready environment. Because Adze is universal by nature, you can write your logs the same way throughout your application and it will just work.\",\"Aside from universalism, Adze also offers many other compelling features:\",\"First-class TypeScript support (not bolted-on)\",\"Wraps and extends the entire standard API\",\"A convenient chainable API\",\"Log Listeners for capturing log data\",\"Middleware support for plugins and transporting logs\",\"Log annotations such as namespaces, labels, and other meta data\",\"Four formats supported out of the box: \",\"Pretty - Human readable logs that are easy on the eyes\",\"JSON - Machine readable logs that are compatible with the Bunyan CLI\",\"Standard - Human readable stdout logs\",\"Common - Logs that adhere to the Common Log Format\",\"Everything is customizable and configurable\",\"Tools for caching, filtering, and recalling logs\",\"Support for creating log threads to track data across multiple scopes\",\"Convenient child logger API's\",\"and much more...\"]},\"59\":{\"h\":\"Here is a simple preview\",\"t\":[\"This preview was generated from the same code executed in both the browser (left) and the server (right) environments.\"]},\"60\":{\"h\":\"What does the API look like?\",\"t\":[\"As stated above, Adze offers an easy to use, chainable API. To create a log you simply chain together an Adze log instance with a series of modifiers and then end with a terminator. Here's an example of creating a log with a namespace:\",\"import adze from 'adze'; adze.namespace('example').log('Example log'); \",\"The output of this would look like the following:\"]},\"61\":{\"h\":\"What about child loggers?\",\"t\":[\"You might be asking yourself, \\\"the chainable API looks nice, but how about creating reusable loggers throughout my application?\\\"\",\"// logger.ts import adze from 'adze'; // Create a child logger where all logs generated include the \\\"example\\\" namespace and emoji styles. export const logger = adze.withEmoji.namespace('example').seal(); \",\"//- otherFile.ts import { logger } from './logger.ts'; logger.log('This was generated by the child logger.'); \",\"The output of this would look like the following:\"]},\"62\":{\"h\":\"Migrating from Adze v1\",\"t\":[\"If you were previously using v1.x of Adze, migration should be fairly straightforward. Only a few of the original API's changed and you should be able to resolve them for the most part with a find and replace in your project.\",\"Here's what has changed:\",\"adze(). is now just adze.\",\"Calling seal returns a class with static methods as well.\",\"Calling createShed is no longer required for any functionality. \",\"createShed has been replaced with the setup function.\",\"The global context is now named $adzeGlobal\",\"Log listeners now only receive the log instance.\",\"The configuration object now has a new configuration schema.\",\"The Filtering and Utility functions have been removed.\",\"Bundling has been removed.\",\"WARNING\",\"Some items may have been missed. Please open an issue if any other differences are discovered and we will get them documented.\"]},\"63\":{\"h\":\"Adze Factory Changes\",\"t\":[\"adze(). is now just adze.\"]},\"64\":{\"h\":\"v1 Example\",\"t\":[\"import adze from 'adze'; adze().log('This is a log.'); \"]},\"65\":{\"h\":\"v2 Example\",\"t\":[\"import adze from 'adze'; adze.log('This is a log.'); \"]},\"66\":{\"h\":\"Sealing Changes\",\"t\":[\"Calling seal returns a class with static methods as well.\"]},\"67\":{\"h\":\"v1 Example\",\"t\":[\"import adze from 'adze'; const logger = adze().timestamp.seal(); logger().log('This is a log with a timestamp.'); \"]},\"68\":{\"h\":\"v2 Example\",\"t\":[\"import adze from 'adze'; const logger = adze.timestamp.seal(); logger.log('This is a log with a timestamp.'); \"]},\"69\":{\"h\":\"Calling createShed Not Required\",\"t\":[\"Calling createShed is no longer required for any functionality like labels, count, etc.\"]},\"70\":{\"h\":\"v1 Example\",\"t\":[\"import adze from 'adze'; adze().label('blah').count.log('Counter log.'); adze().label('blah').count.log('Counter log.'); // <- count not increased \"]},\"71\":{\"h\":\"v2 Example\",\"t\":[\"import adze from 'adze'; adze.label('blah').count.log('Counter log.'); adze.label('blah').count.log('Counter log.'); // <- count is increased \"]},\"72\":{\"h\":\"createShed replaced with setup\",\"t\":[\"createShed has been replaced with the setup function.\",\"Log listeners now only receive the log instance.\"]},\"73\":{\"h\":\"v1 Example\",\"t\":[\"import adze, { createShed } from 'adze'; const shed = createShed({ globalCfg: { // overrides here }, }); shed.addListener('*', (data, render, printed) => { // do stuff... }); \"]},\"74\":{\"h\":\"v2 Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ // overrides here }); store.addListener('*', (log) => { // do stuff... }); \"]},\"75\":{\"h\":\"Global Context is Now $adzeGlobal\",\"t\":[\"The global context is now named $adzeGlobal instead of $shed.\"]},\"76\":{\"h\":\"v1 Example\",\"t\":[\"import adze, { createShed } from 'adze'; const shed = createShed(); // Old context was named $shed console.log('Context', global.$shed); \"]},\"77\":{\"h\":\"v2 Example\",\"t\":[\"import adze, { setup } from 'adze'; setup(); // New context is named $adzeGlobal console.log('Context', globalThis.$adzeGlobal); \"]},\"78\":{\"h\":\"Configuration Has New Schema\",\"t\":[\"The configuration object now has a new configuration schema.\"]},\"79\":{\"h\":\"v1 Example\",\"t\":[\"interface Configuration { logLevel?: number; useEmoji?: boolean; unstyled?: boolean; terminalColorFidelity?: 0 | 1 | 2 | 3; captureStacktrace?: boolean; machineReadable?: boolean; baseStyle?: string; logLevels?: LogLevels; customLevels?: Partial<LogLevels>; meta?: { [key: string]: unknown; }; filters?: AdzeFilters; } \"]},\"80\":{\"h\":\"v2 Example\",\"t\":[\"interface UserConfiguration { activeLevel?: Level | number; cache?: boolean; cacheSize?: number; dump?: boolean; filters?: Filters; format?: string; formatters: Record<string, FormatterConstructor>; levels: Record<string, LevelConfig>; meta?: Record<string, any>; middleware?: Middleware[]; silent?: boolean; showTimestamp?: boolean; timestampFormatter?: (date: Date) => string; withEmoji?: boolean; } type Level = 'alert' | 'error' | 'warn' | 'info' | 'fail' | 'success' | 'log' | 'debug' | 'verbose'; \"]},\"81\":{\"h\":\"Putting It All Together\",\"t\":[\"In summary, we have learned how to do the following:\",\"Installing Adze\",\"Setting up Adze for use throughout our applications\",\"Configuring and customizing Adze\",\"Annotating our logs with meta data\",\"Capturing our log data for transport\",\"Filtering our logs for readability\",\"and using tools to filter our logs in our runtime environments\",\"If you would like to dive even deeper into the functionality that Adze provides, please read through the Reference Manual. Here you will be introduced to all of the available modifiers and terminators, as well as greater detail about log formatting and customizability.\"]},\"82\":{\"h\":\"Production Example\",\"t\":[\"Here is an overview of a basic implementation of Adze for use in a production environment.\",\"import adze, { setup } from 'adze'; import AdzeTransportFile from '@adze/transport-file'; // Make the output format pretty when in development. Use JSON formatting in all other environments. const format = import.meta.env.DEV ? 'pretty' : 'json'; // Get an environment variable for controlling my active log level. Default to info level. const activeLevel = import.meta.env.LOG_LEVEL ?? 'info'; // Setup our middleware to write logs to rotating log files const fileTransport = new AdzeTransportFile({ directory: './logs' }); await fileTransport.load(); // Configure our logger globally. const store = setup({ activeLevel, format, middleware: [fileTransport], }); // Listen for alerts to trigger a notification store.addListener('alert', (log: Log) => { // POST my alert to a service that will notify me }); // Create our logger instance to use throughout our app const logger = adze.timestamp.ns('MyApp').seal(); export default logger; \",\"And using our logger in another module...\",\"// my-module.ts import _logger from './logger'; // Add a namespace of \\\"my-module\\\" for this module's logs. const logger = _logger.ns('my-module').seal(); logger.info('This is some information about my application.'); \",\"TIP\",\"Now go read the reference manual and have fun!\"]},\"83\":{\"h\":\"Setting Up Adze\",\"t\":[\"Although Adze can be used in a very simple, no-config manner by just importing it and using it, most often we want to centrally create shared loggers that can be imported and used throughout our application.\"]},\"84\":{\"h\":\"Create a Shared Logger\",\"t\":[\"To create a shared logger, first create a new file somewhere that makes sense in your application (like ./src/logger.[ts|js]).\",\"After you have created your file, let's import our dependencies.\",\"// ./src/logger.ts import adze, { setup } from 'adze'; // ...more setup code will go here \",\"Here you may have noticed the presence of the setup function that we are importing. This function is used to create a global log store and to apply global configuration to all adze logs.\",\"Now that we have imported our dependencies, let's create and export a shared logger that has emoji's enabled and outputs timestamps with every log. We'll also attach some meta data globally to all loggers using the setup function. We'll go more in-depth on why we we're doing this later.\",\"// ./src/logger.ts import adze, { setup } from 'adze'; setup({ meta: { hello: 'world!', }, }); const logger = adze.withEmoji.timestamp.seal(); export default logger; \",\"The interesting thing about the code above is that we are calling the seal method instead of a typical log terminator like info or error.\",\"What seal does is it returns a new Log class that inherits any modifiers and configuration from the parent log chain. In this case, it will inherit the modifiers withEmoji and timestamp.\",\"Now, let's import and use our new shared logger.\",\"// ./src/index.ts import logger from './logger'; logger.log('Logging from the index.'); \"]},\"85\":{\"h\":\"Example output from index.ts\"},\"86\":{\"h\":\"Shared Logger Configuration\",\"t\":[\"In our example above, we created a shared logger by using the seal() method. Another feature of the seal method is that it allows you to provide an alternative setup configuration as a parameter.\",\"For example, let's say we want to apply a middleware for transporting our logs to a remote API, but we only want to apply it to a specific child logger and not all loggers.\",\"import adze, { setup } from 'adze'; import AdzeTransportFile from '@adze/transport-file'; // Setup our middleware to write logs to rotating log files const fileTransport = new AdzeTransportFile({ directory: './logs' }); await fileTransport.load(); // Setup our middleware to write logs to rotating log files const remoteTransport = new RemoteTransport(); await remoteTransport.load(); // Configure our logger globally. const store = setup({ middleware: [fileTransport], // <-- This middleware applies to all loggers. }); // Create our logger instance to use throughout our app const logger = adze.timestamp.ns('MyApp').seal(); // Create another logger that is exclusively used for a remote transport of its logs. export const remoteLogger = logger.seal({ middleware: [remoteTransport], // <-- This middleware will only apply to our remoteLogger. }); export default logger; \",\"Notice in the example above we are creating a remoteLogger that inherits its settings from our regular logger but extends the configuration by applying the remoteTransport middleware to it.\",\"All subsequent logs that are generated by the remoteLogger will not make use of the remoteTransport middleware.\",\"Keeping this in mind, you can overwrite any setup configuration when you call the seal() terminator.\"]},\"87\":{\"h\":\"Log Threading (MDC)\",\"t\":[\"In large applications there are often times when we need to log data that comes from multiple different scopes but we want to collect all of the data and print it in a single log.\",\"This practice of collating data from many scopes is called Mapped Diagnostic Context. This is a common feature in Java's Log4J library.\",\"Adze also supports Mapped Diagnostic Context, or as Adze calls it, Log Threading. Think of a log thread like a thread on a message board or reddit where multiple individuals make a comment on a common topic.\",\"Here is an example of how threads can be used with Adze:\",\"import adze from 'adze'; function add(a: number, b: number) { const answer = a + b; adze.label('maths').thread('added', { a, b, answer }); return answer; } function subtract(x: number, y: number) { const answer = x - y; adze.label('maths').thread('subtracted', { x, y, answer }); return answer; } add(1, 2); subtract(4, 3); adze.label('maths').dump.info('Results from our thread'); \"]},\"88\":{\"h\":\"Example Output\",\"t\":[\"Notice that each log within the add and subtract functions does not actually generate a log, but rather they add a key / value pair of data to the \\\"maths\\\" label thread.\",\"On line 18, we create a log with the \\\"maths\\\" label, which provides it with the same context as the other logs in the thread, and the dump modifier instructs the info log to dump the values from the \\\"maths\\\" thread into the log output.\",\"We now have a single log that contains values from multiple scopes in our application.\"]},\"89\":{\"h\":\"Tools\",\"t\":[\"Adze supports some tools for helping developers sift through logs that have been generated.\"]},\"90\":{\"h\":\"Browser Tools\",\"t\":[\"In browser environments, Adze will always generate a global store named $adzeGlobal on the window object. From the adze global object you can access tools for filtering logs that have been generated and cached.\",\"Log caching is disabled by default and the number of logs that can be cached is capped at 300 by default. You must enable log caching to take advantage of the browser tools. You can also raise or lower the cache size as well.\",\"import adze, { setup } from 'adze'; // Enable log caching and raise the maximum cache size from the default of 300 to 500. setup({ cache: true, cacheSize: 500, }); const logger = adze.timestamp.seal(); export default logger; \",\"The filtering tools that are available are similar to the configuration based filtering in the previous section of this guide. The tools are as follows:\",\"filterByNamespace - Reprints logs that match the namespace values provided.\",\"filterByLabel - Reprints logs that match the label value provided.\",\"filterByLevel - Reprints logs that match the LevelSelector value provided.\",\"As an example, let's first write some basic logs to showcase the browser tools.\",\"import logger from './logger'; logger.ns('foo').info('A log with a namespace!'); logger.label('bar').success('A success log with a label!'); logger.log(\\\"I'm just a log... Yes I'm only a log...\\\"); \",\"If we open up the developer console in a browser, we can see all of our Adze logs that were generated when our web application executed.\",\"Now, let's clear the logs. Type console.clear() in the developer tools console.\",\"Now that the console has been cleared, let's use our tools to rerender all logs with a level of \\\"log\\\".\",\"Our log that we generated earlier has now been rerendered from the log cache.\",\"We can repeat this process for logs with namespaces and labels as well.\"]},\"91\":{\"h\":\"Server Tools\",\"t\":[\"When working with logs in a server environment, often times we write our logs to a file, much like our example in the Capturing Log Data - Middleware section of the guide.\",\"It's very useful to use a JSON log format for machine readable logs that are easy for programs to parse and consume. Other libraries, such as Bunyan are completely focused on JSON logging and do a great job with generating them.\",\"Because of how well Bunyan handles JSON logging, Adze JSON logs are modeled to match the Bunyan JSON format. Because Adze does not reinvent the wheel here, developers can take advantage of Bunyan's handy CLI tool.\",\"This tool can be used for parsing and filtering machine-readable JSON logs into human readable formats. For more information on using the Bunyan CLI, please refer to the Bunyan docs for setup and usage instructions.\"]},\"92\":{\"h\":\"\",\"t\":[\"Adze provides you with a means of writing logs that feels very natural. Writing highly-configured logs in place is a breeze with the chainable API. Want to add timestamps and emoji's? Just add the timestamp and withEmojimodifiers.\",\"adze.withEmoji.timestamp.alert('Oh no! Something terrible happened!'); \"]},\"93\":{\"h\":\"\",\"t\":[\"Adze supports multiple formatting options out-of-the-box. Use the pretty, human-readable default format, or generate machine-readable logs using the JSON format; or even mix and match both! How you use Adze is up to you.\",\"Adze JSON logs are also compatible with the Bunyan CLI so you can take advantage of its formatting and filtering features!\"]},\"94\":{\"h\":\"\",\"t\":[\"©Copyright 2024 - Andrew Stacy - Apache 2.0 License\"]},\"95\":{\"h\":\"\",\"t\":[\"First install Adze from npm.\",\"# npm npm install -S adze # pnpm pnpm add adze \",\"Then import it and start writing logs! No other configuration is required.\",\"import adze from 'adze'; adze.info('This is an info level log from AdzeJS!'); \"]},\"96\":{\"h\":\"\",\"t\":[\"Because Adze automatically comes with a global store that can have configuration applied that all logs will inherit from.\",\"What this means for microfrontend's is that if you have multiple frontend applications generating Adze logs, you can easily control them centrally. Change the log level, filter out logs that aren't relevant, or even change the format for all logs regardless of the source.\",\"For an in-depth tutorial, visit this article.\"]},\"97\":{\"h\":\"\",\"t\":[\"To learn more about Adze and how to use it in your project, take a look at the Getting Started guide for a guided tutorial, or visit the Reference Manual for more details about the API's.\"]},\"98\":{\"h\":\"\",\"t\":[\"Other logging libraries have bolted-on TypeScript support which feels unintuitive, whereas Adze is built with TypeScript from the ground up. Because of this, Adze provides a great TypeScript developer experience.\"]},\"99\":{\"h\":\"\",\"t\":[\"Modern JavaScript frameworks like NextJS, NuxtJS, and SvelteKit combine your \\\"back-end\\\" and \\\"front-end\\\" code in the same location. Adze is universal which means it can be executed on the server side or the browser side without any extra considerations. Use it anywhere!\"]},\"100\":{\"h\":\"Configuration\",\"t\":[\"Adze is a completely configurable library by design that comes with sensible defaults. There are two primary configurations to understand; the log configuration and the Global Store configuration. In this section we'll take a look at each configuration and explain each property in detail.\"]},\"101\":{\"h\":\"User Configuration\",\"t\":[\"This configuration is generated when you use modifiers or when you pass in a configuration object with the seal or sealTag terminators.\"]},\"102\":{\"h\":\"UserConfiguration Interface\",\"t\":[\"interface UserConfiguration { activeLevel?: Level | number; cache?: boolean; cacheSize?: number; dump?: boolean; filters?: Filters; format?: string; formatters: Record<string, FormatterConstructor>; levels: Record<string, LevelConfig>; meta?: Record<string, any>; middleware?: Middleware[]; silent?: boolean; showTimestamp?: boolean; timestampFormatter?: (date: Date) => string; withEmoji?: boolean; } type Level = 'alert' | 'error' | 'warn' | 'info' | 'fail' | 'success' | 'log' | 'debug' | 'verbose'; \"]},\"103\":{\"h\":\"UserConfiguration Property Descriptions\",\"t\":[\"Property Name\",\"Default Value\",\"Description\",\"activeLevel\",\"\\\"log\\\"\",\"Set the maximum log level that will be rendered.\",\"cache\",\"false\",\"Allows the Global Store to cache logs for later recall.\",\"cacheSize\",\"300\",\"The maximum number of logs that will be cached. This is to prevent memory leaks. This only applies if cache is true.\",\"dump\",\"false\",\"Tells logs to add any associated thread data to the log output.\",\"filters\",\"undefined\",\"Controls filtering of logs by level, label, or namespace.\",\"format\",\"\\\"pretty\\\"\",\"Sets the format of how logs will be generated.\",\"formatters\",\"{ pretty, json, common, standard }\",\"Key / value pairs of formatter names to Formatter classes. Comes with four built in. Pretty, JSON, Common, and Standard.\",\"levels\",\"{ [levelName: string]: LevelConfiguration }\",\"Level Configuration for each log level, including custom log levels.\",\"meta\",\"{}\",\"Series of user defined key/value pairs of meta data to attach to logs.\",\"middleware\",\"Middleware[]\",\"Array of middleware instances that will be used during the each log's lifecycle.\",\"silent\",\"false\",\"Silent logs will not print but will still be evaluated and trigger listeners and middleware hooks.\",\"showTimestamp\",\"false\",\"Instructs logs to record and print the timestamp of when they were generated.\",\"timestampFormatter\",\"undefined\",\"A callback function for taking a log Date object and returning a timestamp with the preferred custom formatting.\",\"withEmoji\",\"false\",\"Tells formatters that they are allowed to print an emoji with the output.\"]},\"104\":{\"h\":\"Setup Function\",\"t\":[\"When a log is created, if a Global Store does not already exist, it will be automatically created. You can also set one up and configure it manually by using the setup() function.\",\"The setup function accepts a UserConfiguration object that acts as a global configuration override for all logs. When setup is called, it also returns a reference to the Global Store which you can use for adding log listeners or removing them.\"]},\"105\":{\"h\":\"Setup Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true, }); store.addListener('*', (log) => { // Do something with the log data here... }); \"]},\"106\":{\"h\":\"LevelConfiguration\",\"t\":[\"The LevelConfiguration type is used for creating or modifying log level configurations. Each default log level also has a LevelConfiguration associated with it by default in the levels property of the UserConfiguration.\"]},\"107\":{\"h\":\"LevelConfiguration Interface\",\"t\":[\"Refer to the picocolors documentation for information about terminal style values.\",\"interface LevelConfiguration { levelName: string; level: number; style: string; terminalStyle: ConsoleStyle[]; method: Method; emoji: string; } \"]},\"108\":{\"h\":\"Custom Level Example\",\"t\":[\"You can use the UserConfiguration levels property with a LevelConfiguration to add a custom level.\",\"import adze, { setup } from 'adze'; setup({ activeLevel: 1337, levels: { leetLevel: { levelName: 'leetLevel', level: 1337, method: 'log', style: 'font-size: 12px; border-radius: 4px; padding-right: 10px; background: linear-gradient(to right, #ffcafc, #ff02f2); color: #fff; border-color: #e3bbbb;', terminalStyle: ['white', 'bgMagenta'], emoji: '👾', }, }, }); adze.withEmoji.custom('leetLevel', 'This is an example leetLevel log!'); \"]},\"109\":{\"h\":\"Browser Output\"},\"110\":{\"h\":\"Server Output\"},\"111\":{\"h\":\"Default Level Override Example\",\"t\":[\"All default log levels can have their settings overridden by passing a LevelConfiguration with a key and levelName of the same name. You can use the default log level configuration generator functions to get a base configuration for modifying.\",\"import adze, { setup } from 'adze'; setup({ levels: { error: { levelName: 'error', level: 1, method: 'error', style: 'color: purple; background: white;', // <- changing the error style to use purple text. terminalStyle: ['magenta', 'bgWhite'], emoji: '🔥', }, }, }); adze.withEmoji.error('This is an error log with overridden style configuration.'); \"]},\"112\":{\"h\":\"Browser Output\"},\"113\":{\"h\":\"Server Output\"},\"114\":{\"h\":\"Styling\",\"t\":[\"All of Adze default level configurations come with default styling. These can be overridden by providing a LevelConfiguration with a matching key to the default log level in the levels property.\",\"When creating custom levels or overriding existing configuration, you may want to apply custom styles or emoji's. Below are the values used for the default log levels.\"]},\"115\":{\"h\":\"Default Browser Styles\",\"t\":[\"This is a comprehensive list of the default browser styles. If you notice, these styles use padding-right for spacing and alignment. It is a painful way to do this, but due to the different ways each browser handles log styling, the only consistent way for them to align on the right is to use manual padding numbers. The goal of the default styles was to make them as consistent as possible across browsers.\",\"For more information:MDN Docs - refer to \\\"Styling console output\\\" section\"]},\"116\":{\"h\":\"Default Level Styles\",\"t\":[\"NOTE: The default styles use template string interpolation to change the padding based on the browser environment. These functions are also exported from adze.\",\"Level Name\",\"emoji\",\"Style\",\"alert\",\"🚨\",\"padding-right: ${isChrome() ? '32' : '26'}px; font-size: 12px; border-radius: 4px; background: linear-gradient(to right, #fc8585, #fc2323); color: #fff; border-color: #b70101;\",\"error\",\"🔥\",\"padding-right: ${isChrome() ? '32' : '26'}px; font-size: 12px; border-radius: 4px; background: linear-gradient(to right, #fff, #ffd1d1); color: #a4000f; border-color: #e3bbbb;\",\"warn\",\"🔔\",\"font-size: 12px; border-radius: 4px; background: linear-gradient(to right, #fff, #fff0a8); color: #715100; border-color: #e3d696; padding-right: ${isChrome() ? '38' : '44'}px;\",\"info\",\"ℹ️\",\"padding-right: ${isSafari() ? '49' : '52'}px; font-size: 12px; border-radius: 4px; background: linear-gradient(to right, #d8ebff, #b2d7ff); color: #465464; border-color: #96b5d7;\",\"fail\",\"❌\",\"padding-right: ${isChrome() ? '52' : '44'}px; font-size: 12px; border-radius: 4px; background: linear-gradient(to right, #ffe8e8, #ffd1d1); color: #a4000f; border-color: #e3bbbb;\",\"success\",\"🎉\",\"font-size: 12px; border-radius: 4px; padding-right: 30px; background: linear-gradient(to right, #e6f6e4, #ceedc9); color: #4e594d; border-color: #b7d1b3;\",\"log\",\"🪵\",\"font-size: 12px; border-radius: 4px; padding-right: 60px; background: linear-gradient(to right, #ecedef, #d9dce0); color: #333435; border-color: #bfc1c5;\",\"debug\",\"🐞\",\"font-size: 12px; padding-right: 44px; border-right: 1px solid #d9dce0; color: #465464; border-color: #999999;\",\"verbose\",\"💬\",\"font-size: 12px; padding-right: 31px; color: #999999;\"]},\"117\":{\"h\":\"Default Server Styles\",\"t\":[\"Adze styling for the server makes use of a library named picocolors. picocolors exposes several formatting functions for server text styling that Adze exposes in its configuration.\",\"For a list of styles available for use with picocolors, refer to the picocolors styles documentation.\"]},\"118\":{\"h\":\"Default Level Styles\",\"t\":[\"Level Name\",\"emoji\",\"Style\",\"alert\",\"🚨\",\"['white', 'bold', 'bgRed']\",\"error\",\"🔥\",\"['bgRed', 'white']\",\"warn\",\"🔔\",\"['bgYellow', 'white']\",\"info\",\"ℹ️\",\"['bgBlue', 'white']\",\"fail\",\"❌\",\"['bgRed', 'white']\",\"success\",\"🎉\",\"['bgGreen', 'white']\",\"log\",\"🪵\",\"['bgGray', 'white']\",\"debug\",\"🐞\",\"['bgBlack', 'white']\",\"verbose\",\"💬\",\"['italic', 'black']\"]},\"119\":{\"h\":\"Default Level Style Functions\",\"t\":[\"Each default level has a corresponding function for getting the styles that can be imported. This can simplify applying small tweaks to the default log level configurations.\",\"Level Name\",\"Style\",\"alert\",\"getAlertConfig\",\"error\",\"getErrorConfig\",\"warn\",\"getWarnConfig\",\"info\",\"getInfoConfig\",\"fail\",\"getFailConfig\",\"success\",\"getSuccessConfig\",\"log\",\"getLogConfig\",\"debug\",\"getDebugConfig\",\"verbose\",\"getVerboseConfig\"]},\"120\":{\"h\":\"Level Style Function Example\",\"t\":[\"import adze, { setup, getAlertConfig } from 'adze'; const alert = getAlertConfig({ emoji: '😭', }); setup({ levels: { alert, }, }); adze.withEmoji.alert('A customized alert log.'); \"]},\"121\":{\"h\":\"Browser Output\"},\"122\":{\"h\":\"Server Output\"},\"123\":{\"h\":\"Filters\",\"t\":[\"Filters determine whether logs are allowed to print to the developer console/server based on their log level, label, or namespace. When filtering levels, you can provide a level selector data type.\",\"Each filter type can specify and include or exclude statement. Include tells Adze to only render logs that are included in the value set. Exclude says to not render any logs that are included in the value set. If both are specified, include takes precedence over exclude in case of conflicts.\"]},\"124\":{\"h\":\"Interface\",\"t\":[\"interface Filters { level?: FilterConfig<LevelSelector>; label?: FilterConfig; namespace?: FilterConfig; } interface FilterConfig<T = string[]> { type: 'include' | 'exclude'; values: T; } \"]},\"125\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; setup({ filters: { namespaces: { type: 'include', values: ['foo'], }, }, }); adze.ns('foo').success('I should print.'); adze.ns('foo', 'bar').success('I should print.'); adze.ns('bar').fail('I should not print.'); adze.fail('I should not print because I do not have a namespace.'); \"]},\"126\":{\"h\":\"Browser Output\"},\"127\":{\"h\":\"Server Output\"},\"128\":{\"h\":\"Customized Timestamps\",\"t\":[\"The timestampFormatterconfiguration option accepts a callback function that is executed each time a log needs to generate a timestamp.\",\"By default, Adze will generate an ISO 8601 formatted timestamp, but you can use this function to generate a customized timestamp to whatever format you desire.\"]},\"129\":{\"h\":\"Interface\",\"t\":[\"type TimestampFormatter = (date: Date) => string; \"]},\"130\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; setup({ timestampFormatter: (date: Date) => '07/04/1776', }); adze.timestamp.success('America has achieved independence!'); \"]},\"131\":{\"h\":\"Browser Output\"},\"132\":{\"h\":\"Server Output\"},\"133\":{\"h\":\"LevelSelector Type\",\"t\":[\"In various places in the Adze library, a LevelSelector value is required. It is used in:\",\"Configuration.activeLevel\",\"Configuration.filters\",\"GlobalStore.addListener\",\"GlobalStore.tools.filterByLevel\",\"The LevelSelector type is a user friendly way of selecting one or more log levels.\"]},\"134\":{\"h\":\"Interface\",\"t\":[\"type LevelSelector = | '*' | string | number | string[] | number[] | [number, '-', number] | [string, '-', string]; \"]},\"135\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); // Add a listener that selects ALL log levels. store.addListener('*', (log: Log) => { /* Do something */ }); // Add a listener that selects a single log level by name. store.addListener('info', (log: Log) => { /* Do something with info logs */ }); // Add a listener that selects both alert and error log levels by name. store.addListener(['alert', 'error'], (log: Log) => { /* Do something with the alert and error logs */ }); // Or select a range of values by their name. store.addListener(['alert', '-', 'warn'], (log: Log) => { /* Do something with the alert, error, and warn logs */ }); // Alternatively, select alert and error logs by their level values. store.addListener([0, 1], (log: Log) => { /* Do something with the alert and error logs */ }); // Or select a range of logs by their level values. store.addListener([0, '-', 3], (log: Log) => { /* Do something with the alert, error, warn, and info logs */ }); \"]},\"136\":{\"h\":\"Formatters\",\"t\":[\"The primary purpose of Adze is to give the user simple ways of shaping their logs to fit their needs. Adze comes with four formatters out of the box.\",\"Formatter\",\"Value\",\"Description\",\"Pretty\",\"\\\"pretty\\\"\",\"The default formatter. This prints logs in a pretty, human-readable format.\",\"JSON\",\"\\\"json\\\"\",\"This formatter prints logs as machine-readable JSON objects that are compatible with the Bunyan CLI.\",\"Standard\",\"\\\"standard\\\"\",\"This formatter prints human-readable logs for a simple stdout format for terminals or files.\",\"Common\",\"\\\"common\\\"\",\"This formatter prints logs according to the Common Log Format.\"]},\"137\":{\"h\":\"Pretty Formatter\",\"t\":[\"The Pretty formatter is the default formatter used by Adze. It formats logs in a pretty, human-readable manner.\",\"To use it, set the User Configurationformat value to be \\\"pretty\\\".\",\"import adze, { setup } from 'adze'; setup({ format: 'pretty', }); \"]},\"138\":{\"h\":\"Browser and Server Output\"},\"139\":{\"h\":\"JSON Formatter\",\"t\":[\"The JSON formatter is used to generate machine-readable JSON logs. The logs that are generated are compatible with the Bunyan CLI for parsing logs to be human-readable or for filtering them based on their values.\",\"To use it, set the User Configurationformat value to be \\\"json\\\".\",\"import adze, { setup } from 'adze'; setup({ format: 'json', }); \"]},\"140\":{\"h\":\"JsonLogFormatMeta Interface\",\"t\":[\"JSON formatted logs require some meta data to be compatible with the Bunyan JSON Schema. To apply these values you must include them when calling the meta modifier or apply them in the setup function.\"]},\"141\":{\"h\":\"Usage Example\",\"t\":[\"To get TS type checking for these values, Adze exports an interface called JsonLogFormatMeta that can be passed to the meta modifier as a generic type.\",\"The minimum required fields are name and hostname.\",\"import adze, { setup, type JsonLogFormatMeta } from 'adze'; setup({ level: 'debug', format: 'json', }); const logger = adze.meta<JsonLogFormatMeta>({ name: 'myApp', hostname: 'localhost' }).seal(); export default logger; // --- OR ALTERNATIVELY setup<JsonLogFormatMeta>({ level: 'debug', format: 'json', meta: { name: 'myApp', hostname: 'localhost', }, }); \",\"If you want to later apply extra optional JSON log meta fields, you can use the JsonLogOptionalFields interface.\",\"// ./elsewhere.ts import { type JsonLogOptionalFields } from 'adze'; import logger from './logger'; logger.meta<JsonLogOptionalFields>({ latency: 400 }).debug('Logging the latency of our app.'); \"]},\"142\":{\"h\":\"Interface\",\"t\":[\"interface JsonLogFormatMeta { /** * The name of the application or logger that is generating the log. */ name: string; /** * The hostname of the machine that generated the log. */ hostname: string; /** * The name of the log level. */ levelName?: string; /** * Optional. Object giving log call source info. This is added automatically by Bunyan if the * \\\"src: true\\\" config option is given to the Logger. Never use in production as this is really * slow. */ src?: string; /** * A caught JS exception. This will be added anytime adze detects an Error object in the log * terminator arguments. You may also manually serialize an error with the `serializeError` * function from adze. */ err?: JsonLogError; /** * A request identifier. Including this field in all logging tied to handling a particular request * to your server is strongly suggested. This allows post analysis of logs to easily collate all * related logging for a request. This really shines when you have a SOA with multiple services * and you carry a single request ID from the top API down through all APIs. */ req_id?: string; /** * An HTTP server request. This can be generated with the `serializeRequest` function from adze. */ req?: JsonLogHttpRequest; /** * An HTTP server response. This can be generated with the `serializeResponse` function from adze. */ res?: JsonLogHttpResponse; /** * The latency of the logged request in milliseconds. */ latency?: number; /** * Any additional meta data that you want to include in the log. */ meta?: Record<string, unknown>; } /** * Type for a JSON Log error on the `err` property. */ export interface JsonLogError { message: string; name: string; stack?: string; } /** * Type for declaring a JSON log HTTP request object. * * This can be generated from the `serializeRequest` function from adze. */ export interface JsonLogHttpRequest { method: HttpMethod; url: string; headers: Record<string, string>; body?: string; remoteAddress: string; remotePort?: number; username?: string; } /** * Type for declaring a JSON log HTTP response object. * * This can be generated from the `serializeResponse` function from adze. */ export interface JsonLogHttpResponse { statusCode: HttpStatus; header: string; } \"]},\"143\":{\"h\":\"JsonLogFormatMeta Serializer Functions\",\"t\":[\"For the JSON log meta properties of err, req, and res Adze provides a set of serializer functions to make it much simpler to apply these meta data values.\"]},\"144\":{\"h\":\"serializeError\",\"t\":[\"This function accepts a JavaScript Error object and returns a serialized meta data object that is compatible with the JsonLogFormatMeta interface.\"]},\"145\":{\"h\":\"Example\",\"t\":[\"import adze, { serializeError, type JsonLogOptionalFields } from 'adze'; // Doing some stuff and an error occurs! const errMsg = 'An error occurred! UH OH!'; adze .meta<JsonLogOptionalFields>({ err: serializeError(new Error(errMsg)), }) .error(errMsg); \"]},\"146\":{\"h\":\"Example Output\"},\"147\":{\"h\":\"serializeRequest\",\"t\":[\"This function accepts a JavaScript Request object and returns a serialized meta data object that is compatible with the JsonLogFormatMeta interface.\"]},\"148\":{\"h\":\"Example\",\"t\":[\"import adze, { serializeRequest, type JsonLogOptionalFields } from 'adze'; const request = new Request('https://example.com/login', { method: 'POST', headers: { 'x-hi': 'Mom', connection: 'close', Authorization: 'Basic ' + btoa('username:password'), }, body: JSON.stringify({ foo: 'bar' }), }); // The Request serializer returns a promise so it must be awaited. adze .meta<JsonLogOptionalFields>({ req: await serializeRequest(request), }) .log('Made a request!'); \"]},\"149\":{\"h\":\"Example Output\"},\"150\":{\"h\":\"serializeResponse\",\"t\":[\"This function accepts a JavaScript Response object and returns a serialized meta data object that is compatible with the JsonLogFormatMeta interface.\"]},\"151\":{\"h\":\"Example\",\"t\":[\"import adze, { serializeResponse, type JsonLogOptionalFields } from 'adze'; // We'll make a fake response just for this example const response = new Response('hello world!', { status: 200, statusText: 'OK', headers: { boop: 'beep' }, }); Object.defineProperty(response, 'url', { value: 'https://example.com/login' }); // The Response serializer returns a promise so it must be awaited. adze .meta<JsonLogOptionalFields>({ res: await serializeResponse(response), }) .log('Received a response!'); \"]},\"152\":{\"h\":\"Example Output\"},\"153\":{\"h\":\"Standard Formatter\",\"t\":[\"The Standard formatter is for generating human-readable logs in a stdout environment. This is useful for writing human-readable logs to a file or for transporting them to other platforms. The Standard formatter does not require you to specify that you want timestamps as it is a requirement for all logs of this type.\",\"To use it, set the User Configurationformat value to be \\\"standard\\\".\",\"import adze, { setup } from 'adze'; setup({ format: 'standard', }); adze.warn('This is a standard warn log.'); \"]},\"154\":{\"h\":\"Example Output\"},\"155\":{\"h\":\"Common Formatter\",\"t\":[\"The Common formatter is for generating human-readable logs according to the Common Log Format. This is primarily used for tracking network communications on servers.\",\"To use it, set the User Configurationformat value to be \\\"common\\\".\"]},\"156\":{\"h\":\"CommonLogFormatMeta\",\"t\":[\"The Common formatter requires some extra meta data to fill in various properties within a log formatted to the Common Log standard. Adze exports the CommonLogFormatMeta interface to assist you with filling in the necessary data. The Common formatter does not require you to specify that you want timestamps as it is a requirement for all logs of this type.\"]},\"157\":{\"h\":\"Usage Example\",\"t\":[\"import adze, { setup, type CommonLogFormatMeta } from 'adze'; setup<CommonLogFormatMeta>({ format: 'common', meta: { hostname: 'localhost', ident: 'user-identifier', user: 'joe', }, }); adze.log('This is a standard warn log.'); \"]},\"158\":{\"h\":\"Interface\",\"t\":[\"interface CommonLogFormatMeta { hostname: string; ident?: string; user?: string; } \"]},\"159\":{\"h\":\"Example Output\"},\"160\":{\"h\":\"Creating Third-party Formatters\",\"t\":[\"If the formatters provided by Adze do not meet your requirements, you can create a custom formatter by extending the Formatter class.\"]},\"161\":{\"h\":\"Formatter Class\",\"t\":[\"The Formatter class is the base for all built-in formatters and third-party formatters. It abstracts some of the basic logic away from the formatter in regards to the visibility, setting an apex timestamp formatter override method, and routing the log to the appropriate formatter method depending on the environment.\"]},\"162\":{\"h\":\"Interface\",\"t\":[\"class Formatter { // Properties protected cfg: Configuration; protected level: LevelConfiguration; protected timestampFormatFunction: (date: Date) => string; // Constructor constructor(cfg: Configuration, level: LevelConfiguration) {} // Methods public get timestampFormatter(): (date: Date) => string; protected abstract formatBrowser( data: ModifierData, timestamp: string, args: unknown[] ): unknown[]; protected abstract formatServer( data: ModifierData, timestamp: string, args: unknown[] ): unknown[]; } \"]},\"163\":{\"h\":\"Properties\",\"t\":[\"Property\",\"Type\",\"Description\",\"cfg\",\"Configuration\",\"The configuration of the log that is being formatted.\",\"level\",\"LevelConfiguration\",\"The configuration for the log level that this log is being terminated as.\",\"timestampFormatFunction\",\"(date: Date) => string\",\"An optional override function for the formatting the timestamp of the formatted log.\"]},\"164\":{\"h\":\"timestampFormatter getter\",\"t\":[\"This method returns the most relevant timestampFormatter function based on the hierarchy of the default function for formatting ISO-8601, then the timestampFormatter override from the UserConfiguration, then the timestamp formatter function defined by the Formatter class, with the Formatter class taking the highest priority.\"]},\"165\":{\"h\":\"formatBrowser\",\"t\":[\"This method is called when in a browser environment for formatting the provided log arguments to be output in a browser developer console.\",\"This method is provided the modifier data for all modifiers applied to the log, the timestamp according to the timestampFormatter getter, and the raw arguments for the log provided by the user.\",\"After applying formatting to the arguments, the formatBrowser method should return the formatted arguments as an array in the same order they were provided.\"]},\"166\":{\"h\":\"Example\",\"t\":[\"import { Configuration, Formatter, type LevelConfiguration, type ModifierData } from 'adze'; class HelloFormatter extends Formatter { constructor(cfg: Configuration, level: LevelConfiguration) { // This constructor isn't necessary, but is here for illustrative purposes. super(cfg, level); } protected formatBrowser(data: ModifierData, timestamp: string, args: unknown[]): unknown[] { // We'll make the first arg printed always the word \\\"Hello\\\". return ['Hello', ...args]; } /* ...a TypeScript error will be shown because we have not yet implemented the formatServer() method. We will add it in the next section. */ } \"]},\"167\":{\"h\":\"formatServer\",\"t\":[\"This method is called when in a backend environment for formatting the provided log arguments to be output to the server terminal.\",\"This method is provided the modifier data for all modifiers applied to the log, the timestamp according to the timestampFormatter getter, and the raw arguments for the log provided by the user.\",\"After applying formatting to the arguments, the formatServer method should return the formatted arguments as an array in the same order they were provided.\"]},\"168\":{\"h\":\"Example\",\"t\":[\"import { Configuration, Formatter, type LevelConfiguration, type ModifierData } from 'adze'; class HelloFormatter extends Formatter { constructor(cfg: Configuration, level: LevelConfiguration) { super(cfg, level); } // ...formatBrowser method should be here from the previous section. protected formatServer(data: ModifierData, timestamp: string, args: unknown[]): unknown[] { // We'll make the first arg printed always the word \\\"Hello\\\". return ['Hello', ...args]; } } \"]},\"169\":{\"h\":\"Using a Third-party Formatter\",\"t\":[\"To include a third-party formatter for use with Adze you must add it to the formatters object property of the User Configuration as a key/value pair.\"]},\"170\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; import HelloFormatter from './hello-formatter.ts'; setup({ formatters: { hello: HelloFormatter, }, }); // And to use the HelloFormatter, simply use the key as the value for the `format` property. setup({ format: 'hello', formatters: { hello: HelloFormatter, }, }); \"]},\"171\":{\"h\":\"Data Getters\",\"t\":[\"Every Adze log instance exposes three getters for getting log data. Usually you will want to capture log data when inside of a listener or a middleware hook.\",\"data - Returns the log data.\",\"modifierData - Returns object containing key/values from called modifiers.\",\"configuration - Returns the configuration that this log instance is using.\"]},\"172\":{\"h\":\"data\",\"t\":[\"The data getter contains all of the finalized log data after the log has been terminated.\",\"In addition to all of the properties defined in the User Configuration (with the exception of the middleware and formatters properties), the log data also includes the properties in the table below.\",\"Property\",\"Type\",\"Description\",\"level\",\"number\",\"The level value of this log.\",\"emoji\",\"string\",\"The emoji associated to this log.\",\"levelName\",\"string\",\"The level name that this log was terminated with.\",\"method\",\"string\",\"The standard console method used to print this log.\",\"style\",\"string\",\"The styles used for pretty printing this log.\",\"args\",\"unknown[]\",\"The arguments provided to be logged.\",\"message\",\"unknown[]\",\"The formatted log arguments to be printed.\"]},\"173\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); // Let's create a log listener and then access the log data store.addListener('*', (log) => { const level = log.data.level; // do something else... }); \"]},\"174\":{\"h\":\"modifierData\",\"t\":[\"The modifier data is an object containing values that will be applied to the log when it is terminated. Each time a modifier is executed, it either modifies the log's configuration or it adds a value to the modifierData property.\",\"These values will ultimately be applied to how the log renders and will be included in the log data object after the log is terminated.\",\"Property\",\"Type\",\"Description\",\"level\",\"number\",\"The level value of this log.\",\"emoji\",\"string\",\"The emoji associated to this log.\",\"levelName\",\"string\",\"The level name that this log was terminated with.\",\"method\",\"string\",\"The standard console method used to print this log.\",\"style\",\"string\",\"The styles used for pretty printing this log.\",\"args\",\"unknown[]\",\"The arguments provided to be logged.\",\"message\",\"unknown[]\",\"The formatted log arguments to be printed.\"]},\"175\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); store.addListener('*', (log) => { // We cannot call adze logs here or we'll trigger an infinite loop. console.log(log.modifierData); }); // adze.withEmoji.log('This is a log'); adze.ns('hello').log('This is a namespaced log.'); \"]},\"176\":{\"h\":\"Browser Output\"},\"177\":{\"h\":\"Server Output\"},\"178\":{\"h\":\"configuration\",\"t\":[\"The configuration getter returns the configuration object for this log instance. It will contain default values to fill in any omitted values from the provided User Configuration.\",\"If global configuration values are present from the Global Store, then those values will take precendence and override the default or user configured values.\",\"For more information on the values, refer to the Configuration page.\"]},\"179\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); store.addListener('*', (log) => { // We cannot call adze logs here or we'll trigger an infinite loop. console.log(log.configuration); }); // adze.withEmoji.log('This is a log'); adze.ns('hello').log('This is a namespaced log.'); \"]},\"180\":{\"h\":\"Global Store\",\"t\":[\"The Global Store is a global cache and control hub for your Adze logs. For a more in depth review of how it works, refer to the Global Store section of the Getting Started guide.\"]},\"181\":{\"h\":\"Setup Function\",\"t\":[\"The primary way of configuring the global store is through the setup() function. This function accepts a UserConfiguration value and uses it as a global configuration override.\",\"The setup function also returns a reference to the Global Store instance. You can use this reference to apply listeners among other things.\",\"For a more in depth tutorial on using the setup function, refer to the using the setup function section of the Global Store page of the Getting Started guide.\"]},\"182\":{\"h\":\"Interface\",\"t\":[\"function setup<Meta extends Record<string, any> = Record<string, any>>( cfg?: UserConfiguration<Meta> ): AdzeGlobal; \"]},\"183\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; // Apply global configuration const store = setup({ format: 'json', }); // Add a log listener store.addListener('*', (log) => { // Do stuff with the logs that trigger this listener. }); adze.log('This is a log.'); adze.log('This is another log.'); \"]},\"184\":{\"h\":\"Teardown Function\",\"t\":[\"If you have ran the setup function or have generated at least one Adze log, you will have an $adzeGlobal context value on your global context (window or global).\",\"Sometimes, such as when running unit tests, it is beneficial to remove the global context between tests. Adze exports the teardown function which can be used to remove the global context.\"]},\"185\":{\"h\":\"Interface\",\"t\":[\"function teardown(): void; \"]},\"186\":{\"h\":\"Example\",\"t\":[\"import adze, { setup, teardown } from 'adze'; // Apply global configuration const store = setup(); adze.label('counter').count.log('This is a log.'); adze.label('counter').count.log('This is a log.'); teardown(); adze.label('counter').count.log('This is a log.'); \"]},\"187\":{\"h\":\"Browser Output\"},\"188\":{\"h\":\"Server Output\"},\"189\":{\"h\":\"Public Getters\",\"t\":[\"These are used for retrieving data and accessing the browser console tools.\"]},\"190\":{\"h\":\"cache\",\"t\":[\"Retrieves the log cache which is an array of log instances in the order they were generated.\"]},\"191\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public get cache(): Log[]; } \"]},\"192\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true, }); adze.log('This is a log.'); adze.log('This is another log.'); // Get the log cache. const cache = store.cache; // => [Log, Log] \"]},\"193\":{\"h\":\"configuration\",\"t\":[\"Retrieves the global configuration overrides.\"]},\"194\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public get configuration(): UserConfiguration; } \"]},\"195\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ format: 'json', }); // Get the global configuration overrides. const config = store.configuration; // => { format: 'json' } \"]},\"196\":{\"h\":\"pid\",\"t\":[\"Returns an auto-incremented process ID. This is used by some formatters to provide a pid value to the logs.\"]},\"197\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public get pid(): number; } \"]},\"198\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); // Get the global configuration overrides. const pid1 = store.pid; // => 1 const pid2 = store.pid; // => 2 \"]},\"199\":{\"h\":\"tools\",\"t\":[\"Returns a reference to the browser console tools for filtering and recalling logs.\"]},\"200\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public get tools(): Tools; } \"]},\"201\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true, }); // Use the tools to reprint every cached error log. store.tools.filterByLevel('error'); \"]},\"202\":{\"h\":\"Public Methods\",\"t\":[\"These are used for caching logs, setting up log listeners, and creating and modifying labels.\"]},\"203\":{\"h\":\"addLogToCache\",\"t\":[\"Adds a log to the log cache.\",\"This is done automatically when log caching is enabled.\"]},\"204\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public addLogToCache(log: Log): void; } \"]},\"205\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); // If I wanted to manually add a new log to the cache for some reason... // NOTE: Don't do this! This is for demo purposes only! store.addLogToCache(new adze()); \"]},\"206\":{\"h\":\"clearCache\",\"t\":[\"Clears the log cache.\"]},\"207\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public clearCache(): void; } \"]},\"208\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true }); adze.log('This is a test log.'); // If I want to clear the cached logs... store.clearCache(); \"]},\"209\":{\"h\":\"getLabel\",\"t\":[\"Get a label object by name.\"]},\"210\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public getLabel(name: string): Label | undefined; } \"]},\"211\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true }); adze.label('foo').log('This is a test log.'); // Get the label object named foo... const label = store.getLabel('foo'); \"]},\"212\":{\"h\":\"setLabel\",\"t\":[\"Get a label object by name.\"]},\"213\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public setLabel(name: string, label: Label): void; } \"]},\"214\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true }); adze.label('foo').log('This is a test log.'); // Updating the foo label by setting the count to 1. // EXAMPLE ONLY: DO NOT DO THIS! const label = store.setLabel('foo', { name: 'foo', count: 1 }); \"]},\"215\":{\"h\":\"addListener\",\"t\":[\"Adds a log listener that listens for logs that match the provided level selector and returns the ID of the listener. The ID can be used to remove the listener at a later time by using the removeListener method.\"]},\"216\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public addListener(levels: LevelSelector, listener: LogListener): number; } \"]},\"217\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); store.addListener('log', (log) => { // Do something with the log... }); adze.label('foo').log('This is a test log.'); \"]},\"218\":{\"h\":\"removeListener\",\"t\":[\"Removes an existing log listener by its ID. This ID is returned from the addListener method.\"]},\"219\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public removeListener(id: number): void; } \"]},\"220\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); const id = store.addListener('log', (log) => { // Do something with the log... }); adze.label('foo').log('This is a test log.'); store.removeListener(id); \"]},\"221\":{\"h\":\"getListeners\",\"t\":[\"Returns an array of log listener callback functions by the level they target.\"]},\"222\":{\"h\":\"Interface\",\"t\":[\"class AdzeGlobal { public getListeners(level: number): LogListener[]; } \"]},\"223\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); store.addListener('log', (log) => { // Do something with the log... }); adze.label('foo').log('This is a test log.'); const logListeners = store.getListeners(6); \"]},\"224\":{\"h\":\"Introduction & Lifecycle\",\"t\":[\"This section of the documentation will be focused on details about individual functions, log methods, data, types, etc. The reference manual is not intended to provide you with a walkthrough style tutorial.\",\"For a step-by-step tutorial, please read through the Getting Started user guide.\"]},\"225\":{\"h\":\"Lifecycle\",\"t\":[\"Before diving into the rest of the reference manual, it can be beneficial to have an understanding of the workflow / lifecycle of an Adze log. Understanding the lifecycle is vital to understanding how middleware, log listeners, and the global store work.\"]},\"226\":{\"h\":\"Lifecycle Diagram\",\"t\":[\"The Adze class is a class that contains static method equivalents for every modifier and terminator method. If a modifier method has been called statically, a new instance of Adze will be created and returned, thus allowing you to chain more modifier method calls or call a terminator method.\"]},\"227\":{\"h\":\"Explanation\",\"t\":[\"Modifier methods can be chained indefinitely whereas a terminator method which finalizes a log will not return the log instance and the chain is ended. At this point is when the properties of the log instance are evaluated and then the log message is generated and printed.\",\"Throughout the termination process, various lifecycle hooks will be called on any middleware instances that have been registered. This is useful for plugins to capture log data or manipulate logs in various ways.\",\"After a log has been terminated, its instance is stored in the Global Store if caching is enabled. From the global store you can filter and recall logs that have already been generated using the global store tools.\"]},\"228\":{\"h\":\"Log Class\",\"t\":[\"The Log Class is the core of the Adze library and contains most of the features. All Adze logs begin with the Log Class.\",\"When generating a new log, you'll start by importing the Log Class which is the default export of the library. In all examples you will see it imported with the name adze.\"]},\"229\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; \"]},\"230\":{\"h\":\"Class Methods\",\"t\":[\"Every modifier and terminator method within the Log Class has a corresponding static implementation. This allows the user to call and instantiate an instance of the Log Class without the need of explicitly calling new Log().\"]},\"231\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // Example value to be logged. const x = 123; adze.log('This is a log.', x); \"]},\"232\":{\"h\":\"Getters\",\"t\":[\"The public getters are used for getting data from a log instance.\",\"data - Returns the log data.\",\"modifierData - Returns object containing key/values from called modifiers.\",\"configuration - Returns the configuration that this log instance is using.\"]},\"233\":{\"h\":\"Modifiers\",\"t\":[\"Modifiers are used to alter log behavior or add context.\",\"assert\",\"closeThread\",\"count\",\"countClear\",\"countReset\",\"dir\",\"dirxml\",\"dump\",\"format\",\"group\",\"groupCollapsed\",\"groupEnd\",\"if\",\"label\",\"meta\",\"namespace/ns\",\"silent\",\"table\",\"time\",\"timeEnd\",\"timeNow\",\"timestamp\",\"trace\",\"withEmoji\"]},\"234\":{\"h\":\"Terminators\",\"t\":[\"Terminators end a log and generate it at the specified level.\",\"alert\",\"error\",\"warn\",\"info\",\"fail\",\"success\",\"log\",\"debug\",\"verbose\",\"custom\",\"thread\",\"seal\",\"sealTag\"]},\"235\":{\"h\":\"Micro-Frontends\",\"t\":[\"DANGER\",\"This version is now deprecated! Please upgrade to version 2!\",\"You may be asking yourself, \\\"What are micro-frontends?\\\" To be brief, micro-frontends are an extension of the micro-services architecture pattern all the way through to the frontend of an application.\",\"For a more detailed explanation, please visit these excellent resources:\",\"Micro-Frontends.org\",\"Micro-Frontend Architectures on AWS\"]},\"236\":{\"h\":\"Micro-Frontend Logging\",\"t\":[\"A challenge that comes with micro-frontend architectures is enabling the parent application to be able to coordinate behaviors from the child applications. One of these challenges is logging. Within a micro-frontend architecture you will have multiple apps that are able to injected into the parent application without the parent application needing to know much about how the child application implements their features. In order to prevent chaos within the parent app, child apps typically remove all of their logs before packaging for the parent application. This keeps the browser console clean. The downside to this however is that you may need to capture some logs in production and react to them. Removing them leaves you helpless in this regard.\",\"This is where Adze and GlobalStore come in to help. Because a GlobalStore is a global cache and configuration store, it takes precedence over the configuration of any Adze logs. What this means for a micro-frontend architecture is that you can keep your logs for production and the parent application can control their behavior without knowing anything about the child application.\"]},\"237\":{\"h\":\"Example Architecture\"},\"238\":{\"h\":\"Explanation\",\"t\":[\"Within the dev environment of each of your child applications you can interact with a GlobalStore. When packaging your application for production you will leave out your GlobalStore instance and only deploy it with Adze logs. Then, in the parent application, your child applications logging behavior can be controlled by the parent app's GlobalStore instance.\"]},\"239\":{\"h\":\"Best Practices\",\"t\":[\"When writing logs in your child applications you should apply a common namespace across all of them. This enables the parent application to target those logs and control them as needed.\"]},\"240\":{\"h\":\"Middleware\",\"t\":[\"Adze is able to be extended through middleware classes. Adze exports a Middleware Class that can be extended to hook into various points in a log's lifecycle.\",\"Look for Adze middleware libraries for extending the functionality of your logs or for transporting your log data to various targets.\",\"The Middleware Class is meant to be used as a base class that is extended for creating middleware components for Adze to use.\",\"Because Adze is isomorphic, all middleware MUST also be isomorphic.\"]},\"241\":{\"h\":\"Environment Targeting\",\"t\":[\"When creating middleware, sometimes you care about browser and backend environments, and sometimes you only care about one of them.\",\"The Middleware Class requires that you specify your target if you only care about a single environment. If you don't specify your target environment, it will default to assuming your middleware cares about 'both'. You can specify your target by providing your value as the first parameter to the super() call in your middleware constructor.\",\"The options are:\",\"\\\"both\\\" - (Default) This middleware will operate in both server and browser environments.\",\"\\\"browser\\\" - This middleware only operates in the browser.\",\"\\\"server\\\" - This middleware only operates in backend environments.\"]},\"242\":{\"h\":\"Example\",\"t\":[\"import { Middleware } from 'adze'; export class HelloMiddleware extends Middleware { constructor() { // Let's target the server environment for our middleware. super('server'); } } \"]},\"243\":{\"h\":\"Loading Dependencies\",\"t\":[\"Middleware dependencies may function in one or both types of environments. To support all of the various situations, the Middleware Class provides simple hooks for conditionally loading dependencies.\",\"These hooks are called when the consumer of the middleware calls the load method on the middleware instance. This is required because we must await our conditionally loaded dependencies.\",\"The methods that are called for each environment are:\",\"protected async loadServerDependencies() - Hook for loading server side dependencies.\",\"protected async loadBrowserDependencies() - Hook for loading browser side dependencies.\"]},\"244\":{\"h\":\"Example\",\"t\":[\"import { Middleware } from 'adze'; // Make sure to include the \\\"type\\\" value here! Otherwise your code will try to import the function! import type { writeFile } from 'node:fs'; export class HelloMiddleware extends Middleware { private writeFile: typeof writeFile; constructor() { super('server'); } /** * Load dependencies for the server environment. */ protected async loadServerDependencies() { // We'll load the fs.readFile function so we can write data to our file system. const fs = await import('node:fs'); // Save our dependency to the private writeFile property to be used elsewhere in our middleware. this.writeFile = fs.writeFile; } /** * Load dependencies for the browser environment. */ protected async loadBrowserDependencies() { // We won't put anything here because we're only targeting the server. } } \"]},\"245\":{\"h\":\"Using the Middleware\",\"t\":[\"To use our middleware, we'll need to make sure we instantiate it and await a call to the load method before passing it in to the setup function.\",\"import adze, { setup } from 'adze'; import HelloMiddleware from './hello-middleware'; const helloMw = new HelloMiddleware(); await helloMw.load(); setup({ middleware: [helloMw], }); \"]},\"246\":{\"h\":\"Using Lifecycle Hooks\",\"t\":[\"To hook into various points in the Adze log lifecycle, we can define hooks in our middleware. The hooks listed below are in order of when they are called in the lifecycle.\"]},\"247\":{\"h\":\"constructed\",\"t\":[\"This hook is called during construction of a log instance.\",\"interface Middleware { constructed?(log: Log): void; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\"]},\"248\":{\"h\":\"beforeModifierApplied\",\"t\":[\"This hook is called just before a modifier is applied to a log instance.\",\"interface Middleware { beforeModifierApplied?(log: Log, name: ModifierName, data: ModifierData): void; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\",\"2\",\"name\",\"The name of the modifier that was called (ie. \\\"withEmoji\\\")\",\"3\",\"data\",\"The cumulative modifier data object from all modifier calls.\"]},\"249\":{\"h\":\"afterModifierApplied\",\"t\":[\"This hook is called just after a modifier is applied to a log instance.\",\"interface Middleware { afterModifierApplied?(log: Log, name: ModifierName, data: ModifierData): void; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\",\"2\",\"name\",\"The name of the modifier that was called (ie. \\\"withEmoji\\\")\",\"3\",\"data\",\"The cumulative modifier data object from all modifier calls.\"]},\"250\":{\"h\":\"beforeFormatApplied\",\"t\":[\"This hook is called just before a formatter is applied to a log instance to format a message. The hook must return a message (unknown[]). It can return the message parameter mutated or unchanged. Whatever is returned will be the new log message.\",\"interface Middleware { beforeFormatApplied?(log: Log, format: string, message: unknown[]): unknown[]; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\",\"2\",\"format\",\"The name of the log formatter that will be used.\",\"3\",\"message\",\"Array of arguments to be printed to the console.\"]},\"251\":{\"h\":\"afterFormatApplied\",\"t\":[\"This hook is called just after a formatter is applied to a log instance to format a message.\",\"interface Middleware { afterFormatApplied?(log: Log, format: string, message: unknown[]): void; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\",\"2\",\"format\",\"The name of the log formatter that was used.\",\"3\",\"message\",\"Array of formatted arguments to be printed to the console.\"]},\"252\":{\"h\":\"beforePrint\",\"t\":[\"This hook is called just before a log instance message is printed to the browser or console.\",\"interface Middleware { beforePrint?(log: Log): void; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\"]},\"253\":{\"h\":\"beforeTerminated\",\"t\":[\"This hook is called just before a log is terminated.\",\"interface Middleware { beforeTerminated?(log: Log, terminator: string, args: unknown[]): void; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\",\"2\",\"terminator\",\"The name of the terminator that is being called to print the log.\",\"3\",\"args\",\"The log arguments prior to formatting.\"]},\"254\":{\"h\":\"afterTerminated\",\"t\":[\"This hook is called just when a log instance has completed termination.\",\"interface Middleware { afterTerminated?(log: Log, terminator: string, args: unknown[]): void; } \",\"Order\",\"Parameter\",\"Description\",\"1\",\"log\",\"The instance of the log. This can be used to access its data.\",\"2\",\"terminator\",\"The name of the terminator that is being called to print the log.\",\"3\",\"args\",\"The formatted arguments that will be printed.\"]},\"255\":{\"h\":\"Modifiers\",\"t\":[\"Once you have an Adze log instance you can now start applying modifiers. Modifiers are methods that alter the log in some way and then return the log instance so that you may chain more modifiers or terminate the instance. Keep in mind, some modifiers have a dependency on the presence of a label and labels rely on GlobalStore.\"]},\"256\":{\"h\":\"assert\",\"t\":[\"This modifier accepts an assertion boolean expression and will only print if the boolean expression fails (is a falsy value).\",\"MDN Docs\"]},\"257\":{\"h\":\"Interface\",\"t\":[\"class Log { public assert(expression: boolean): Log; } \"]},\"258\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; const x = 2; const y = 3; // Let's assert that x and y should be equal adze.assert(x === y).log('X does not equal Y'); // This log will not print because the assertion passes adze.assert(x === 2).log('X does not equal 2'); // Let's look at the output with emoji's enabled adze.withEmoji.assert(x === y).log('X does not equal Y'); \"]},\"259\":{\"h\":\"Browser Output\"},\"260\":{\"h\":\"Server Output\"},\"261\":{\"h\":\"closeThread\",\"t\":[\"This modifier closes a thread by deleting its tracked context from a shared label group.\",\"This is used primarily in conjunction with a label and the thread terminator for implementing Threading.\",\"This is not a standard API.\"]},\"262\":{\"h\":\"Interface\",\"t\":[\"class Log { public get closeThread(): Log; } \"]},\"263\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; function add(a: number, b: number) { const answer = a + b; adze.label('foo').thread('added', { a, b, answer }); return answer; } function subtract(x: number, y: number) { const answer = x - y; adze.label('foo').thread('subtracted', { x, y, answer }); return answer; } add(1, 2); subtract(4, 3); adze.label('foo').dump.info('Results from our thread'); adze.label('foo').closeThread.info('Closing the foo thread.'); adze.label('foo').dump.info('Dumping the thread context after closing it.'); \"]},\"264\":{\"h\":\"Browser Output\"},\"265\":{\"h\":\"Server Output\"},\"266\":{\"h\":\"count\",\"t\":[\"The count modifier tells the log to increment a counter associated to the log's label.\",\"MDN Docs\"]},\"267\":{\"h\":\"Interface\",\"t\":[\"class Log { public get count(): Log; } \"]},\"268\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; for (let i = 0; i < 5; i += 1) { adze.label('my-counter').count.log('Counting iterations.'); } \"]},\"269\":{\"h\":\"Browser Output\"},\"270\":{\"h\":\"Server Output\"},\"271\":{\"h\":\"countClear\",\"t\":[\"The countClear modifier completely clears the count from a label. Rather than setting the count to 0 it instead becomes null.\",\"WARNING\",\"This method is deliberately a modifier rather than a terminator because it forces you to write a log that gives you insight into when a counter was cleared. It also makes the countClear log recallable from the global store in the order it was created.\",\"This is not a standard API.\"]},\"272\":{\"h\":\"Interface\",\"t\":[\"class Log { public get countClear(): Log; } \"]},\"273\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; for (let i = 0; i < 4; i += 1) { adze.label('my-counter').count.log('Counting iterations.'); } adze.label('my-counter').countClear.log('Clearing the counter.'); adze.label('my-counter').log('A log with the my-counter label but no count.'); \"]},\"274\":{\"h\":\"Output\"},\"275\":{\"h\":\"countReset\",\"t\":[\"The countReset modifier resets the counter associated to the log's label to 0.\",\"WARNING\",\"This method is deliberately a modifier rather than a terminator because it forces you to write a log that gives you insight into when a counter was reset. It also makes the countReset log recallable from the global store in the order it was created.\",\"MDN Docs\"]},\"276\":{\"h\":\"Interface\",\"t\":[\"class Log { public get countReset(): Log; } \"]},\"277\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; for (let i = 0; i < 4; i += 1) { adze.label('my-counter').count.log('Counting iterations.'); } adze.label('my-counter').countReset.log('Resetting the counter.'); for (let i = 0; i < 4; i += 1) { adze.label('my-counter').count.log('Counting iterations again.'); } \"]},\"278\":{\"h\":\"Browser Output\"},\"279\":{\"h\":\"Server Output\"},\"280\":{\"h\":\"dir\",\"t\":[\"The dir modifier transforms the output of the log by directing it to use the console.dir() method for printing purposes only.\",\"WARNING\",\"Logs that use dir as a modifier should only be given a single argument which is usually an object. If multiple arguments are given, behavior may differ between browser and server environments. Refer to the MDN docs for more details.\",\"MDN Docs\"]},\"281\":{\"h\":\"Interface\",\"t\":[\"class Log { public get dir(): Log; } \"]},\"282\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.dir.log({ foo: 'bar' }); \"]},\"283\":{\"h\":\"Browser Output\"},\"284\":{\"h\":\"Server Output\"},\"285\":{\"h\":\"dirxml\",\"t\":[\"The dirxml modifier transforms the output of the log by directing it to use the console.dirxml() method for printing purposes only. This is mainly useful for logging out DOM elements.\",\"WARNING\",\"Logs that use dirxml as a modifier should only be given a single argument which is usually a DOM Element or other XML object. If multiple arguments are given, behavior may differ between browser and server environments. Refer to the MDN docs for more details.\",\"MDN Docs\"]},\"286\":{\"h\":\"dirxml Interface\",\"t\":[\"class Log { public get dirxml(): Log; } \"]},\"287\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // create a new div element const newDiv = document.createElement('div'); newDiv.setAttribute('id', 'test'); // and give it some content const newContent = document.createTextNode('Hi there and greetings!'); // add the text node to the newly created div newDiv.appendChild(newContent); adze.dirxml.log(newDiv); \"]},\"288\":{\"h\":\"dump\",\"t\":[\"This modifier instructs the labeled log to print the context values from a thread.\",\"Refer to the threading section of the Getting Started guide for more information.\",\"This modifier is dependent upon having a label.\",\"This is not a standard API.\"]},\"289\":{\"h\":\"Interface\",\"t\":[\"class Log { public get dump(): Log; } \"]},\"290\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup(); // Creating a GlobalStore listener is a great way to get meta data from your // threaded logs to write to disk or pass to another plugin, library, // or service. store.addListener('*', (log) => { // Do something with `log.data?.label?.context.added` or `log.data?.label?.context.subtracted`. }); function add(a: number, b: number) { const answer = a + b; adze.label('foo').thread('added', { a, b, answer }); return answer; } function subtract(x: number, y: number) { const answer = x - y; adze.label('foo').thread('subtracted', { x, y, answer }); return answer; } add(1, 2); subtract(4, 3); adze.label('foo').dump.info('Results from our thread'); \"]},\"291\":{\"h\":\"Browser Output\"},\"292\":{\"h\":\"Server Output\"},\"293\":{\"h\":\"format\",\"t\":[\"The format modifier sets the formatter that will be used for the log. This can also be used in conjunction with the seal or sealTag terminators to create specifically formatted child loggers.\",\"This is not a standard API.\"]},\"294\":{\"h\":\"Interface\",\"t\":[\"class Log { public format(format: string): Log; } \"]},\"295\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.format('standard').log('Logging a JSON formatted message.'); \"]},\"296\":{\"h\":\"Browser Output\"},\"297\":{\"h\":\"Server Output\"},\"298\":{\"h\":\"group\",\"t\":[\"The group modifier starts an uncollapsed group of logs. This means that all subsequent logs will be nested beneath this log until a groupEnd log occurs.\",\"MDN Docs\"]},\"299\":{\"h\":\"Interface\",\"t\":[\"class Log { public get group(): Log; } \"]},\"300\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // Some info about our app. const version = 'v1.0.0'; const browser = 'firefox'; adze.group.info('App Information'); adze.info(`Version: ${version}`); adze.info(`Browser: ${browser}`); adze.groupEnd.info(); \"]},\"301\":{\"h\":\"Browser Output\"},\"302\":{\"h\":\"Server Output\"},\"303\":{\"h\":\"groupCollapsed\",\"t\":[\"The groupCollapsed modifier starts an collapsed group of logs. This means that all subsequent logs will be nested beneath this log until a groupEnd log occurs.\",\"WARNING\",\"This will not be collapsed in a terminal environment since there is no way to uncollapse it.\",\"MDN Docs\"]},\"304\":{\"h\":\"Interface\",\"t\":[\"class Log { public get groupCollapsed(): Log; } \"]},\"305\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // Some info about our app. const version = 'v1.0.0'; const browser = 'firefox'; adze.groupCollapsed.info('App Information'); adze.info(`Version: ${version}`); adze.info(`Browser: ${browser}`); adze.groupEnd.info(); \"]},\"306\":{\"h\":\"Browser Output\"},\"307\":{\"h\":\"Server Output\"},\"308\":{\"h\":\"groupEnd\",\"t\":[\"The groupEnd modifier ends a log group. Any logs following a groupEnd will no longer be grouped.\",\"MDN Docs\"]},\"309\":{\"h\":\"Interface\",\"t\":[\"class Log { public get groupEnd(): Log; } \"]},\"310\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // Some info about our app. const version = 'v1.0.0'; const browser = 'firefox'; adze.group.info('App Information'); adze.info(`Version: ${version}`); adze.info(`Browser: ${browser}`); adze.groupEnd.info(); // <-- Ends the group adze.info('Some other information...'); \"]},\"311\":{\"h\":\"Browser Output\"},\"312\":{\"h\":\"Server Output\"},\"313\":{\"h\":\"if\",\"t\":[\"This modifier accepts a boolean expression and will only print if the boolean expression passes (is a truthy value). This modifier is the opposite behavior of the assert modifier.\",\"This is not a standard API.\"]},\"314\":{\"h\":\"Interface\",\"t\":[\"class Log { public if(expression: boolean): Log; } \"]},\"315\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; const x = 2; const y = 3; // Print the log if x equals 2 adze.if(x === 2).log('X equals 2'); // This log will not print because the if fails adze.if(x === y).log('X does not equal Y'); // Let's look at the output with emoji's enabled adze.withEmoji.if(y === 3).log('Y equals 3'); \"]},\"316\":{\"h\":\"Browser Output\"},\"317\":{\"h\":\"Server Output\"},\"318\":{\"h\":\"label\",\"t\":[\"Applies an identifying label to a log. All logs that share the same label will be linked together in the Global Store. This enables global tracking for modifiers that require a label as a prerequisite.\",\"These are the modifiers and terminators that require a label to be useful:\",\"count\",\"countReset\",\"countClear\",\"closeThread\",\"thread\",\"time\",\"timeNow\",\"timeEnd\",\"This is not a standard API.\"]},\"319\":{\"h\":\"Interface\",\"t\":[\"class Log { public label(name: string): Log; } \"]},\"320\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // Labels can be applied in any order in a modifier chain adze.label('foo').count.log('Foo'); adze.count.label('foo').log('Bar'); \"]},\"321\":{\"h\":\"Browser Output\"},\"322\":{\"h\":\"Server Output\"},\"323\":{\"h\":\"meta\",\"t\":[\"The meta modifier allows you to attach meta data to your log instance. You can then retrieve it at a later time from within a log listener or by calling the data() method on a log instance.\",\"This is not a standard API.\"]},\"324\":{\"h\":\"Interface\",\"t\":[\"class Log { // Types are Overloaded public meta<T>(key: string, val: T): Log; public meta<KV extends [string, any]>(...[key, val]: KV): Log; } \"]},\"325\":{\"h\":\"Basic Example\",\"t\":[\"import adze, { setup } from 'adze'; // Let's create a super important message to attach as meta data const info = 'Hello World!'; adze.meta({ message: 'Hello world!' }).log('This log contains an important message.'); \"]},\"326\":{\"h\":\"Example with Generic Type (TS Only)\",\"t\":[\"import adze, { setup, type JsonLogFormatMeta } from 'adze'; // We'll setup our logger to output JSON. setup({ format: 'json', }); adze // The type here ⬇️ ensures that you input the values required by the JSON formatter. .meta<JsonLogFormatMeta>({ hostname: 'localhost', name: 'myapp' }) .log('This log contains an important message.'); \"]},\"327\":{\"h\":\"Example with Listener\",\"t\":[\"import adze, { setup } from 'adze'; // Let's optionally create a GlobalStore to show the use of meta data on listeners const store = setup(); // We'll listen only to logs of level 6 which is \\\"log\\\" store.addListener('log', (log) => { adze.info(\\\"My log's meta data!\\\", log.data?.meta); }); adze.meta({ message: 'Hello world!' }).log('This log contains an important message.'); \"]},\"328\":{\"h\":\"Browser Output from Listener\"},\"329\":{\"h\":\"Server Output from Listener\"},\"330\":{\"h\":\"namespace / ns\",\"t\":[\"This modifier adds one or more namespaces to a log. These are mainly used as human readable group identifiers but are also useful for filtering logs and for identifying logs from a log listener. This modifier does not do any special grouping under the hood.\",\"Multiple calls to the namespace modifier are additive by nature and will not overwrite previously applied namespaces. This is especially useful when working with sealed child loggers.\",\"The ns() method is just a shorter alias for namespace().\",\"This is not a standard API.\"]},\"331\":{\"h\":\"Interface\",\"t\":[\"class Log { public namespace(...ns: string[]): Log; public ns(...ns: string[]): Log; } \"]},\"332\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.namespace('tix-123').log('Important info for a feature.'); adze .namespace('tix-123', 'tix-456', 'tix-789') .log('Multiple namespace entry simplified by the restof operator.'); // ns() is a shorthand alias for namespace() adze.ns('tix-456').log('More info'); // Multiple calls to namespace/ns are additive adze.ns('foo').ns('bar', 'baz').log('This log has all applied namespaces.'); \"]},\"333\":{\"h\":\"Browser Output\"},\"334\":{\"h\":\"Server Output\"},\"335\":{\"h\":\"Namespaces with Constraints\",\"t\":[\"Adze also supports passing a constraints type when sealing a new logger or when calling the setup function. This is beneficial because it will force users to add any new namespace to the central constraints type. This will make it easier to filter namespaces throughout your application because you will only have a single place to reference to understand what namespaces are being used.\",\"import adze, { setup } from 'adze'; // First we will create our app namespace constraints. type AllowedNamespaces = 'foo' | 'bar' | 'hello' | 'world'; // We can apply it when we call the `setup` function, or... setup<AllowedNamespaces>(); // Alternatively, we can apply the namespace constraint type when sealing a child logger. const logger = adze.seal<AllowedNamespaces>(); // Now when we define namespaces for a log a type error will be thrown if the // namespace provided isn't in the allowedNamespaces union type. logger.ns('foo', 'bar', 'baz').fail('This is not allowed.'); // ~~~~~ // Argument of type '\\\"baz\\\"' is not assignable to parameter of type '\\\"foo\\\" | \\\"bar\\\" | \\\"hello\\\" | \\\"world\\\"'. \"]},\"336\":{\"h\":\"silent\",\"t\":[\"The silent modifier allows a log to be terminated and cached but prevents it from printing to the console. Because the log is still processed, it will still trigger middleware hooks and listeners.\",\"This is not a standard API.\"]},\"337\":{\"h\":\"Interface\",\"t\":[\"class Log { public get silent(): Log; } \"]},\"338\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.log('Knock knock!'); adze.silent.log('Crickets...'); adze.log('I guess nobody is home :('); \"]},\"339\":{\"h\":\"Browser Output\"},\"340\":{\"h\":\"Server Output\"},\"341\":{\"h\":\"table\",\"t\":[\"The table modifier transforms the output of the log by directing it to use the console.table() method for printing purposes only.\",\"MDN Docs\"]},\"342\":{\"h\":\"Interface\",\"t\":[\"class Log { public get table(): Log; } \"]},\"343\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; const tabular_data = [ { firstName: 'Andrew', lastName: 'Stacy' }, { firstName: 'Jim', lastName: 'Bob' }, ]; adze.table.log(tabular_data); \"]},\"344\":{\"h\":\"Browser Output\"},\"345\":{\"h\":\"Server Output\"},\"346\":{\"h\":\"time\",\"t\":[\"This modifier starts a timer associated to the log's label. This is useful for taking performance measurements. A log with a time modifier must be followed by a log with a timeEnd modifier in order to get the final measurement.\",\"This modifier is dependent upon having a label.\",\"MDN Docs\"]},\"347\":{\"h\":\"Interface\",\"t\":[\"class Log { public get time(): Log; } \"]},\"348\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // Let's create a timer for performance adze.label('loop').time.log('Starting a timer.'); for (let i = 0; i < 10000; i += 1) { // Do a lot of stuff that takes time } // End the timer to get the loop performance adze.label('loop').timeEnd.log('Performance of our loop.'); // Let's see the output with emoji's adze.withEmoji.label('loop').timeEnd.log('Performance of our loop.'); \"]},\"349\":{\"h\":\"Browser Output\"},\"350\":{\"h\":\"Server Output\"},\"351\":{\"h\":\"timeEnd\",\"t\":[\"This modifier ends a timer associated to the log's label. This is useful for taking performance measurements. A log with a timeEnd modifier must be preceded by a log with a time modifier in order to get the final measurement.\",\"This modifier is dependent upon having a label.\",\"MDN Docs\"]},\"352\":{\"h\":\"Interface\",\"t\":[\"class Log { public get time(): Log; } \"]},\"353\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; // Let's create a timer for performance adze.label('loop').time.log('Starting a timer.'); for (let i = 0; i < 10000; i += 1) { // Do a lot of stuff that takes time } // End the timer to get the loop performance adze.label('loop').timeEnd.log('Performance of our loop.'); // Let's see the output with emoji's adze.withEmoji.label('loop').timeEnd.log('Performance of our loop.'); \"]},\"354\":{\"h\":\"Browser Output\"},\"355\":{\"h\":\"Server Output\"},\"356\":{\"h\":\"timeNow\",\"t\":[\"This modifier logs the time elapsed since the page has loaded. This is useful for measuring page load performance rather than performance of a particular piece of code.\",\"This modifier is not dependent upon a label.\",\"This is not a standard API.\"]},\"357\":{\"h\":\"Interface\",\"t\":[\"class Log { public get timeNow(): Log; } \"]},\"358\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; for (let i = 0; i < 10000; i += 1) { // Do a lot of stuff that takes time } // Let's create a timer for performance adze.timeNow.log('Recording the time elapsed since page load.'); // Let's see what it looks like with emoji's enabled. adze.withEmoji.timeNow.log('Recording the time elapsed since page load.'); \"]},\"359\":{\"h\":\"Browser Output\"},\"360\":{\"h\":\"Server Output\"},\"361\":{\"h\":\"timestamp\",\"t\":[\"This modifier instructs the log to render an ISO 8601 timestamp.\",\"This is not a standard API.\"]},\"362\":{\"h\":\"Interface\",\"t\":[\"class Log { public get timestamp(): Log; } \"]},\"363\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.timestamp.log('This log has a timestamp.'); \"]},\"364\":{\"h\":\"Browser Output\"},\"365\":{\"h\":\"Server Output\"},\"366\":{\"h\":\"trace\",\"t\":[\"This modifier instructs the log to print a stacktrace using the standard console.trace() method.\",\"WARNING\",\"The styling for logs using this modifier varies by browser. Chrome will render the log message with proper styling while Firefox will only render the message unstyled.\",\"MDN Docs\"]},\"367\":{\"h\":\"Interface\",\"t\":[\"class Log { public get trace(): Log; } \"]},\"368\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.trace.log('Trying to find an issue...'); \"]},\"369\":{\"h\":\"Browser Output\"},\"370\":{\"h\":\"Server Output\"},\"371\":{\"h\":\"withEmoji\",\"t\":[\"This modifier instructs the log to be printed with an emoji if the formatter supports it.\",\"The only formatter that supports this out of the box is the pretty formatter.\",\"This is not a standard API.\"]},\"372\":{\"h\":\"Interface\",\"t\":[\"class Log { public get withEmoji(): Log; } \"]},\"373\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.withEmoji.log('Logging with an emoji!'); \"]},\"374\":{\"h\":\"Browser Output\"},\"375\":{\"h\":\"Server Output\"},\"376\":{\"h\":\"Terminators\",\"t\":[\"When you have an Adze log instance, and have applied your desired modifiers, you must terminate the method chain. The methods used to terminate the chain are called terminators.\",\"Adze comes with 9 default log level terminators, all of which can be configured.\",\"Level\",\"Name\",\"Standard Method Used\",\"0\",\"alert\",\"error\",\"1\",\"error\",\"error\",\"2\",\"warn\",\"warn\",\"3\",\"info\",\"info\",\"4\",\"fail\",\"info\",\"5\",\"success\",\"info\",\"6\",\"log\",\"log\",\"7\",\"debug\",\"debug\",\"8\",\"verbose\",\"debug\",\"In addition to the default log levels, Adze provides a handful of other special terminators.\",\"Name\",\"Description\",\"clear / clr\",\"An alias for console.clear().\",\"custom\",\"Allows you to generate a log for a custom log level.\",\"seal\",\"Allows you to create a child logger by sealing your log chain into a new logger class.\",\"sealTag\",\"Allows you to create a child logger by sealing your log chain into a template string literal tag function.\",\"thread\",\"Creates a context thread that can capture data points throughout multiple scopes of your application.\"]},\"377\":{\"h\":\"Level Terminators\",\"t\":[\"These are the basic level terminators that come with Adze by default.\"]},\"378\":{\"h\":\"alert\",\"t\":[\"This level should only be used for logs that require immediate attention. This should be used sparingly and only for the most critical of errors.\",\"Default log level = 0\",\"Standard Log Method:console.error()\",\"This is not a standard API.\"]},\"379\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public alert(...args: unknown[]): void; } \"]},\"380\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.alert('Something went horribly wrong!'); // With emoji's enabled adze.withEmoji.alert('Something went horribly wrong!'); \"]},\"381\":{\"h\":\"Browser Output\"},\"382\":{\"h\":\"Server Output\"},\"383\":{\"h\":\"error\",\"t\":[\"Use this for logging fatal errors or errors that impact functionality of your application.\",\"Default log level = 1\",\"Standard Log Method:console.error()\",\"MDN Docs\"]},\"384\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public error(...args: unknown[]): void; } \"]},\"385\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.error('An error occurred!'); // With emoji's enabled adze.withEmoji.error('An error occurred!'); \"]},\"386\":{\"h\":\"Browser Output\"},\"387\":{\"h\":\"Server Output\"},\"388\":{\"h\":\"warn\",\"t\":[\"Use this for logging issues that may impact app performance in a less impactful way than an error.\",\"Default log level = 2\",\"Standard Log Method:console.warn()\",\"MDN Docs\"]},\"389\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public warn(...args: unknown[]): void; } \"]},\"390\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.warn(\\\"I'm warning you!\\\"); // With emoji's enabled adze.withEmoji.warn(\\\"I'm warning you!\\\"); \"]},\"391\":{\"h\":\"Browser Output\"},\"392\":{\"h\":\"Server Output\"},\"393\":{\"h\":\"info\",\"t\":[\"Use this for logging general insights into your application. This level does not indicate any problems.\",\"Default log level = 3\",\"Standard Log Method:console.info()\",\"MDN Docs\"]},\"394\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public info(...args: unknown[]): void; } \"]},\"395\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.info('App information'); // With emoji's enabled adze.withEmoji.info('App information'); \"]},\"396\":{\"h\":\"Browser Output\"},\"397\":{\"h\":\"Server Output\"},\"398\":{\"h\":\"fail\",\"t\":[\"Use this for logging network communication errors or other non-fatal errors that do not break your application.\",\"Default log level = 4\",\"Standard Log Method:console.info()\",\"This is not a standard API.\"]},\"399\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public fail(...args: unknown[]): void; } \"]},\"400\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.fail('An operation failed to execute!'); // With emoji's enabled adze.withEmoji.fail('An operation failed to execute!'); \"]},\"401\":{\"h\":\"Browser Output\"},\"402\":{\"h\":\"Server Output\"},\"403\":{\"h\":\"success\",\"t\":[\"Use this for logging successful network communications or other successful operations within your app.\",\"Default log level = 5\",\"Standard Log Method:console.info()\",\"This is not a standard API.\"]},\"404\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public success(...args: unknown[]): void; } \"]},\"405\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.success('An operation was successful!'); // With emoji's enabled adze.withEmoji.success('An operation was successful!'); \"]},\"406\":{\"h\":\"Browser Output\"},\"407\":{\"h\":\"Server Output\"},\"408\":{\"h\":\"log\",\"t\":[\"Use this for general logging that doesn't apply to any of the lower levels.\",\"Default log level = 6\",\"Standard Log Method:console.log()\",\"MDN Docs\"]},\"409\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public log(...args: unknown[]): void; } \"]},\"410\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.log('Logging a message.'); // With emoji's enabled adze.withEmoji.log('Logging a message.'); \"]},\"411\":{\"h\":\"Browser Output\"},\"412\":{\"h\":\"Server Output\"},\"413\":{\"h\":\"debug\",\"t\":[\"Use this for logging information that you typically do not want to see unless you are debugging a problem with your application. This is typically hidden by default.\",\"Default log level = 7\",\"Standard Log Method:console.debug()\",\"MDN Docs\"]},\"414\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public debug(...args: unknown[]): void; } \"]},\"415\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; // We need to raise the active log level to see debug logs. setup({ activeLevel: 'debug', }); adze.debug('Debugging an issue.'); // With emoji's enabled adze.withEmoji.debug('Debugging an issue.'); \"]},\"416\":{\"h\":\"Browser Output\"},\"417\":{\"h\":\"Server Output\"},\"418\":{\"h\":\"verbose\",\"t\":[\"Use this for logging extremely detailed debugging information. Use this level when the values you are logging are granular enough that they are no longer easily human readable.\",\"Default log level = 8\",\"Standard Log Method:console.debug()\",\"This is not a standard API.\"]},\"419\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public verbose(...args: unknown[]): void; } \"]},\"420\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; // We need to raise the active log level to see verbose logs. setup({ activeLevel: 'verbose', }); adze.verbose('Logging some extreme detail.'); // With emoji's enabled adze.withEmoji.verbose('Logging some extreme detail.'); \"]},\"421\":{\"h\":\"Browser Output\"},\"422\":{\"h\":\"Server Output\"},\"423\":{\"h\":\"Other Terminators\",\"t\":[\"Aside from the basic level terminator methods, Adze also exposes a few others for different utility purposes.\"]},\"424\":{\"h\":\"clear / clr\",\"t\":[\"This terminator simply exists as an alias for console.clear().\",\"MDN Docs\",\"Standard Log Method:console.clear()\"]},\"425\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public clear(): void; public clr(): void; } \"]},\"426\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; adze.log('This is a log to be cleared.'); adze.clear(); \"]},\"427\":{\"h\":\"custom\",\"t\":[\"Terminates the log at the provided custom log level. Custom log levels are defined within the Adze configuration object under the levels property. Adze can be configured by the setup function or by passing configuration to the seal or sealTag terminator.\",\"Configuration Details\",\"This is not a standard API.\"]},\"428\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public custom(levelName: string, ...args: unknown[]): void; } \"]},\"429\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; setup({ levels: { myLevel: { levelName: 'myLevel', level: 4, method: 'info', style: 'font-size: 12px; border-radius: 4px; padding-right: 10px; background: linear-gradient(to right, #ffcafc, #ff02f2); color: #fff; border-color: #e3bbbb;', terminalStyle: ['white', 'bgMagenta'], emoji: '👾', }, }, }); adze.custom('myLevel', 'This is my custom log level.'); adze.withEmoji.custom('myLevel', 'This is my custom log level with an emoji.'); \"]},\"430\":{\"h\":\"Browser Output\"},\"431\":{\"h\":\"Server Output\"},\"432\":{\"h\":\"seal\",\"t\":[\"The seal terminator is used for creating child loggers.\",\"It allows you to setup your child logger by writing a log chain as you normally would, except that instead of terminating it with a log level, you seal the configuration into a new log class.\",\"The new log class inherits all of the configuration of your log chain.\",\"This is not a standard API.\"]},\"433\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public seal(cfg?: UserConfiguration): SealedLog; } \"]},\"434\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; const logger = adze.withEmoji.ns('my-app').seal(); logger.log('This is a log from my sealed child logger.'); \"]},\"435\":{\"h\":\"Browser Output\"},\"436\":{\"h\":\"Server Output\"},\"437\":{\"h\":\"sealTag\",\"t\":[\"The sealTag terminator is used for creating child loggers for a specific log level that can be used as a convenient string template tag function.\",\"For instance, if you find yourself logging errors in catch functions repeatedly, you can create an Err template tag function for logging the errors.\",\"This is not a standard API.\"]},\"438\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public sealTag(method: string, cfg?: UserConfiguration): SealedLog; } \"]},\"439\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; const ERR = adze.withEmoji.sealTag('error'); const url = 'http://www.example.com/'; try { const res = fetch(url); } catch (e) { ERR`Failed to fetch from ${url}!`; } \"]},\"440\":{\"h\":\"Browser Output\"},\"441\":{\"h\":\"Server Output\"},\"442\":{\"h\":\"thread\",\"t\":[\"The thread terminator is used to create a Mapped Diagnostic Context where context values are recorded from multiple scopes but are output together in a single log. This is used in conjunction with the dump modifier for outputting the thread's values.\",\"Refer to threading in the Getting Started guide for more information.\",\"This is not a standard API.\"]},\"443\":{\"h\":\"Interface\",\"t\":[\"class BaseLog { public thread(key: string, value: unknown): void; } \"]},\"444\":{\"h\":\"Example\",\"t\":[\"import adze from 'adze'; function add(a: number, b: number) { const answer = a + b; adze.label('maths').thread('added', { a, b, answer }); return answer; } function subtract(x: number, y: number) { const answer = x - y; adze.label('maths').thread('subtracted', { x, y, answer }); return answer; } add(1, 2); subtract(4, 3); adze.label('maths').dump.info('Results from our thread'); \"]},\"445\":{\"h\":\"Browser Output\"},\"446\":{\"h\":\"Server Output\"},\"447\":{\"h\":\"Tools\",\"t\":[\"The tools are a collection of methods that allow you to recall cached logs from a console, such as the browser dev tools console. This can be useful if you want to clear the logs and then reprint specific logs to narrow them down.\",\"For a detailed tutorial on how to use them, refer to the Tools page of the Getting Started guide.\"]},\"448\":{\"h\":\"Public Methods\",\"t\":[\"These are used for retrieving data and accessing the browser console tools.\"]},\"449\":{\"h\":\"filterByLabel\",\"t\":[\"Rerenders all logs that match the provided label name.\"]},\"450\":{\"h\":\"Interface\",\"t\":[\"class Tools { public filterByLabel(label: string): void; } \"]},\"451\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true, }); adze.label('foo').log('This is a log that will rerender.'); adze.label('bar').log(\\\"This is another log that won't rerender.\\\"); // Get the log cache. store.tools.filterByLabel('foo'); \"]},\"452\":{\"h\":\"Browser Output\"},\"453\":{\"h\":\"Server Output\"},\"454\":{\"h\":\"filterByNamespace\",\"t\":[\"Rerenders all logs that match the provided namespaces.\"]},\"455\":{\"h\":\"Interface\",\"t\":[\"class Tools { public filterByNamespace(...namespace: string[]): void; } \"]},\"456\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true, }); adze.ns('foo', 'bar').log('This is a log that will rerender.'); adze.ns('bar').log(\\\"This is another log that won't rerender.\\\"); // Get the log cache. store.tools.filterByNamespace('foo'); \"]},\"457\":{\"h\":\"Browser Output\"},\"458\":{\"h\":\"Server Output\"},\"459\":{\"h\":\"filterByLevel\",\"t\":[\"Rerenders all logs that match the provided level selector.\"]},\"460\":{\"h\":\"Interface\",\"t\":[\"class Tools { public filterByLevel(level: LevelSelector): void; } \"]},\"461\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true, }); adze.info('This is a log that will rerender.'); adze.log(\\\"This is another log that won't rerender.\\\"); // Get the log cache. store.tools.filterByLevel('info'); \"]},\"462\":{\"h\":\"Browser Output\"},\"463\":{\"h\":\"Server Output\"},\"464\":{\"h\":\"renderAll\",\"t\":[\"Rerenders all cached logs.\"]},\"465\":{\"h\":\"Interface\",\"t\":[\"class Tools { public renderAll(): void; } \"]},\"466\":{\"h\":\"Example\",\"t\":[\"import adze, { setup } from 'adze'; const store = setup({ cache: true, }); adze.info('This is a log that will rerender.'); adze.log('This is another log that will rerender.'); // Get the log cache. store.tools.renderAll(); \"]},\"467\":{\"h\":\"Browser Output\"},\"468\":{\"h\":\"Server Output\"},\"469\":{\"h\":\"Unit Testing\",\"t\":[\"When executing your unit tests you generally do not want to see the internal logging of the code you are testing; rather you only care about the inputs and outputs. To disable logs while executing your unit tests, within your unit test environment you should set the global value $ADZE_ENV = 'test'. This tells adze logs to prevent rendering for the sake of unit tests.\"]},\"470\":{\"h\":\"Example\",\"t\":[\"// For all environments globalThis.$ADZE_ENV = 'test'; \"]},\"471\":{\"h\":\"URL Parameter Override\",\"t\":[\"There may be a time when you are debugging in the browser and would like to set the Adze ENV without changing any code. In this case you can use the reserved ADZE_ENV URL parameter to set it.\",\"http://my-site.com/?ADZE_ENV=test \"]},\"472\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"⬇️\",{\"1\":{\"326\":1}}],[\"🪵\",{\"1\":{\"116\":1,\"118\":1}}],[\"🎉\",{\"1\":{\"116\":1,\"118\":1}}],[\"❌\",{\"1\":{\"116\":1,\"118\":1}}],[\"ℹ️\",{\"1\":{\"116\":1,\"118\":1}}],[\"7\",{\"1\":{\"376\":1,\"413\":1}}],[\"789\",{\"1\":{\"332\":1}}],[\"715100\",{\"1\":{\"116\":1}}],[\"74830166\",{\"1\":{\"5\":1}}],[\"😭\",{\"1\":{\"120\":1}}],[\"💬\",{\"1\":{\"116\":1,\"118\":1}}],[\"🐞\",{\"1\":{\"116\":1,\"118\":1}}],[\"🔔\",{\"1\":{\"116\":1,\"118\":1}}],[\"🚨\",{\"1\":{\"116\":1,\"118\":1}}],[\"👾\",{\"1\":{\"108\":1,\"429\":1}}],[\"🔥\",{\"1\":{\"32\":1,\"111\":1,\"116\":1,\"118\":1}}],[\"©copyright\",{\"1\":{\"94\":1}}],[\"$adze\",{\"1\":{\"469\":1,\"470\":1}}],[\"$adzeglobal\",{\"0\":{\"75\":1},\"1\":{\"43\":2,\"62\":1,\"75\":1,\"77\":2,\"90\":1,\"184\":1}}],[\"$\",{\"1\":{\"116\":5,\"300\":2,\"305\":2,\"310\":2,\"439\":1}}],[\"$shed\",{\"1\":{\"75\":1,\"76\":2}}],[\"zero\",{\"1\":{\"58\":1}}],[\"52\",{\"1\":{\"116\":2}}],[\"500\",{\"1\":{\"90\":2}}],[\"5\",{\"1\":{\"49\":2,\"268\":1,\"376\":1,\"403\":1}}],[\"404\",{\"1\":{\"472\":1}}],[\"400\",{\"1\":{\"141\":1}}],[\"456\",{\"1\":{\"332\":2}}],[\"4e594d\",{\"1\":{\"116\":1}}],[\"49\",{\"1\":{\"116\":1}}],[\"44px\",{\"1\":{\"116\":1}}],[\"44\",{\"1\":{\"116\":2}}],[\"4\",{\"1\":{\"87\":1,\"263\":1,\"273\":1,\"277\":2,\"290\":1,\"376\":1,\"398\":1,\"429\":1,\"444\":1}}],[\"465464\",{\"1\":{\"116\":2}}],[\"46\",{\"1\":{\"49\":1}}],[\"4px\",{\"1\":{\"32\":1,\"108\":1,\"116\":7,\"429\":1}}],[\"yet\",{\"1\":{\"166\":1}}],[\"yes\",{\"1\":{\"90\":1}}],[\"y\",{\"1\":{\"87\":3,\"258\":6,\"263\":3,\"290\":3,\"315\":5,\"444\":3}}],[\"yarn\",{\"1\":{\"48\":2}}],[\"you\",{\"1\":{\"5\":2,\"9\":2,\"16\":1,\"17\":2,\"18\":1,\"20\":1,\"22\":1,\"23\":5,\"24\":1,\"26\":3,\"32\":2,\"34\":5,\"36\":1,\"43\":2,\"48\":1,\"50\":3,\"55\":3,\"58\":2,\"60\":1,\"61\":1,\"62\":2,\"81\":2,\"84\":2,\"86\":3,\"90\":3,\"92\":1,\"93\":3,\"96\":2,\"101\":2,\"104\":2,\"108\":1,\"111\":1,\"114\":1,\"115\":1,\"123\":1,\"128\":2,\"140\":1,\"141\":2,\"142\":4,\"153\":2,\"156\":3,\"160\":1,\"169\":1,\"171\":1,\"181\":1,\"184\":2,\"224\":1,\"226\":1,\"227\":1,\"228\":2,\"235\":1,\"236\":4,\"238\":2,\"239\":1,\"241\":6,\"255\":3,\"271\":2,\"275\":2,\"323\":2,\"326\":1,\"335\":1,\"376\":5,\"390\":2,\"413\":2,\"418\":1,\"432\":3,\"437\":2,\"447\":2,\"469\":4,\"471\":2}}],[\"yourself\",{\"1\":{\"61\":1,\"235\":1,\"437\":1}}],[\"your\",{\"1\":{\"4\":1,\"5\":1,\"17\":2,\"18\":1,\"22\":1,\"23\":1,\"24\":1,\"26\":5,\"34\":1,\"37\":1,\"42\":2,\"43\":4,\"50\":2,\"51\":1,\"57\":1,\"58\":2,\"62\":1,\"84\":2,\"97\":1,\"99\":1,\"142\":1,\"160\":1,\"180\":1,\"184\":1,\"236\":1,\"238\":4,\"239\":1,\"240\":2,\"241\":6,\"244\":1,\"290\":1,\"323\":1,\"335\":1,\"376\":4,\"383\":1,\"393\":1,\"398\":1,\"403\":1,\"413\":1,\"432\":2,\"469\":3}}],[\"~~~~~\",{\"1\":{\"37\":1,\"335\":1}}],[\"|\",{\"1\":{\"37\":1,\"79\":3,\"80\":9,\"102\":9,\"124\":1,\"134\":7,\"210\":1,\"335\":6}}],[\"||\",{\"1\":{\"10\":1}}],[\"200\",{\"1\":{\"151\":1}}],[\"2024\",{\"1\":{\"31\":1,\"94\":1}}],[\"26\",{\"1\":{\"116\":2}}],[\"2345\",{\"1\":{\"37\":1}}],[\"2\",{\"1\":{\"32\":1,\"44\":5,\"79\":1,\"87\":1,\"94\":1,\"198\":1,\"235\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"253\":1,\"254\":1,\"258\":3,\"263\":1,\"290\":1,\"315\":4,\"376\":1,\"388\":1,\"444\":1}}],[\"21t10\",{\"1\":{\"31\":1}}],[\"22\",{\"1\":{\"4\":1}}],[\">\",{\"1\":{\"26\":1,\"124\":1,\"324\":1}}],[\">=\",{\"1\":{\"4\":1,\"49\":4}}],[\"31px\",{\"1\":{\"116\":1}}],[\"333435\",{\"1\":{\"116\":1}}],[\"30px\",{\"1\":{\"116\":1}}],[\"300\",{\"1\":{\"90\":2,\"103\":1}}],[\"32\",{\"1\":{\"116\":2}}],[\"32px\",{\"1\":{\"32\":1}}],[\"3d1eoex\",{\"1\":{\"55\":1}}],[\"38\",{\"1\":{\"31\":1,\"116\":1}}],[\"3\",{\"1\":{\"26\":3,\"31\":1,\"79\":1,\"87\":1,\"135\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"253\":1,\"254\":1,\"258\":1,\"263\":1,\"290\":1,\"315\":3,\"376\":1,\"393\":1,\"444\":1}}],[\"60px\",{\"1\":{\"116\":1}}],[\"6\",{\"1\":{\"26\":1,\"223\":1,\"327\":1,\"376\":1,\"408\":1}}],[\"8601\",{\"1\":{\"128\":1,\"164\":1,\"361\":1}}],[\"8\",{\"1\":{\"26\":1,\"376\":1,\"418\":1}}],[\"999999\",{\"1\":{\"116\":2}}],[\"96b5d7\",{\"1\":{\"116\":1}}],[\"9\",{\"1\":{\"26\":1,\"376\":1}}],[\"`setup`\",{\"1\":{\"335\":1}}],[\"`serializeresponse`\",{\"1\":{\"142\":2}}],[\"`serializerequest`\",{\"1\":{\"142\":2}}],[\"`serializeerror`\",{\"1\":{\"142\":1}}],[\"`browser\",{\"1\":{\"300\":1,\"305\":1,\"310\":1}}],[\"`version\",{\"1\":{\"300\":1,\"305\":1,\"310\":1}}],[\"`log\",{\"1\":{\"290\":2}}],[\"`format`\",{\"1\":{\"170\":1}}],[\"`err`\",{\"1\":{\"142\":1}}],[\"`const\",{\"1\":{\"53\":1}}],[\"`\",{\"1\":{\"17\":2,\"53\":1,\"300\":2,\"305\":2,\"310\":2,\"439\":1}}],[\"1776\",{\"1\":{\"130\":1}}],[\"1px\",{\"1\":{\"116\":1}}],[\"1337\",{\"1\":{\"108\":2}}],[\"19\",{\"1\":{\"49\":1}}],[\"18\",{\"1\":{\"49\":1,\"88\":1}}],[\"15\",{\"1\":{\"31\":1}}],[\"1\",{\"1\":{\"31\":2,\"44\":4,\"49\":3,\"79\":1,\"87\":1,\"111\":1,\"135\":1,\"198\":1,\"214\":2,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"263\":1,\"268\":1,\"273\":1,\"277\":2,\"290\":1,\"348\":1,\"353\":1,\"358\":1,\"376\":1,\"383\":1,\"444\":1}}],[\"123\",{\"1\":{\"44\":1,\"231\":1,\"332\":2}}],[\"12px\",{\"1\":{\"32\":1,\"108\":1,\"116\":9,\"429\":1}}],[\"12h\",{\"1\":{\"16\":1}}],[\"12\",{\"1\":{\"16\":1}}],[\"10000\",{\"1\":{\"348\":1,\"353\":1,\"358\":1}}],[\"10px\",{\"1\":{\"108\":1,\"429\":1}}],[\"10\",{\"1\":{\"12\":3,\"13\":2}}],[\"07\",{\"1\":{\"130\":1}}],[\"00\",{\"1\":{\"31\":1}}],[\"04\",{\"1\":{\"31\":1,\"130\":1}}],[\"08\",{\"1\":{\"31\":1}}],[\"0\",{\"1\":{\"12\":1,\"13\":1,\"26\":1,\"79\":1,\"94\":1,\"135\":2,\"268\":1,\"271\":1,\"273\":1,\"275\":1,\"277\":2,\"300\":2,\"305\":2,\"310\":2,\"348\":1,\"353\":1,\"358\":1,\"376\":1,\"378\":1}}],[\"+=\",{\"1\":{\"268\":1,\"273\":1,\"277\":2,\"348\":1,\"353\":1,\"358\":1}}],[\"+\",{\"1\":{\"10\":1,\"87\":1,\"148\":1,\"263\":1,\"290\":1,\"444\":1}}],[\"<\",{\"1\":{\"10\":1,\"12\":1,\"13\":2,\"32\":1,\"37\":1,\"70\":1,\"71\":1,\"86\":2,\"111\":1,\"268\":1,\"273\":1,\"277\":2,\"310\":1,\"348\":1,\"353\":1,\"358\":1}}],[\"=>\",{\"1\":{\"12\":1,\"13\":1,\"17\":3,\"73\":1,\"74\":1,\"80\":1,\"82\":1,\"102\":1,\"105\":1,\"129\":1,\"130\":1,\"135\":6,\"162\":2,\"163\":1,\"173\":1,\"175\":1,\"179\":1,\"183\":1,\"192\":1,\"195\":1,\"198\":2,\"217\":1,\"220\":1,\"223\":1,\"290\":1,\"327\":1}}],[\"===\",{\"1\":{\"258\":3,\"315\":3}}],[\"==\",{\"1\":{\"10\":1}}],[\"=\",{\"1\":{\"9\":2,\"10\":2,\"12\":2,\"13\":2,\"16\":2,\"17\":6,\"26\":2,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":2,\"37\":2,\"44\":2,\"53\":2,\"61\":1,\"67\":1,\"68\":1,\"73\":1,\"74\":1,\"76\":1,\"80\":1,\"82\":6,\"84\":1,\"86\":5,\"87\":2,\"90\":1,\"102\":1,\"105\":1,\"120\":1,\"124\":1,\"129\":1,\"134\":1,\"135\":1,\"141\":1,\"145\":1,\"148\":1,\"151\":1,\"173\":2,\"175\":1,\"179\":1,\"182\":1,\"183\":1,\"186\":1,\"192\":2,\"195\":2,\"198\":3,\"201\":1,\"205\":1,\"208\":1,\"211\":2,\"214\":2,\"217\":1,\"220\":2,\"223\":2,\"231\":1,\"244\":2,\"245\":1,\"258\":2,\"263\":2,\"268\":1,\"273\":1,\"277\":2,\"287\":2,\"290\":3,\"300\":2,\"305\":2,\"310\":2,\"315\":2,\"325\":1,\"327\":1,\"335\":2,\"343\":1,\"348\":1,\"353\":1,\"358\":1,\"378\":1,\"383\":1,\"388\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"413\":1,\"418\":1,\"434\":1,\"439\":3,\"444\":2,\"451\":1,\"456\":1,\"461\":1,\"466\":1,\"469\":1,\"470\":1}}],[\"v2\",{\"0\":{\"65\":1,\"68\":1,\"71\":1,\"74\":1,\"77\":1,\"80\":1}}],[\"v1\",{\"0\":{\"62\":1,\"64\":1,\"67\":1,\"70\":1,\"73\":1,\"76\":1,\"79\":1},\"1\":{\"62\":1,\"300\":1,\"305\":1,\"310\":1}}],[\"v\",{\"1\":{\"31\":1}}],[\"very\",{\"1\":{\"58\":1,\"83\":1,\"91\":1,\"92\":1}}],[\"verbose\",{\"0\":{\"418\":1},\"1\":{\"26\":1,\"40\":1,\"80\":1,\"102\":1,\"116\":1,\"118\":1,\"119\":1,\"234\":1,\"376\":1,\"419\":1,\"420\":4}}],[\"versions\",{\"1\":{\"4\":1,\"49\":1}}],[\"version\",{\"0\":{\"49\":1},\"1\":{\"4\":1,\"235\":2,\"300\":2,\"305\":2,\"310\":2}}],[\"vital\",{\"1\":{\"225\":1}}],[\"visibility\",{\"1\":{\"26\":1,\"161\":1}}],[\"visit\",{\"1\":{\"16\":1,\"96\":1,\"97\":1,\"235\":1}}],[\"via\",{\"1\":{\"13\":1}}],[\"varies\",{\"1\":{\"366\":1}}],[\"variable\",{\"1\":{\"82\":1}}],[\"various\",{\"1\":{\"16\":1,\"19\":1,\"133\":1,\"156\":1,\"227\":2,\"240\":2,\"243\":1,\"246\":1}}],[\"val\",{\"1\":{\"324\":2}}],[\"validnamespaces\",{\"1\":{\"37\":3}}],[\"valid\",{\"1\":{\"37\":1}}],[\"validate\",{\"1\":{\"10\":1}}],[\"validates\",{\"1\":{\"10\":1}}],[\"val2\",{\"1\":{\"10\":3}}],[\"val1\",{\"1\":{\"10\":3}}],[\"values\",{\"1\":{\"10\":3,\"26\":1,\"34\":2,\"35\":1,\"38\":1,\"40\":1,\"88\":2,\"90\":1,\"107\":1,\"114\":1,\"124\":1,\"125\":1,\"135\":3,\"139\":1,\"140\":1,\"141\":1,\"143\":1,\"171\":1,\"174\":2,\"178\":6,\"232\":1,\"288\":1,\"326\":1,\"418\":1,\"442\":2}}],[\"value\",{\"1\":{\"9\":1,\"10\":5,\"31\":1,\"32\":1,\"40\":1,\"43\":1,\"88\":1,\"90\":2,\"103\":3,\"123\":2,\"133\":1,\"136\":1,\"137\":1,\"139\":1,\"151\":1,\"153\":1,\"155\":1,\"169\":1,\"170\":1,\"172\":1,\"174\":2,\"181\":1,\"184\":1,\"196\":1,\"231\":1,\"241\":1,\"244\":1,\"256\":1,\"313\":1,\"443\":1,\"469\":1}}],[\"void\",{\"1\":{\"12\":1,\"13\":1,\"185\":1,\"204\":1,\"207\":1,\"213\":1,\"219\":1,\"247\":1,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"379\":1,\"384\":1,\"389\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"425\":2,\"428\":1,\"443\":1,\"450\":1,\"455\":1,\"460\":1,\"465\":1}}],[\"jim\",{\"1\":{\"343\":1}}],[\"joe\",{\"1\":{\"157\":1}}],[\"job\",{\"1\":{\"91\":1}}],[\"java\",{\"1\":{\"87\":1}}],[\"javascript\",{\"1\":{\"58\":2,\"99\":1,\"144\":1,\"147\":1,\"150\":1}}],[\"just\",{\"1\":{\"9\":2,\"18\":1,\"38\":1,\"43\":1,\"55\":1,\"58\":1,\"62\":1,\"63\":1,\"83\":1,\"90\":1,\"92\":1,\"151\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"330\":1}}],[\"jsonloghttpresponse\",{\"1\":{\"142\":2}}],[\"jsonloghttprequest\",{\"1\":{\"142\":2}}],[\"jsonlogerror\",{\"1\":{\"142\":2}}],[\"jsonlogoptionalfields\",{\"1\":{\"141\":2,\"145\":1,\"148\":1,\"151\":1}}],[\"jsonlogformatmeta\",{\"0\":{\"140\":1,\"143\":1},\"1\":{\"28\":1,\"29\":1,\"30\":1,\"141\":2,\"142\":1,\"144\":1,\"147\":1,\"150\":1,\"326\":1}}],[\"json\",{\"0\":{\"27\":1,\"139\":1},\"1\":{\"9\":2,\"10\":1,\"27\":6,\"28\":2,\"29\":2,\"30\":2,\"31\":1,\"44\":2,\"46\":1,\"50\":1,\"58\":1,\"82\":2,\"91\":6,\"93\":2,\"103\":2,\"136\":3,\"139\":4,\"140\":2,\"141\":3,\"142\":3,\"143\":1,\"148\":1,\"183\":1,\"195\":2,\"295\":1,\"326\":3}}],[\"js\",{\"1\":{\"2\":2,\"55\":1,\"58\":1,\"142\":1}}],[\"knock\",{\"1\":{\"338\":2}}],[\"knowing\",{\"1\":{\"236\":1}}],[\"known\",{\"1\":{\"27\":1}}],[\"know\",{\"1\":{\"8\":2,\"9\":1,\"36\":1,\"37\":1,\"236\":1}}],[\"kv\",{\"1\":{\"324\":1}}],[\"key\",{\"1\":{\"79\":1,\"88\":1,\"103\":2,\"111\":1,\"114\":1,\"169\":1,\"170\":1,\"171\":1,\"232\":1,\"324\":2,\"443\":1}}],[\"keeps\",{\"1\":{\"236\":1}}],[\"keeping\",{\"1\":{\"86\":1}}],[\"keep\",{\"1\":{\"4\":1,\"37\":1,\"236\":1,\"255\":1}}],[\"routing\",{\"1\":{\"161\":1}}],[\"rotate\",{\"1\":{\"16\":1}}],[\"rotates\",{\"1\":{\"16\":1}}],[\"rotator\",{\"1\":{\"7\":1}}],[\"rotating\",{\"1\":{\"7\":1,\"82\":1,\"86\":2}}],[\"right\",{\"1\":{\"32\":2,\"55\":1,\"59\":1,\"108\":2,\"115\":2,\"116\":17,\"429\":2}}],[\"rich\",{\"1\":{\"18\":1}}],[\"ran\",{\"1\":{\"184\":1}}],[\"range\",{\"1\":{\"135\":2}}],[\"ranging\",{\"1\":{\"26\":1}}],[\"raw\",{\"1\":{\"165\":1,\"167\":1}}],[\"rather\",{\"1\":{\"88\":1,\"271\":2,\"275\":1,\"356\":1,\"469\":1}}],[\"radius\",{\"1\":{\"32\":1,\"108\":1,\"116\":7,\"429\":1}}],[\"raise\",{\"1\":{\"26\":1,\"90\":2,\"415\":1,\"420\":1}}],[\"running\",{\"1\":{\"28\":2,\"37\":1,\"43\":2,\"49\":3,\"184\":1}}],[\"runtime\",{\"1\":{\"16\":1,\"43\":2,\"44\":1,\"58\":1,\"81\":1}}],[\"run\",{\"1\":{\"9\":1,\"26\":1,\"27\":1,\"28\":1,\"58\":2}}],[\"retrieve\",{\"1\":{\"323\":1}}],[\"retrieves\",{\"1\":{\"190\":1,\"193\":1}}],[\"retrieving\",{\"1\":{\"189\":1,\"448\":1}}],[\"returning\",{\"1\":{\"103\":1}}],[\"returned\",{\"1\":{\"22\":1,\"218\":1,\"226\":1,\"250\":1}}],[\"returns\",{\"1\":{\"9\":1,\"17\":2,\"62\":1,\"66\":1,\"84\":1,\"104\":1,\"144\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"164\":1,\"171\":3,\"178\":1,\"181\":1,\"196\":1,\"199\":1,\"215\":1,\"221\":1,\"232\":3}}],[\"return\",{\"1\":{\"9\":4,\"10\":4,\"20\":1,\"87\":2,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"227\":1,\"250\":2,\"255\":1,\"263\":2,\"290\":2,\"444\":2}}],[\"review\",{\"1\":{\"180\":1}}],[\"revisit\",{\"1\":{\"12\":1}}],[\"req\",{\"1\":{\"142\":2,\"143\":1,\"148\":1}}],[\"request\",{\"1\":{\"142\":7,\"147\":1,\"148\":5}}],[\"requirement\",{\"1\":{\"153\":1,\"156\":1}}],[\"requirements\",{\"0\":{\"49\":1},\"1\":{\"160\":1}}],[\"required\",{\"0\":{\"69\":1},\"1\":{\"28\":1,\"32\":1,\"62\":1,\"69\":1,\"95\":1,\"133\":1,\"141\":1,\"243\":1,\"326\":1}}],[\"requires\",{\"1\":{\"5\":1,\"28\":1,\"58\":1,\"156\":1,\"241\":1}}],[\"require\",{\"0\":{\"4\":1},\"1\":{\"2\":2,\"4\":5,\"26\":1,\"28\":1,\"53\":2,\"140\":1,\"153\":1,\"156\":1,\"318\":2,\"378\":1}}],[\"reinvent\",{\"1\":{\"91\":1}}],[\"rerenders\",{\"1\":{\"449\":1,\"454\":1,\"459\":1,\"464\":1}}],[\"rerendered\",{\"1\":{\"90\":1}}],[\"rerender\",{\"1\":{\"90\":1,\"451\":2,\"456\":2,\"461\":2,\"466\":2}}],[\"reddit\",{\"1\":{\"87\":1}}],[\"recorded\",{\"1\":{\"442\":1}}],[\"recording\",{\"1\":{\"358\":2}}],[\"record\",{\"1\":{\"103\":1}}],[\"record<string\",{\"1\":{\"80\":3,\"102\":3,\"142\":2,\"182\":2}}],[\"recallable\",{\"1\":{\"271\":1,\"275\":1}}],[\"recall\",{\"1\":{\"103\":1,\"227\":1,\"447\":1}}],[\"recalling\",{\"1\":{\"42\":1,\"58\":1,\"199\":1}}],[\"received\",{\"1\":{\"151\":1}}],[\"receive\",{\"1\":{\"62\":1,\"72\":1}}],[\"reusable\",{\"1\":{\"61\":1}}],[\"re\",{\"1\":{\"43\":1,\"84\":1,\"244\":1}}],[\"renderall\",{\"0\":{\"464\":1},\"1\":{\"465\":1,\"466\":1}}],[\"renders\",{\"1\":{\"174\":1}}],[\"rendering\",{\"1\":{\"46\":1,\"58\":1,\"469\":1}}],[\"render\",{\"1\":{\"26\":1,\"43\":1,\"73\":1,\"123\":2,\"361\":1,\"366\":2}}],[\"rendered\",{\"1\":{\"26\":1,\"31\":1,\"34\":1,\"103\":1}}],[\"removing\",{\"1\":{\"104\":1,\"236\":1}}],[\"removes\",{\"1\":{\"218\":1}}],[\"removed\",{\"1\":{\"62\":2}}],[\"removelistener\",{\"0\":{\"218\":1},\"1\":{\"17\":1,\"215\":1,\"219\":1,\"220\":1}}],[\"remove\",{\"1\":{\"17\":1,\"31\":1,\"184\":2,\"215\":1,\"236\":1}}],[\"remoteport\",{\"1\":{\"142\":1}}],[\"remoteaddress\",{\"1\":{\"142\":1}}],[\"remotelogger\",{\"1\":{\"86\":4}}],[\"remotetransport\",{\"1\":{\"86\":6}}],[\"remote\",{\"1\":{\"9\":1,\"86\":2}}],[\"regard\",{\"1\":{\"236\":1}}],[\"regardless\",{\"1\":{\"96\":1}}],[\"regards\",{\"1\":{\"0\":1,\"161\":1}}],[\"regular\",{\"1\":{\"55\":1,\"86\":1}}],[\"registered\",{\"1\":{\"17\":1,\"37\":1,\"227\":1}}],[\"refer\",{\"1\":{\"17\":1,\"42\":1,\"91\":1,\"107\":1,\"115\":1,\"117\":1,\"178\":1,\"180\":1,\"181\":1,\"280\":1,\"285\":1,\"288\":1,\"442\":1,\"447\":1}}],[\"reference\",{\"1\":{\"16\":1,\"17\":3,\"23\":1,\"24\":1,\"81\":1,\"82\":1,\"97\":1,\"104\":1,\"181\":2,\"199\":1,\"224\":1,\"225\":1,\"335\":1}}],[\"reprint\",{\"1\":{\"201\":1,\"447\":1}}],[\"reprints\",{\"1\":{\"90\":3}}],[\"represents\",{\"1\":{\"17\":1}}],[\"replaced\",{\"0\":{\"72\":1},\"1\":{\"62\":1,\"72\":1}}],[\"replace\",{\"1\":{\"62\":1}}],[\"replicates\",{\"1\":{\"18\":1}}],[\"reporting\",{\"1\":{\"55\":1}}],[\"repeatedly\",{\"1\":{\"437\":1}}],[\"repeat\",{\"1\":{\"10\":1,\"90\":1}}],[\"react\",{\"1\":{\"236\":1}}],[\"reacting\",{\"1\":{\"17\":1}}],[\"reason\",{\"1\":{\"205\":1}}],[\"really\",{\"1\":{\"142\":2}}],[\"readfile\",{\"1\":{\"244\":1}}],[\"readability\",{\"1\":{\"81\":1}}],[\"readable\",{\"1\":{\"26\":2,\"27\":3,\"31\":1,\"58\":3,\"91\":3,\"93\":2,\"136\":3,\"137\":1,\"139\":2,\"153\":2,\"155\":1,\"330\":1,\"418\":1}}],[\"ready\",{\"1\":{\"58\":1}}],[\"read\",{\"1\":{\"23\":1,\"24\":1,\"81\":1,\"82\":1,\"224\":1}}],[\"reading\",{\"1\":{\"8\":1}}],[\"rely\",{\"1\":{\"255\":1}}],[\"related\",{\"1\":{\"142\":1}}],[\"relative\",{\"1\":{\"16\":1}}],[\"relevant\",{\"1\":{\"16\":1,\"34\":1,\"96\":1,\"164\":1}}],[\"reserved\",{\"1\":{\"471\":1}}],[\"reserving\",{\"1\":{\"55\":1}}],[\"resetting\",{\"1\":{\"277\":1}}],[\"reset\",{\"1\":{\"275\":1}}],[\"resets\",{\"1\":{\"275\":1}}],[\"restof\",{\"1\":{\"332\":1}}],[\"rest\",{\"1\":{\"225\":1}}],[\"restrict\",{\"1\":{\"44\":1}}],[\"restricting\",{\"0\":{\"37\":1},\"1\":{\"37\":1}}],[\"res\",{\"1\":{\"142\":1,\"143\":1,\"151\":1,\"439\":1}}],[\"results\",{\"1\":{\"87\":1,\"263\":1,\"290\":1,\"444\":1}}],[\"resources\",{\"1\":{\"235\":1}}],[\"resource\",{\"1\":{\"9\":1}}],[\"resolve\",{\"1\":{\"3\":1,\"62\":1}}],[\"response\",{\"1\":{\"9\":5,\"10\":2,\"142\":2,\"150\":1,\"151\":7}}],[\"ultimately\",{\"1\":{\"174\":1}}],[\"uh\",{\"1\":{\"145\":1}}],[\"url\",{\"0\":{\"471\":1},\"1\":{\"9\":9,\"10\":4,\"142\":1,\"151\":1,\"439\":3,\"471\":1}}],[\"upgrade\",{\"1\":{\"235\":1}}],[\"updating\",{\"1\":{\"214\":1}}],[\"upon\",{\"1\":{\"15\":1,\"288\":1,\"346\":1,\"351\":1,\"356\":1}}],[\"up\",{\"0\":{\"83\":1},\"1\":{\"9\":1,\"17\":1,\"20\":1,\"34\":1,\"46\":1,\"55\":1,\"81\":1,\"90\":1,\"93\":1,\"98\":1,\"104\":1,\"202\":1}}],[\"utilities\",{\"1\":{\"8\":1,\"9\":4,\"10\":7,\"12\":2,\"13\":2}}],[\"utility\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"62\":1,\"423\":1}}],[\"uncollapse\",{\"1\":{\"303\":1}}],[\"uncollapsed\",{\"1\":{\"298\":1}}],[\"unchanged\",{\"1\":{\"250\":1}}],[\"undefined\",{\"1\":{\"103\":2,\"210\":1}}],[\"understanding\",{\"1\":{\"225\":3}}],[\"understand\",{\"1\":{\"100\":1,\"335\":1}}],[\"under\",{\"1\":{\"6\":1,\"16\":1,\"19\":1,\"330\":1,\"427\":1}}],[\"unstyled\",{\"1\":{\"79\":1,\"366\":1}}],[\"union\",{\"1\":{\"335\":1}}],[\"unit\",{\"0\":{\"469\":1},\"1\":{\"184\":1,\"469\":4}}],[\"unintuitive\",{\"1\":{\"98\":1}}],[\"unique\",{\"1\":{\"58\":1}}],[\"universalism\",{\"1\":{\"58\":1}}],[\"universal\",{\"1\":{\"58\":3,\"99\":1}}],[\"until\",{\"1\":{\"37\":1,\"298\":1,\"303\":1}}],[\"unless\",{\"1\":{\"26\":1,\"413\":1}}],[\"unknown>\",{\"1\":{\"142\":1}}],[\"unknown\",{\"1\":{\"10\":4,\"79\":1,\"162\":4,\"166\":2,\"168\":2,\"172\":2,\"174\":2,\"250\":3,\"251\":1,\"253\":1,\"254\":1,\"379\":1,\"384\":1,\"389\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"428\":1,\"443\":1}}],[\"unable\",{\"1\":{\"5\":1}}],[\"ugly\",{\"1\":{\"5\":1}}],[\"usage\",{\"0\":{\"141\":1,\"157\":1},\"1\":{\"91\":1}}],[\"usually\",{\"1\":{\"55\":1,\"171\":1,\"280\":1,\"285\":1}}],[\"us\",{\"1\":{\"10\":2,\"26\":1,\"37\":1}}],[\"username\",{\"1\":{\"142\":1,\"148\":1}}],[\"user\",{\"0\":{\"101\":1},\"1\":{\"103\":1,\"133\":1,\"136\":1,\"137\":1,\"139\":1,\"153\":1,\"155\":1,\"157\":2,\"158\":1,\"165\":1,\"167\":1,\"169\":1,\"172\":1,\"178\":2,\"224\":1,\"230\":1}}],[\"userconfiguration<meta>\",{\"1\":{\"182\":1}}],[\"userconfiguration\",{\"0\":{\"102\":1,\"103\":1},\"1\":{\"80\":1,\"102\":1,\"104\":1,\"106\":1,\"108\":1,\"164\":1,\"181\":1,\"194\":1,\"433\":1,\"438\":1}}],[\"users\",{\"1\":{\"2\":2,\"335\":1}}],[\"useemoji\",{\"1\":{\"79\":1}}],[\"useful\",{\"1\":{\"32\":1,\"36\":1,\"91\":1,\"153\":1,\"227\":1,\"285\":1,\"318\":1,\"330\":2,\"346\":1,\"351\":1,\"356\":1,\"447\":1}}],[\"used\",{\"1\":{\"16\":1,\"26\":2,\"28\":1,\"34\":2,\"50\":1,\"55\":1,\"57\":1,\"83\":2,\"84\":1,\"86\":1,\"87\":1,\"91\":1,\"103\":1,\"106\":1,\"114\":1,\"133\":1,\"137\":1,\"139\":1,\"155\":1,\"172\":2,\"174\":2,\"184\":1,\"189\":1,\"196\":1,\"202\":1,\"215\":1,\"232\":1,\"233\":1,\"240\":1,\"244\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":2,\"251\":2,\"252\":1,\"253\":1,\"254\":1,\"261\":1,\"293\":2,\"330\":1,\"335\":1,\"376\":2,\"378\":2,\"432\":1,\"437\":2,\"442\":2,\"448\":1}}],[\"uses\",{\"1\":{\"9\":1,\"16\":1,\"37\":1,\"181\":1}}],[\"use\",{\"0\":{\"4\":1,\"5\":1,\"58\":1},\"1\":{\"4\":1,\"5\":1,\"9\":3,\"16\":1,\"17\":2,\"23\":1,\"26\":10,\"32\":1,\"37\":2,\"46\":1,\"50\":1,\"55\":1,\"60\":1,\"81\":1,\"82\":3,\"84\":1,\"86\":2,\"90\":1,\"91\":1,\"93\":2,\"97\":1,\"99\":1,\"101\":1,\"104\":1,\"108\":1,\"111\":2,\"115\":2,\"116\":1,\"117\":2,\"128\":1,\"137\":1,\"139\":1,\"141\":1,\"142\":1,\"153\":1,\"155\":1,\"169\":1,\"170\":2,\"181\":1,\"201\":1,\"240\":1,\"245\":1,\"280\":2,\"285\":2,\"327\":1,\"341\":1,\"383\":1,\"388\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"413\":1,\"418\":2,\"447\":1,\"471\":1}}],[\"using\",{\"0\":{\"9\":1,\"12\":1,\"44\":1,\"169\":1,\"245\":1,\"246\":1},\"1\":{\"0\":1,\"12\":1,\"17\":1,\"26\":1,\"32\":1,\"40\":1,\"44\":1,\"48\":1,\"49\":1,\"50\":1,\"55\":2,\"62\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"91\":1,\"93\":1,\"104\":1,\"171\":1,\"181\":2,\"215\":1,\"227\":1,\"232\":1,\"366\":2}}],[\"quite\",{\"1\":{\"5\":1}}],[\"questions\",{\"0\":{\"0\":1},\"1\":{\"0\":1,\"5\":1}}],[\"btoa\",{\"1\":{\"148\":1}}],[\"bfc1c5\",{\"1\":{\"116\":1}}],[\"b7d1b3\",{\"1\":{\"116\":1}}],[\"b70101\",{\"1\":{\"116\":1}}],[\"b2d7ff\",{\"1\":{\"116\":1}}],[\"bgblack\",{\"1\":{\"118\":1}}],[\"bgblue\",{\"1\":{\"118\":1}}],[\"bggray\",{\"1\":{\"118\":1}}],[\"bggreen\",{\"1\":{\"118\":1}}],[\"bgyellow\",{\"1\":{\"118\":1}}],[\"bgwhite\",{\"1\":{\"111\":1}}],[\"bgmagenta\",{\"1\":{\"108\":1,\"429\":1}}],[\"bgred\",{\"1\":{\"32\":1,\"118\":3}}],[\"b\",{\"1\":{\"55\":2,\"87\":3,\"263\":3,\"290\":3,\"444\":3}}],[\"black\",{\"1\":{\"118\":1}}],[\"blackboxing\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"blah\",{\"1\":{\"70\":2,\"71\":2}}],[\"bloat\",{\"1\":{\"18\":1}}],[\"basic\",{\"0\":{\"325\":1},\"1\":{\"82\":1,\"90\":1,\"148\":1,\"161\":1,\"377\":1,\"423\":1}}],[\"baselog\",{\"1\":{\"379\":1,\"384\":1,\"389\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"425\":1,\"428\":1,\"433\":1,\"438\":1,\"443\":1}}],[\"basestyle\",{\"1\":{\"79\":1}}],[\"base\",{\"1\":{\"16\":1,\"111\":1,\"161\":1,\"240\":1}}],[\"based\",{\"1\":{\"7\":1,\"16\":1,\"34\":1,\"55\":2,\"90\":1,\"116\":1,\"123\":1,\"139\":1,\"164\":1}}],[\"baz\",{\"1\":{\"35\":2,\"37\":5,\"38\":1,\"332\":1,\"335\":2}}],[\"bar\",{\"1\":{\"35\":2,\"37\":2,\"38\":1,\"44\":2,\"90\":1,\"125\":2,\"148\":1,\"282\":1,\"320\":1,\"332\":1,\"335\":3,\"451\":1,\"456\":2}}],[\"background\",{\"1\":{\"32\":1,\"108\":1,\"111\":1,\"116\":7,\"429\":1}}],[\"back\",{\"1\":{\"31\":1,\"99\":1}}],[\"backend\",{\"1\":{\"27\":1,\"167\":1,\"241\":2}}],[\"building\",{\"1\":{\"50\":1}}],[\"built\",{\"1\":{\"27\":1,\"50\":1,\"98\":1,\"103\":1,\"161\":1}}],[\"bundling\",{\"1\":{\"62\":1}}],[\"bundled\",{\"1\":{\"52\":1}}],[\"bunyan\",{\"1\":{\"58\":2,\"91\":6,\"93\":1,\"136\":1,\"139\":1,\"140\":1,\"142\":1}}],[\"bun\",{\"1\":{\"43\":1,\"49\":2,\"58\":2}}],[\"but\",{\"1\":{\"5\":1,\"10\":1,\"17\":1,\"18\":1,\"26\":1,\"27\":1,\"58\":1,\"61\":1,\"86\":2,\"87\":1,\"88\":1,\"103\":1,\"115\":1,\"128\":1,\"166\":1,\"273\":1,\"330\":1,\"336\":1,\"442\":1}}],[\"brief\",{\"1\":{\"235\":1}}],[\"brave\",{\"1\":{\"55\":1}}],[\"breeze\",{\"1\":{\"92\":1}}],[\"break\",{\"1\":{\"26\":1,\"398\":1}}],[\"brevity\",{\"1\":{\"12\":1,\"13\":1}}],[\"browsers\",{\"1\":{\"55\":2,\"115\":1}}],[\"browser\",{\"0\":{\"45\":1,\"90\":1,\"109\":1,\"112\":1,\"115\":1,\"121\":1,\"126\":1,\"131\":1,\"138\":1,\"176\":1,\"187\":1,\"259\":1,\"264\":1,\"269\":1,\"278\":1,\"283\":1,\"291\":1,\"296\":1,\"301\":1,\"306\":1,\"311\":1,\"316\":1,\"321\":1,\"328\":1,\"333\":1,\"339\":1,\"344\":1,\"349\":1,\"354\":1,\"359\":1,\"364\":1,\"369\":1,\"374\":1,\"381\":1,\"386\":1,\"391\":1,\"396\":1,\"401\":1,\"406\":1,\"411\":1,\"416\":1,\"421\":1,\"430\":1,\"435\":1,\"440\":1,\"445\":1,\"452\":1,\"457\":1,\"462\":1,\"467\":1},\"1\":{\"16\":2,\"18\":1,\"43\":3,\"50\":1,\"55\":3,\"58\":2,\"59\":1,\"90\":4,\"99\":1,\"115\":2,\"116\":1,\"165\":2,\"189\":1,\"199\":1,\"236\":1,\"241\":4,\"243\":1,\"244\":1,\"252\":1,\"280\":1,\"285\":1,\"300\":2,\"305\":2,\"310\":2,\"366\":1,\"447\":1,\"448\":1,\"471\":1}}],[\"bob\",{\"1\":{\"343\":1}}],[\"boop\",{\"1\":{\"151\":1}}],[\"boolean\",{\"1\":{\"79\":4,\"80\":5,\"102\":5,\"256\":2,\"257\":1,\"313\":2,\"314\":1}}],[\"bold\",{\"1\":{\"118\":1}}],[\"bolted\",{\"1\":{\"58\":1,\"98\":1}}],[\"board\",{\"1\":{\"87\":1}}],[\"border\",{\"1\":{\"32\":2,\"108\":2,\"116\":16,\"429\":2}}],[\"box\",{\"1\":{\"16\":1,\"58\":1,\"93\":1,\"136\":1,\"371\":1}}],[\"both\",{\"1\":{\"10\":1,\"16\":1,\"18\":2,\"50\":1,\"58\":3,\"59\":1,\"93\":1,\"123\":1,\"135\":1,\"241\":3,\"243\":1}}],[\"body\",{\"1\":{\"9\":2,\"10\":1,\"142\":1,\"148\":1}}],[\"by\",{\"0\":{\"29\":1,\"30\":1,\"40\":1},\"1\":{\"6\":2,\"10\":1,\"16\":2,\"17\":2,\"20\":1,\"22\":1,\"26\":6,\"28\":1,\"31\":1,\"33\":1,\"36\":2,\"37\":1,\"38\":1,\"40\":1,\"43\":2,\"44\":1,\"46\":1,\"58\":1,\"61\":1,\"83\":1,\"86\":3,\"90\":2,\"100\":1,\"103\":1,\"104\":1,\"106\":1,\"111\":1,\"114\":1,\"128\":1,\"135\":5,\"137\":1,\"142\":1,\"160\":2,\"164\":1,\"165\":1,\"167\":1,\"196\":1,\"209\":1,\"212\":1,\"214\":1,\"215\":1,\"218\":1,\"221\":1,\"224\":1,\"228\":1,\"238\":1,\"241\":1,\"261\":1,\"280\":1,\"285\":1,\"323\":1,\"326\":1,\"330\":1,\"332\":1,\"341\":1,\"346\":1,\"351\":1,\"366\":1,\"376\":2,\"377\":1,\"413\":1,\"427\":2,\"432\":1}}],[\"beneath\",{\"1\":{\"298\":1,\"303\":1}}],[\"beneficial\",{\"1\":{\"184\":1,\"225\":1,\"335\":1}}],[\"becomes\",{\"1\":{\"271\":1}}],[\"because\",{\"1\":{\"13\":1,\"16\":1,\"31\":1,\"35\":5,\"37\":1,\"38\":5,\"40\":5,\"46\":2,\"50\":1,\"55\":1,\"58\":2,\"91\":2,\"96\":1,\"98\":1,\"125\":1,\"166\":1,\"236\":1,\"240\":1,\"243\":1,\"244\":1,\"258\":1,\"271\":1,\"275\":1,\"315\":1,\"335\":2,\"336\":1}}],[\"between\",{\"1\":{\"184\":1,\"280\":1,\"285\":1}}],[\"beep\",{\"1\":{\"151\":1}}],[\"been\",{\"1\":{\"17\":1,\"58\":1,\"62\":4,\"72\":1,\"89\":1,\"90\":3,\"172\":1,\"226\":1,\"227\":3}}],[\"below\",{\"1\":{\"114\":1,\"172\":1,\"246\":1}}],[\"behind\",{\"1\":{\"43\":1}}],[\"behaviors\",{\"1\":{\"236\":1}}],[\"behavior\",{\"1\":{\"23\":1,\"233\":1,\"236\":1,\"238\":1,\"280\":1,\"285\":1,\"313\":1}}],[\"beforeterminated\",{\"0\":{\"253\":1},\"1\":{\"253\":1}}],[\"beforeprint\",{\"0\":{\"252\":1},\"1\":{\"252\":1}}],[\"beforeformatapplied\",{\"0\":{\"250\":1},\"1\":{\"250\":1}}],[\"beforemodifierapplied\",{\"0\":{\"248\":1},\"1\":{\"248\":1}}],[\"before\",{\"1\":{\"31\":1,\"225\":1,\"236\":1,\"245\":1,\"248\":1,\"250\":1,\"252\":1,\"253\":1}}],[\"best\",{\"0\":{\"239\":1},\"1\":{\"27\":1}}],[\"being\",{\"1\":{\"26\":2,\"163\":2,\"253\":1,\"254\":1,\"335\":1}}],[\"begin\",{\"1\":{\"20\":1,\"228\":1}}],[\"be\",{\"1\":{\"5\":1,\"6\":1,\"12\":1,\"13\":2,\"16\":3,\"17\":1,\"22\":2,\"26\":4,\"28\":1,\"32\":1,\"33\":1,\"34\":4,\"37\":2,\"43\":4,\"50\":1,\"55\":2,\"61\":1,\"62\":2,\"81\":1,\"83\":2,\"87\":1,\"90\":1,\"91\":1,\"99\":1,\"103\":5,\"104\":1,\"114\":1,\"119\":1,\"137\":1,\"139\":2,\"140\":1,\"141\":1,\"142\":5,\"148\":1,\"151\":1,\"153\":1,\"155\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"172\":2,\"174\":5,\"184\":1,\"215\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":2,\"231\":1,\"235\":2,\"236\":1,\"238\":1,\"240\":4,\"244\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":4,\"251\":2,\"252\":1,\"253\":1,\"254\":2,\"258\":1,\"280\":1,\"285\":1,\"293\":2,\"298\":1,\"303\":2,\"308\":1,\"318\":2,\"320\":1,\"335\":1,\"336\":1,\"346\":1,\"351\":1,\"371\":1,\"376\":1,\"378\":2,\"426\":1,\"427\":1,\"437\":1,\"447\":1,\"471\":1}}],[\"bit\",{\"1\":{\"5\":1,\"55\":1}}],[\"httpmethod\",{\"1\":{\"142\":1}}],[\"http\",{\"1\":{\"142\":4,\"439\":1,\"471\":1}}],[\"httpstatus\",{\"1\":{\"142\":1}}],[\"https\",{\"1\":{\"5\":1,\"7\":2,\"50\":1,\"55\":1,\"148\":1,\"151\":1}}],[\"html\",{\"1\":{\"50\":1}}],[\"hub\",{\"1\":{\"42\":1,\"180\":1}}],[\"human\",{\"1\":{\"26\":1,\"27\":2,\"58\":2,\"91\":1,\"93\":1,\"136\":2,\"137\":1,\"139\":1,\"153\":2,\"155\":1,\"330\":1,\"418\":1}}],[\"hierarchy\",{\"1\":{\"164\":1}}],[\"hi\",{\"1\":{\"148\":1,\"287\":1}}],[\"highly\",{\"1\":{\"50\":1,\"92\":1}}],[\"highest\",{\"1\":{\"26\":1,\"164\":1}}],[\"hidden\",{\"1\":{\"12\":1,\"13\":1,\"26\":2,\"413\":1}}],[\"header\",{\"1\":{\"142\":1}}],[\"headers\",{\"1\":{\"142\":1,\"148\":1,\"151\":1}}],[\"hellomw\",{\"1\":{\"245\":3}}],[\"hellomiddleware\",{\"1\":{\"242\":1,\"244\":1,\"245\":2}}],[\"helloformatter\",{\"1\":{\"166\":1,\"168\":1,\"170\":4}}],[\"hello\",{\"1\":{\"53\":1,\"54\":1,\"84\":1,\"151\":1,\"166\":2,\"168\":2,\"170\":4,\"175\":1,\"179\":1,\"245\":1,\"325\":2,\"327\":1,\"335\":2}}],[\"helpless\",{\"1\":{\"236\":1}}],[\"helping\",{\"1\":{\"89\":1}}],[\"helpful\",{\"1\":{\"37\":1}}],[\"help\",{\"1\":{\"8\":1,\"10\":1,\"34\":1,\"236\":1}}],[\"helpers\",{\"0\":{\"5\":1}}],[\"here\",{\"0\":{\"59\":1},\"1\":{\"13\":1,\"17\":1,\"32\":2,\"43\":1,\"44\":1,\"52\":1,\"60\":1,\"62\":1,\"73\":1,\"74\":1,\"81\":1,\"82\":1,\"84\":2,\"87\":1,\"91\":1,\"105\":1,\"166\":1,\"168\":1,\"175\":1,\"179\":1,\"244\":2,\"326\":1}}],[\"having\",{\"1\":{\"288\":1,\"346\":1,\"351\":1}}],[\"have\",{\"1\":{\"5\":1,\"9\":1,\"10\":3,\"15\":1,\"17\":2,\"23\":1,\"25\":1,\"27\":1,\"32\":1,\"34\":1,\"35\":1,\"38\":1,\"43\":3,\"58\":1,\"62\":2,\"81\":1,\"82\":1,\"84\":3,\"88\":1,\"89\":1,\"90\":1,\"96\":2,\"98\":1,\"111\":1,\"125\":1,\"142\":1,\"166\":1,\"184\":3,\"225\":1,\"227\":2,\"236\":1,\"255\":2,\"335\":1,\"376\":2}}],[\"happened\",{\"1\":{\"44\":1,\"92\":1}}],[\"happens\",{\"1\":{\"10\":1}}],[\"handful\",{\"1\":{\"376\":1}}],[\"handbook\",{\"1\":{\"50\":1}}],[\"handling\",{\"1\":{\"18\":1,\"142\":1}}],[\"handles\",{\"1\":{\"91\":1,\"115\":1}}],[\"handle\",{\"1\":{\"16\":1,\"32\":1}}],[\"handy\",{\"1\":{\"17\":1,\"91\":1}}],[\"has\",{\"0\":{\"78\":1},\"1\":{\"17\":1,\"18\":1,\"22\":1,\"32\":1,\"62\":4,\"72\":1,\"78\":1,\"84\":1,\"90\":2,\"106\":1,\"119\":1,\"130\":1,\"172\":1,\"226\":1,\"227\":1,\"230\":1,\"254\":1,\"332\":1,\"356\":1,\"363\":1}}],[\"horribly\",{\"1\":{\"380\":2}}],[\"home\",{\"1\":{\"338\":1}}],[\"hostname\",{\"1\":{\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"141\":3,\"142\":2,\"157\":1,\"158\":1,\"326\":1}}],[\"hood\",{\"1\":{\"16\":1,\"19\":1,\"330\":1}}],[\"hooking\",{\"1\":{\"17\":1}}],[\"hooks\",{\"0\":{\"246\":1},\"1\":{\"16\":1,\"19\":1,\"103\":1,\"227\":1,\"243\":2,\"246\":2,\"336\":1}}],[\"hook\",{\"1\":{\"16\":3,\"171\":1,\"240\":1,\"243\":2,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":1}}],[\"hours\",{\"1\":{\"16\":1}}],[\"however\",{\"1\":{\"9\":1,\"26\":1,\"36\":1,\"43\":1,\"236\":1}}],[\"how\",{\"0\":{\"1\":1,\"43\":1},\"1\":{\"10\":1,\"16\":1,\"17\":1,\"19\":1,\"25\":1,\"35\":1,\"36\":1,\"42\":1,\"43\":1,\"61\":1,\"81\":1,\"87\":1,\"91\":1,\"93\":1,\"97\":1,\"103\":1,\"174\":1,\"180\":1,\"225\":1,\"236\":1,\"447\":1}}],[\"hopefully\",{\"1\":{\"6\":1}}],[\"hope\",{\"1\":{\"0\":1,\"6\":1}}],[\"xml\",{\"1\":{\"285\":1}}],[\"x\",{\"1\":{\"4\":1,\"49\":4,\"62\":1,\"87\":3,\"148\":1,\"231\":2,\"258\":8,\"263\":3,\"290\":3,\"315\":6,\"444\":3}}],[\"giving\",{\"1\":{\"142\":1}}],[\"gives\",{\"1\":{\"271\":1,\"275\":1}}],[\"given\",{\"1\":{\"142\":1,\"280\":2,\"285\":2}}],[\"give\",{\"1\":{\"136\":1,\"287\":1}}],[\"github\",{\"1\":{\"3\":1,\"7\":1}}],[\"guess\",{\"1\":{\"338\":1}}],[\"guided\",{\"1\":{\"97\":1}}],[\"guide\",{\"1\":{\"90\":1,\"91\":1,\"97\":1,\"180\":1,\"181\":1,\"224\":1,\"288\":1,\"442\":1,\"447\":1}}],[\"guard\",{\"1\":{\"10\":1}}],[\"g\",{\"1\":{\"55\":1}}],[\"going\",{\"1\":{\"26\":1}}],[\"go\",{\"1\":{\"18\":1,\"32\":1,\"50\":1,\"55\":1,\"82\":1,\"84\":2}}],[\"goal\",{\"1\":{\"18\":2,\"115\":1}}],[\"goals\",{\"1\":{\"18\":1}}],[\"globally\",{\"1\":{\"82\":1,\"84\":1,\"86\":1}}],[\"globalthis\",{\"1\":{\"77\":1,\"470\":1}}],[\"globalcfg\",{\"1\":{\"73\":1}}],[\"globalstore\",{\"1\":{\"42\":2,\"133\":2,\"236\":2,\"238\":3,\"255\":1,\"290\":1,\"327\":1}}],[\"global\",{\"0\":{\"42\":1,\"75\":1,\"180\":1},\"1\":{\"17\":1,\"42\":3,\"43\":10,\"44\":2,\"46\":1,\"62\":1,\"75\":1,\"76\":1,\"84\":2,\"90\":2,\"96\":1,\"100\":1,\"103\":1,\"104\":3,\"178\":2,\"180\":3,\"181\":4,\"183\":1,\"184\":4,\"186\":1,\"193\":1,\"195\":1,\"198\":1,\"225\":1,\"227\":3,\"236\":1,\"271\":1,\"275\":1,\"318\":2,\"469\":1}}],[\"greetings\",{\"1\":{\"287\":1}}],[\"greater\",{\"1\":{\"81\":1}}],[\"great\",{\"1\":{\"10\":1,\"91\":1,\"98\":1,\"290\":1}}],[\"grouping\",{\"1\":{\"330\":1}}],[\"grouped\",{\"1\":{\"308\":1}}],[\"groupend\",{\"0\":{\"308\":1},\"1\":{\"233\":1,\"298\":1,\"300\":1,\"303\":1,\"305\":1,\"308\":2,\"309\":1,\"310\":1}}],[\"groupcollapsed\",{\"0\":{\"303\":1},\"1\":{\"233\":1,\"303\":1,\"304\":1,\"305\":1}}],[\"group\",{\"0\":{\"298\":1},\"1\":{\"233\":1,\"261\":1,\"298\":2,\"299\":1,\"300\":1,\"303\":1,\"308\":1,\"310\":2,\"330\":1}}],[\"ground\",{\"1\":{\"98\":1}}],[\"grow\",{\"1\":{\"6\":1}}],[\"gradient\",{\"1\":{\"32\":1,\"108\":1,\"116\":7,\"429\":1}}],[\"granular\",{\"1\":{\"26\":1,\"418\":1}}],[\"generic\",{\"0\":{\"326\":1},\"1\":{\"141\":1}}],[\"generally\",{\"1\":{\"469\":1}}],[\"general\",{\"1\":{\"26\":2,\"393\":1,\"408\":1}}],[\"generator\",{\"1\":{\"111\":1}}],[\"generating\",{\"1\":{\"18\":1,\"28\":2,\"43\":1,\"91\":1,\"96\":1,\"142\":1,\"153\":1,\"155\":1,\"228\":1}}],[\"generated\",{\"1\":{\"13\":1,\"34\":1,\"43\":2,\"59\":1,\"61\":2,\"86\":1,\"89\":1,\"90\":3,\"101\":1,\"103\":2,\"139\":1,\"142\":5,\"184\":1,\"190\":1,\"227\":2}}],[\"generates\",{\"1\":{\"12\":1,\"43\":1}}],[\"generate\",{\"1\":{\"8\":1,\"20\":1,\"22\":1,\"27\":1,\"43\":1,\"88\":1,\"90\":1,\"93\":1,\"128\":3,\"139\":1,\"234\":1,\"376\":1}}],[\"ge\",{\"1\":{\"28\":1}}],[\"getlisteners\",{\"0\":{\"221\":1},\"1\":{\"222\":1,\"223\":1}}],[\"getlabel\",{\"0\":{\"209\":1},\"1\":{\"210\":1,\"211\":1}}],[\"getlogconfig\",{\"1\":{\"119\":1}}],[\"getters\",{\"0\":{\"171\":1,\"189\":1,\"232\":1},\"1\":{\"171\":1,\"232\":1}}],[\"getter\",{\"0\":{\"164\":1},\"1\":{\"165\":1,\"167\":1,\"172\":1,\"178\":1}}],[\"getting\",{\"1\":{\"97\":1,\"119\":1,\"171\":1,\"180\":1,\"181\":1,\"224\":1,\"232\":1,\"288\":1,\"442\":1,\"447\":1}}],[\"getverboseconfig\",{\"1\":{\"119\":1}}],[\"getdebugconfig\",{\"1\":{\"119\":1}}],[\"getsuccessconfig\",{\"1\":{\"119\":1}}],[\"getfailconfig\",{\"1\":{\"119\":1}}],[\"getinfoconfig\",{\"1\":{\"119\":1}}],[\"getwarnconfig\",{\"1\":{\"119\":1}}],[\"geterrorconfig\",{\"1\":{\"119\":1}}],[\"getalertconfig\",{\"1\":{\"119\":1,\"120\":2}}],[\"getjsondata\",{\"1\":{\"9\":5,\"10\":3}}],[\"get\",{\"1\":{\"2\":1,\"16\":1,\"55\":1,\"62\":1,\"82\":1,\"111\":1,\"141\":1,\"162\":1,\"191\":1,\"192\":1,\"194\":1,\"195\":1,\"197\":1,\"198\":1,\"200\":1,\"209\":1,\"211\":1,\"212\":1,\"262\":1,\"267\":1,\"272\":1,\"276\":1,\"281\":1,\"286\":1,\"289\":1,\"290\":1,\"299\":1,\"304\":1,\"309\":1,\"337\":1,\"342\":1,\"346\":1,\"347\":1,\"348\":1,\"351\":1,\"352\":1,\"353\":1,\"357\":1,\"362\":1,\"367\":1,\"372\":1,\"451\":1,\"456\":1,\"461\":1,\"466\":1}}],[\"cfg\",{\"1\":{\"162\":2,\"163\":1,\"166\":2,\"168\":2,\"182\":1,\"433\":1,\"438\":1}}],[\"ceedc9\",{\"1\":{\"116\":1}}],[\"central\",{\"1\":{\"335\":1}}],[\"centrally\",{\"1\":{\"43\":2,\"44\":1,\"83\":1,\"96\":1}}],[\"centralized\",{\"1\":{\"37\":1}}],[\"certain\",{\"1\":{\"23\":1,\"28\":1}}],[\"clr\",{\"0\":{\"424\":1},\"1\":{\"376\":1,\"425\":1}}],[\"closing\",{\"1\":{\"263\":2}}],[\"closes\",{\"1\":{\"261\":1}}],[\"closethread\",{\"0\":{\"261\":1},\"1\":{\"233\":1,\"262\":1,\"263\":1,\"318\":1}}],[\"close\",{\"1\":{\"148\":1}}],[\"clean\",{\"1\":{\"236\":1}}],[\"clearing\",{\"1\":{\"273\":1}}],[\"clears\",{\"1\":{\"206\":1,\"271\":1}}],[\"clearcache\",{\"0\":{\"206\":1},\"1\":{\"207\":1,\"208\":1}}],[\"cleared\",{\"1\":{\"90\":1,\"271\":1,\"426\":1}}],[\"clear\",{\"0\":{\"424\":1},\"1\":{\"90\":2,\"208\":1,\"376\":2,\"424\":2,\"425\":1,\"426\":1,\"447\":1}}],[\"cli\",{\"1\":{\"58\":1,\"91\":2,\"93\":1,\"136\":1,\"139\":1}}],[\"client\",{\"1\":{\"28\":1}}],[\"classes\",{\"1\":{\"103\":1,\"240\":1}}],[\"class\",{\"0\":{\"22\":1,\"161\":1,\"228\":1,\"230\":1},\"1\":{\"16\":3,\"20\":1,\"21\":1,\"58\":1,\"62\":1,\"66\":1,\"84\":1,\"160\":1,\"161\":1,\"162\":1,\"164\":2,\"166\":1,\"168\":1,\"191\":1,\"194\":1,\"197\":1,\"200\":1,\"204\":1,\"207\":1,\"210\":1,\"213\":1,\"216\":1,\"219\":1,\"222\":1,\"226\":2,\"228\":3,\"230\":2,\"240\":3,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"257\":1,\"262\":1,\"267\":1,\"272\":1,\"276\":1,\"281\":1,\"286\":1,\"289\":1,\"294\":1,\"299\":1,\"304\":1,\"309\":1,\"314\":1,\"319\":1,\"324\":1,\"331\":1,\"337\":1,\"342\":1,\"347\":1,\"352\":1,\"357\":1,\"362\":1,\"367\":1,\"372\":1,\"376\":1,\"379\":1,\"384\":1,\"389\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"425\":1,\"428\":1,\"432\":2,\"433\":1,\"438\":1,\"443\":1,\"450\":1,\"455\":1,\"460\":1,\"465\":1}}],[\"crickets\",{\"1\":{\"338\":1}}],[\"criteria\",{\"1\":{\"34\":1}}],[\"critical\",{\"1\":{\"26\":1,\"378\":1}}],[\"creates\",{\"1\":{\"376\":1}}],[\"createshed\",{\"0\":{\"69\":1,\"72\":1},\"1\":{\"62\":2,\"69\":1,\"72\":1,\"73\":2,\"76\":2}}],[\"createtextnode\",{\"1\":{\"287\":1}}],[\"createelement\",{\"1\":{\"287\":1}}],[\"create\",{\"0\":{\"32\":1,\"84\":1},\"1\":{\"16\":1,\"32\":6,\"37\":1,\"60\":1,\"61\":1,\"82\":1,\"83\":1,\"84\":4,\"86\":2,\"88\":1,\"160\":1,\"173\":1,\"287\":1,\"293\":1,\"325\":1,\"327\":1,\"335\":1,\"348\":1,\"353\":1,\"358\":1,\"376\":2,\"437\":1,\"442\":1}}],[\"created\",{\"1\":{\"6\":1,\"16\":1,\"17\":1,\"43\":1,\"84\":1,\"86\":1,\"104\":2,\"226\":1,\"271\":1,\"275\":1,\"287\":1}}],[\"creating\",{\"0\":{\"160\":1},\"1\":{\"16\":1,\"58\":1,\"60\":1,\"61\":1,\"86\":1,\"106\":1,\"114\":1,\"202\":1,\"240\":1,\"241\":1,\"290\":1,\"432\":1,\"437\":1}}],[\"cumulative\",{\"1\":{\"248\":1,\"249\":1}}],[\"cumbersome\",{\"1\":{\"36\":1}}],[\"cutting\",{\"1\":{\"57\":1}}],[\"customized\",{\"0\":{\"128\":1},\"1\":{\"120\":1,\"128\":1}}],[\"customizability\",{\"1\":{\"81\":1}}],[\"customizable\",{\"1\":{\"58\":1}}],[\"customizing\",{\"1\":{\"81\":1}}],[\"customlevels\",{\"1\":{\"79\":1}}],[\"custom\",{\"0\":{\"32\":1,\"108\":1,\"427\":1},\"1\":{\"24\":1,\"25\":1,\"32\":5,\"103\":2,\"108\":2,\"114\":2,\"160\":1,\"234\":1,\"376\":2,\"427\":2,\"428\":1,\"429\":4}}],[\"current\",{\"1\":{\"21\":1,\"43\":1}}],[\"currently\",{\"1\":{\"3\":3,\"34\":1}}],[\"cb\",{\"1\":{\"12\":2,\"13\":2}}],[\"child\",{\"0\":{\"61\":1},\"1\":{\"58\":1,\"61\":2,\"86\":1,\"236\":4,\"238\":2,\"239\":1,\"293\":1,\"330\":1,\"335\":1,\"376\":2,\"432\":2,\"434\":1,\"437\":1}}],[\"chiefly\",{\"1\":{\"57\":1}}],[\"chosen\",{\"1\":{\"57\":1}}],[\"chrome\",{\"1\":{\"55\":1,\"366\":1}}],[\"chromium\",{\"1\":{\"55\":2}}],[\"chaos\",{\"1\":{\"236\":1}}],[\"challenge\",{\"1\":{\"236\":1}}],[\"challenges\",{\"1\":{\"43\":1,\"58\":1,\"236\":1}}],[\"changing\",{\"1\":{\"111\":1,\"471\":1}}],[\"changed\",{\"1\":{\"62\":2}}],[\"changes\",{\"0\":{\"63\":1,\"66\":1},\"1\":{\"23\":1}}],[\"change\",{\"1\":{\"4\":2,\"10\":1,\"25\":2,\"26\":2,\"31\":1,\"96\":2,\"116\":1}}],[\"chained\",{\"1\":{\"227\":1}}],[\"chainable\",{\"1\":{\"58\":1,\"60\":1,\"61\":1,\"92\":1}}],[\"chain\",{\"0\":{\"20\":1},\"1\":{\"20\":3,\"22\":1,\"24\":2,\"60\":1,\"84\":1,\"226\":1,\"227\":1,\"255\":1,\"320\":1,\"376\":4,\"432\":2}}],[\"chaining\",{\"1\":{\"18\":1}}],[\"checking\",{\"1\":{\"141\":1}}],[\"check\",{\"1\":{\"10\":1,\"43\":1}}],[\"carry\",{\"1\":{\"142\":1}}],[\"cares\",{\"1\":{\"241\":1}}],[\"care\",{\"1\":{\"34\":1,\"241\":3,\"469\":1}}],[\"caught\",{\"1\":{\"142\":1}}],[\"caching\",{\"1\":{\"58\":1,\"90\":3,\"202\":1,\"203\":1,\"227\":1}}],[\"cachesize\",{\"1\":{\"80\":1,\"90\":1,\"102\":1,\"103\":1}}],[\"cached\",{\"1\":{\"42\":1,\"90\":2,\"103\":1,\"201\":1,\"208\":1,\"336\":1,\"447\":1,\"464\":1}}],[\"cache\",{\"0\":{\"190\":1},\"1\":{\"42\":1,\"80\":1,\"90\":4,\"102\":1,\"103\":3,\"105\":1,\"180\":1,\"190\":1,\"191\":1,\"192\":4,\"201\":1,\"203\":1,\"205\":1,\"206\":1,\"208\":1,\"211\":1,\"214\":1,\"236\":1,\"451\":2,\"456\":2,\"461\":2,\"466\":2}}],[\"caveat\",{\"1\":{\"55\":1}}],[\"case\",{\"1\":{\"28\":1,\"84\":1,\"123\":1,\"471\":1}}],[\"cases\",{\"1\":{\"17\":1,\"26\":1}}],[\"categorized\",{\"1\":{\"26\":1}}],[\"catch\",{\"1\":{\"9\":3,\"10\":1,\"437\":1,\"439\":1}}],[\"capped\",{\"1\":{\"90\":1}}],[\"capability\",{\"1\":{\"17\":1}}],[\"capturestacktrace\",{\"1\":{\"79\":1}}],[\"capture\",{\"1\":{\"15\":1,\"26\":2,\"171\":1,\"227\":1,\"236\":1,\"376\":1}}],[\"capturing\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"17\":1,\"58\":1,\"81\":1,\"91\":1}}],[\"calls\",{\"1\":{\"23\":1,\"33\":1,\"87\":1,\"226\":1,\"243\":1,\"248\":1,\"249\":1,\"330\":1,\"332\":1}}],[\"calling\",{\"0\":{\"69\":1},\"1\":{\"20\":1,\"22\":1,\"44\":1,\"62\":2,\"66\":1,\"69\":1,\"84\":1,\"140\":1,\"230\":1,\"323\":1,\"335\":1}}],[\"call\",{\"1\":{\"16\":3,\"22\":1,\"23\":1,\"86\":1,\"142\":1,\"175\":1,\"179\":1,\"226\":1,\"230\":1,\"241\":1,\"245\":1,\"335\":1}}],[\"called\",{\"1\":{\"14\":1,\"16\":1,\"17\":2,\"19\":1,\"22\":2,\"55\":2,\"87\":1,\"104\":1,\"141\":1,\"165\":1,\"167\":1,\"171\":1,\"226\":1,\"227\":1,\"232\":1,\"243\":2,\"246\":1,\"247\":1,\"248\":2,\"249\":2,\"250\":1,\"251\":1,\"252\":1,\"253\":2,\"254\":2,\"376\":1}}],[\"callback\",{\"1\":{\"12\":1,\"17\":1,\"103\":1,\"128\":1,\"221\":1}}],[\"came\",{\"1\":{\"8\":1}}],[\"cannot\",{\"1\":{\"175\":1,\"179\":1}}],[\"can\",{\"0\":{\"1\":1},\"1\":{\"4\":1,\"5\":1,\"6\":1,\"9\":2,\"10\":1,\"12\":1,\"16\":4,\"17\":4,\"20\":1,\"22\":2,\"23\":2,\"24\":1,\"26\":2,\"28\":2,\"32\":3,\"34\":4,\"36\":1,\"38\":1,\"40\":1,\"43\":2,\"48\":1,\"55\":1,\"58\":3,\"83\":2,\"86\":1,\"87\":1,\"90\":5,\"91\":2,\"93\":1,\"96\":2,\"99\":1,\"104\":2,\"108\":1,\"111\":2,\"114\":1,\"119\":2,\"123\":2,\"128\":1,\"141\":2,\"142\":4,\"160\":1,\"181\":1,\"184\":1,\"215\":1,\"225\":1,\"227\":2,\"236\":2,\"238\":2,\"240\":1,\"241\":1,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"255\":1,\"293\":1,\"320\":1,\"323\":1,\"335\":2,\"376\":2,\"427\":1,\"437\":2,\"447\":1,\"471\":1}}],[\"coordinate\",{\"1\":{\"236\":1}}],[\"collapsed\",{\"1\":{\"303\":2}}],[\"collate\",{\"1\":{\"142\":1}}],[\"collating\",{\"1\":{\"87\":1}}],[\"collection\",{\"1\":{\"447\":1}}],[\"collect\",{\"1\":{\"87\":1}}],[\"color\",{\"1\":{\"32\":2,\"108\":2,\"111\":1,\"116\":17,\"429\":2}}],[\"corresponding\",{\"1\":{\"119\":1,\"230\":1}}],[\"correct\",{\"1\":{\"55\":1}}],[\"core\",{\"1\":{\"6\":1,\"18\":1,\"228\":1}}],[\"could\",{\"1\":{\"23\":1}}],[\"counting\",{\"1\":{\"268\":1,\"273\":1,\"277\":2}}],[\"countreset\",{\"0\":{\"275\":1},\"1\":{\"233\":1,\"275\":2,\"276\":1,\"277\":1,\"318\":1}}],[\"countclear\",{\"0\":{\"271\":1},\"1\":{\"233\":1,\"271\":2,\"272\":1,\"273\":1,\"318\":1}}],[\"counted\",{\"1\":{\"13\":1}}],[\"counter\",{\"1\":{\"13\":1,\"14\":1,\"70\":2,\"71\":2,\"186\":3,\"266\":1,\"268\":1,\"271\":1,\"273\":5,\"275\":2,\"277\":4}}],[\"counts\",{\"1\":{\"12\":1}}],[\"count\",{\"0\":{\"266\":1},\"1\":{\"12\":2,\"13\":1,\"14\":1,\"69\":1,\"70\":3,\"71\":3,\"186\":3,\"214\":2,\"233\":1,\"266\":1,\"267\":1,\"268\":1,\"271\":2,\"273\":2,\"277\":2,\"318\":1,\"320\":2}}],[\"couple\",{\"1\":{\"12\":1}}],[\"code\",{\"1\":{\"7\":1,\"24\":1,\"27\":1,\"28\":2,\"36\":1,\"43\":2,\"55\":1,\"59\":1,\"84\":2,\"99\":1,\"244\":1,\"356\":1,\"469\":1,\"471\":1}}],[\"conjunction\",{\"1\":{\"261\":1,\"293\":1,\"442\":1}}],[\"connection\",{\"1\":{\"148\":1}}],[\"condition\",{\"1\":{\"32\":1}}],[\"conditionally\",{\"1\":{\"16\":1,\"243\":2}}],[\"convenient\",{\"1\":{\"28\":1,\"37\":1,\"58\":2,\"437\":1}}],[\"conflicts\",{\"1\":{\"123\":1}}],[\"config\",{\"1\":{\"58\":1,\"83\":1,\"142\":1,\"195\":1}}],[\"configurable\",{\"1\":{\"58\":1,\"100\":1}}],[\"configurationformat\",{\"1\":{\"137\":1,\"139\":1,\"153\":1,\"155\":1}}],[\"configurations\",{\"1\":{\"100\":1,\"106\":1,\"114\":1,\"119\":1}}],[\"configuration\",{\"0\":{\"25\":1,\"50\":1,\"78\":1,\"86\":1,\"100\":1,\"101\":1,\"178\":1,\"193\":1},\"1\":{\"7\":1,\"16\":1,\"25\":1,\"31\":1,\"32\":2,\"34\":1,\"42\":1,\"43\":3,\"44\":2,\"46\":2,\"58\":1,\"62\":2,\"78\":2,\"79\":1,\"84\":2,\"86\":3,\"90\":1,\"95\":1,\"96\":1,\"100\":3,\"101\":2,\"103\":1,\"104\":1,\"111\":3,\"114\":1,\"117\":1,\"133\":2,\"162\":2,\"163\":3,\"166\":2,\"168\":2,\"169\":1,\"171\":2,\"172\":1,\"174\":1,\"178\":5,\"179\":1,\"181\":1,\"183\":1,\"186\":1,\"193\":1,\"194\":1,\"195\":2,\"198\":1,\"232\":2,\"236\":2,\"427\":3,\"432\":2}}],[\"configure\",{\"1\":{\"27\":1,\"43\":2,\"82\":1,\"86\":1,\"104\":1}}],[\"configured\",{\"1\":{\"15\":1,\"27\":1,\"31\":1,\"92\":1,\"178\":1,\"376\":1,\"427\":1}}],[\"configuring\",{\"1\":{\"18\":1,\"50\":1,\"81\":1,\"181\":1}}],[\"conform\",{\"1\":{\"27\":1}}],[\"concept\",{\"1\":{\"55\":1}}],[\"concepts\",{\"0\":{\"18\":1}}],[\"concerns\",{\"1\":{\"18\":1}}],[\"consistent\",{\"1\":{\"115\":2}}],[\"considerations\",{\"1\":{\"58\":1,\"99\":1}}],[\"considered\",{\"1\":{\"24\":1}}],[\"consumer\",{\"1\":{\"243\":1}}],[\"consume\",{\"1\":{\"91\":1}}],[\"consolestyle\",{\"1\":{\"107\":1}}],[\"console\",{\"1\":{\"18\":2,\"55\":6,\"76\":1,\"77\":1,\"90\":4,\"115\":1,\"123\":1,\"165\":1,\"172\":1,\"174\":1,\"175\":1,\"179\":1,\"189\":1,\"199\":1,\"236\":1,\"250\":1,\"251\":1,\"252\":1,\"280\":1,\"285\":1,\"336\":1,\"341\":1,\"366\":1,\"376\":1,\"378\":1,\"383\":1,\"388\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"413\":1,\"418\":1,\"424\":2,\"447\":2,\"448\":1}}],[\"constraint\",{\"1\":{\"335\":1}}],[\"constraints\",{\"0\":{\"335\":1},\"1\":{\"335\":3}}],[\"construction\",{\"1\":{\"247\":1}}],[\"constructed\",{\"0\":{\"247\":1},\"1\":{\"247\":1}}],[\"constructor\",{\"1\":{\"162\":2,\"166\":2,\"168\":1,\"241\":1,\"242\":1,\"244\":1}}],[\"const\",{\"1\":{\"9\":2,\"10\":2,\"12\":1,\"13\":1,\"16\":2,\"17\":6,\"26\":2,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":2,\"37\":1,\"44\":2,\"53\":1,\"61\":1,\"67\":1,\"68\":1,\"73\":1,\"74\":1,\"76\":1,\"82\":6,\"84\":1,\"86\":5,\"87\":2,\"90\":1,\"105\":1,\"120\":1,\"135\":1,\"141\":1,\"145\":1,\"148\":1,\"151\":1,\"173\":2,\"175\":1,\"179\":1,\"183\":1,\"186\":1,\"192\":2,\"195\":2,\"198\":3,\"201\":1,\"205\":1,\"208\":1,\"211\":2,\"214\":2,\"217\":1,\"220\":2,\"223\":2,\"231\":1,\"244\":1,\"245\":1,\"258\":2,\"263\":2,\"287\":2,\"290\":3,\"300\":2,\"305\":2,\"310\":2,\"315\":2,\"325\":1,\"327\":1,\"335\":1,\"343\":1,\"434\":1,\"439\":3,\"444\":2,\"451\":1,\"456\":1,\"461\":1,\"466\":1}}],[\"content\",{\"1\":{\"287\":1}}],[\"context\",{\"0\":{\"75\":1},\"1\":{\"8\":1,\"43\":4,\"44\":1,\"62\":1,\"75\":1,\"76\":2,\"77\":2,\"87\":2,\"88\":1,\"184\":4,\"233\":1,\"261\":1,\"263\":1,\"288\":1,\"290\":2,\"376\":1,\"442\":2}}],[\"contain\",{\"1\":{\"178\":1}}],[\"containing\",{\"1\":{\"171\":1,\"174\":1,\"232\":1}}],[\"contains\",{\"1\":{\"6\":1,\"10\":1,\"88\":1,\"172\":1,\"226\":1,\"228\":1,\"325\":1,\"326\":1,\"327\":1}}],[\"controlled\",{\"1\":{\"238\":1}}],[\"controlling\",{\"1\":{\"82\":1}}],[\"controls\",{\"1\":{\"103\":1}}],[\"control\",{\"1\":{\"42\":1,\"43\":2,\"96\":1,\"180\":1,\"236\":1,\"239\":1}}],[\"contributors\",{\"1\":{\"6\":1}}],[\"continuing\",{\"1\":{\"31\":1}}],[\"continue\",{\"1\":{\"22\":1}}],[\"combine\",{\"1\":{\"99\":1}}],[\"comment\",{\"1\":{\"87\":1}}],[\"command\",{\"1\":{\"48\":1}}],[\"commonlogformatmeta\",{\"0\":{\"156\":1},\"1\":{\"156\":1,\"157\":1,\"158\":1}}],[\"commonjs\",{\"0\":{\"53\":1}}],[\"common\",{\"0\":{\"155\":1},\"1\":{\"27\":2,\"55\":1,\"58\":2,\"87\":2,\"103\":2,\"136\":3,\"155\":3,\"156\":3,\"157\":1,\"239\":1}}],[\"communications\",{\"1\":{\"26\":1,\"155\":1,\"403\":1}}],[\"communication\",{\"1\":{\"26\":1,\"398\":1}}],[\"community\",{\"1\":{\"6\":1}}],[\"completed\",{\"1\":{\"254\":1}}],[\"completely\",{\"1\":{\"25\":1,\"91\":1,\"100\":1,\"271\":1}}],[\"components\",{\"1\":{\"240\":1}}],[\"comprehensive\",{\"1\":{\"115\":1}}],[\"compelling\",{\"1\":{\"58\":1}}],[\"compared\",{\"1\":{\"58\":1}}],[\"compatible\",{\"1\":{\"18\":1,\"58\":1,\"93\":1,\"136\":1,\"139\":1,\"140\":1,\"144\":1,\"147\":1,\"150\":1}}],[\"compileroptions\",{\"1\":{\"51\":1}}],[\"comes\",{\"1\":{\"18\":1,\"24\":1,\"26\":1,\"27\":1,\"52\":1,\"87\":1,\"96\":1,\"100\":1,\"103\":1,\"136\":1,\"236\":1,\"376\":1}}],[\"come\",{\"1\":{\"8\":1,\"26\":1,\"114\":1,\"236\":1,\"377\":1}}],[\"com\",{\"1\":{\"5\":1,\"7\":2,\"148\":1,\"151\":1,\"439\":1,\"471\":1}}],[\"copy\",{\"1\":{\"5\":1}}],[\"system\",{\"1\":{\"244\":1}}],[\"slow\",{\"1\":{\"142\":1}}],[\"small\",{\"1\":{\"119\":1}}],[\"sveltekit\",{\"1\":{\"99\":1}}],[\"ssr\",{\"1\":{\"58\":1}}],[\"schema\",{\"0\":{\"78\":1},\"1\":{\"62\":1,\"78\":1,\"140\":1}}],[\"scopes\",{\"1\":{\"58\":1,\"87\":2,\"88\":1,\"376\":1,\"442\":1}}],[\"scenes\",{\"1\":{\"43\":1}}],[\"scripts\",{\"1\":{\"4\":2}}],[\"spacing\",{\"1\":{\"115\":1}}],[\"sparingly\",{\"1\":{\"26\":1,\"378\":1}}],[\"specify\",{\"1\":{\"123\":1,\"153\":1,\"156\":1,\"241\":3}}],[\"specifically\",{\"1\":{\"293\":1}}],[\"specific\",{\"1\":{\"17\":2,\"28\":1,\"36\":1,\"86\":1,\"437\":1,\"447\":1}}],[\"specified\",{\"1\":{\"16\":1,\"123\":1,\"234\":1}}],[\"special\",{\"1\":{\"16\":1,\"24\":1,\"58\":1,\"330\":1,\"376\":1}}],[\"shines\",{\"1\":{\"142\":1}}],[\"shifting\",{\"1\":{\"58\":1}}],[\"shed\",{\"1\":{\"73\":2,\"76\":1}}],[\"shaping\",{\"1\":{\"57\":2,\"136\":1}}],[\"share\",{\"1\":{\"43\":1,\"318\":1}}],[\"shared\",{\"0\":{\"84\":1,\"86\":1},\"1\":{\"25\":1,\"27\":1,\"83\":1,\"84\":3,\"86\":1,\"261\":1}}],[\"shown\",{\"1\":{\"166\":1}}],[\"showcase\",{\"1\":{\"90\":1}}],[\"showtimestamp\",{\"1\":{\"80\":1,\"102\":1,\"103\":1}}],[\"show\",{\"1\":{\"46\":1,\"327\":1}}],[\"showing\",{\"1\":{\"14\":1}}],[\"should\",{\"0\":{\"58\":1},\"1\":{\"26\":2,\"55\":1,\"62\":2,\"125\":4,\"165\":1,\"167\":1,\"168\":1,\"239\":1,\"258\":1,\"280\":1,\"285\":1,\"378\":2,\"469\":1}}],[\"shorter\",{\"1\":{\"9\":1,\"330\":1}}],[\"shorthand\",{\"1\":{\"9\":1,\"332\":1}}],[\"site\",{\"1\":{\"471\":1}}],[\"situations\",{\"1\":{\"243\":1}}],[\"similar\",{\"1\":{\"90\":1}}],[\"simplified\",{\"1\":{\"332\":1}}],[\"simplify\",{\"1\":{\"119\":1}}],[\"simply\",{\"1\":{\"22\":1,\"26\":1,\"60\":1,\"170\":1,\"424\":1}}],[\"simple\",{\"0\":{\"59\":1},\"1\":{\"17\":1,\"18\":1,\"43\":1,\"83\":1,\"136\":2,\"243\":1}}],[\"simpler\",{\"1\":{\"17\":1,\"143\":1}}],[\"silent\",{\"0\":{\"336\":1},\"1\":{\"80\":1,\"102\":1,\"103\":2,\"233\":1,\"336\":1,\"337\":1,\"338\":1}}],[\"side\",{\"1\":{\"58\":1,\"99\":2,\"243\":2}}],[\"single\",{\"1\":{\"43\":1,\"87\":1,\"88\":1,\"135\":1,\"142\":1,\"241\":1,\"280\":1,\"285\":1,\"335\":1,\"442\":1}}],[\"since\",{\"1\":{\"21\":1,\"26\":2,\"303\":1,\"356\":1,\"358\":2}}],[\"sift\",{\"1\":{\"34\":1,\"89\":1}}],[\"sifting\",{\"1\":{\"9\":1}}],[\"size\",{\"1\":{\"32\":1,\"90\":2,\"108\":1,\"116\":9,\"429\":1}}],[\"super\",{\"1\":{\"166\":1,\"168\":1,\"241\":1,\"242\":1,\"244\":1,\"325\":1}}],[\"supply\",{\"1\":{\"55\":1}}],[\"supports\",{\"1\":{\"26\":1,\"50\":1,\"87\":1,\"89\":1,\"93\":1,\"335\":1,\"371\":2}}],[\"support\",{\"1\":{\"3\":1,\"16\":1,\"50\":1,\"58\":6,\"98\":1,\"243\":1}}],[\"supported\",{\"1\":{\"2\":1,\"6\":1,\"15\":1,\"23\":1,\"24\":1,\"49\":1,\"58\":1}}],[\"subtracted`\",{\"1\":{\"290\":1}}],[\"subtracted\",{\"1\":{\"87\":1,\"263\":1,\"290\":1,\"444\":1}}],[\"subtract\",{\"1\":{\"87\":2,\"88\":1,\"263\":2,\"290\":2,\"444\":2}}],[\"subsequent\",{\"1\":{\"33\":1,\"86\":1,\"298\":1,\"303\":1}}],[\"summary\",{\"1\":{\"81\":1}}],[\"suggested\",{\"1\":{\"142\":1}}],[\"suggest\",{\"1\":{\"55\":1}}],[\"sure\",{\"1\":{\"50\":1,\"244\":1,\"245\":1}}],[\"successful\",{\"1\":{\"26\":2,\"403\":2,\"405\":2}}],[\"success\",{\"0\":{\"403\":1},\"1\":{\"26\":1,\"80\":1,\"90\":2,\"102\":1,\"116\":1,\"118\":1,\"119\":1,\"125\":2,\"130\":1,\"234\":1,\"376\":1,\"404\":1,\"405\":2}}],[\"such\",{\"1\":{\"16\":1,\"17\":1,\"58\":2,\"91\":1,\"184\":1,\"447\":1}}],[\"select\",{\"1\":{\"135\":3}}],[\"selects\",{\"1\":{\"135\":3}}],[\"selecting\",{\"1\":{\"133\":1}}],[\"selector\",{\"1\":{\"123\":1,\"215\":1,\"459\":1}}],[\"serialized\",{\"1\":{\"144\":1,\"147\":1,\"150\":1}}],[\"serializeerror\",{\"0\":{\"144\":1},\"1\":{\"145\":2}}],[\"serializeresponse\",{\"0\":{\"150\":1},\"1\":{\"151\":2}}],[\"serializerequest\",{\"0\":{\"147\":1},\"1\":{\"148\":2}}],[\"serializer\",{\"0\":{\"143\":1},\"1\":{\"143\":1,\"148\":1,\"151\":1}}],[\"serialize\",{\"1\":{\"142\":1}}],[\"series\",{\"1\":{\"60\":1,\"103\":1}}],[\"services\",{\"1\":{\"142\":1,\"235\":1}}],[\"service\",{\"1\":{\"82\":1,\"290\":1}}],[\"servers\",{\"1\":{\"155\":1}}],[\"server\",{\"0\":{\"46\":1,\"91\":1,\"110\":1,\"113\":1,\"117\":1,\"122\":1,\"127\":1,\"132\":1,\"138\":1,\"177\":1,\"188\":1,\"260\":1,\"265\":1,\"270\":1,\"279\":1,\"284\":1,\"292\":1,\"297\":1,\"302\":1,\"307\":1,\"312\":1,\"317\":1,\"322\":1,\"329\":1,\"334\":1,\"340\":1,\"345\":1,\"350\":1,\"355\":1,\"360\":1,\"365\":1,\"370\":1,\"375\":1,\"382\":1,\"387\":1,\"392\":1,\"397\":1,\"402\":1,\"407\":1,\"412\":1,\"417\":1,\"422\":1,\"431\":1,\"436\":1,\"441\":1,\"446\":1,\"453\":1,\"458\":1,\"463\":1,\"468\":1},\"1\":{\"16\":4,\"18\":1,\"58\":3,\"59\":1,\"91\":1,\"99\":1,\"117\":2,\"123\":1,\"142\":3,\"167\":1,\"241\":2,\"242\":2,\"243\":1,\"244\":3,\"280\":1,\"285\":1}}],[\"sensible\",{\"1\":{\"100\":1}}],[\"sense\",{\"1\":{\"31\":1,\"84\":1}}],[\"send\",{\"1\":{\"15\":1}}],[\"several\",{\"1\":{\"117\":1}}],[\"severity\",{\"1\":{\"26\":1}}],[\"severe\",{\"1\":{\"26\":1}}],[\"section\",{\"1\":{\"25\":1,\"90\":1,\"91\":1,\"100\":1,\"115\":1,\"166\":1,\"168\":1,\"180\":1,\"181\":1,\"224\":1,\"288\":1}}],[\"second\",{\"1\":{\"16\":1,\"18\":1,\"28\":1}}],[\"separately\",{\"1\":{\"18\":1}}],[\"separate\",{\"1\":{\"18\":1}}],[\"seal<allowednamespaces>\",{\"1\":{\"335\":1}}],[\"seal<validnamespaces>\",{\"1\":{\"37\":1}}],[\"sealtag\",{\"0\":{\"437\":1},\"1\":{\"101\":1,\"234\":1,\"293\":1,\"376\":1,\"427\":1,\"437\":1,\"438\":1,\"439\":1}}],[\"sealing\",{\"0\":{\"66\":1},\"1\":{\"335\":2,\"376\":2}}],[\"sealedlog\",{\"1\":{\"433\":1,\"438\":1}}],[\"sealed\",{\"1\":{\"37\":1,\"330\":1,\"434\":1}}],[\"seal\",{\"0\":{\"432\":1},\"1\":{\"10\":2,\"12\":1,\"13\":1,\"16\":1,\"17\":1,\"26\":2,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"44\":2,\"61\":1,\"62\":1,\"66\":1,\"67\":1,\"68\":1,\"82\":2,\"84\":3,\"86\":5,\"90\":1,\"101\":1,\"141\":1,\"234\":1,\"293\":1,\"376\":1,\"427\":1,\"432\":2,\"433\":1,\"434\":1}}],[\"seeks\",{\"1\":{\"18\":1}}],[\"see\",{\"1\":{\"9\":1,\"14\":1,\"19\":2,\"20\":1,\"24\":1,\"26\":4,\"42\":1,\"90\":1,\"228\":1,\"348\":1,\"353\":1,\"358\":1,\"413\":1,\"415\":1,\"420\":1,\"469\":1}}],[\"setattribute\",{\"1\":{\"287\":1}}],[\"setlabel\",{\"0\":{\"212\":1},\"1\":{\"213\":1,\"214\":1}}],[\"sets\",{\"1\":{\"58\":1,\"103\":1,\"293\":1}}],[\"settings\",{\"1\":{\"86\":1,\"111\":1}}],[\"setting\",{\"0\":{\"83\":1},\"1\":{\"26\":1,\"34\":1,\"55\":1,\"81\":1,\"161\":1,\"202\":1,\"214\":1,\"271\":1}}],[\"setup<allowednamespaces>\",{\"1\":{\"335\":1}}],[\"setup<meta\",{\"1\":{\"182\":1}}],[\"setup<commonlogformatmeta>\",{\"1\":{\"157\":1}}],[\"setup<jsonlogformatmeta>\",{\"1\":{\"29\":1,\"141\":1}}],[\"setup\",{\"0\":{\"29\":1,\"44\":1,\"72\":1,\"104\":1,\"105\":1,\"181\":1},\"1\":{\"15\":1,\"16\":3,\"17\":3,\"25\":1,\"26\":4,\"27\":2,\"28\":1,\"29\":1,\"30\":2,\"31\":2,\"32\":2,\"35\":2,\"37\":2,\"38\":2,\"40\":2,\"44\":4,\"62\":1,\"72\":1,\"74\":2,\"77\":2,\"82\":3,\"84\":6,\"86\":6,\"90\":2,\"91\":1,\"104\":3,\"105\":2,\"108\":2,\"111\":2,\"120\":2,\"125\":2,\"130\":2,\"135\":2,\"137\":2,\"139\":2,\"140\":1,\"141\":2,\"153\":2,\"157\":1,\"170\":3,\"173\":2,\"175\":2,\"179\":2,\"181\":4,\"183\":2,\"184\":1,\"186\":2,\"192\":2,\"195\":2,\"198\":2,\"201\":2,\"205\":2,\"208\":2,\"211\":2,\"214\":2,\"217\":2,\"220\":2,\"223\":2,\"245\":3,\"263\":1,\"290\":2,\"325\":1,\"326\":3,\"327\":2,\"335\":2,\"415\":2,\"420\":2,\"427\":1,\"429\":2,\"432\":1,\"451\":2,\"456\":2,\"461\":2,\"466\":2}}],[\"set\",{\"0\":{\"26\":1},\"1\":{\"9\":1,\"17\":1,\"26\":3,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"43\":1,\"58\":1,\"103\":1,\"104\":1,\"123\":2,\"137\":1,\"139\":1,\"143\":1,\"153\":1,\"155\":1,\"469\":1,\"471\":2}}],[\"src\",{\"1\":{\"8\":1,\"26\":3,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":2,\"84\":4,\"142\":2}}],[\"soa\",{\"1\":{\"142\":1}}],[\"sort\",{\"1\":{\"43\":1}}],[\"so\",{\"1\":{\"26\":1,\"34\":1,\"93\":1,\"148\":1,\"151\":1,\"244\":1,\"255\":1}}],[\"solid\",{\"1\":{\"116\":1}}],[\"solidarity\",{\"1\":{\"57\":1}}],[\"solve\",{\"1\":{\"18\":1}}],[\"solution\",{\"0\":{\"3\":1}}],[\"somewhere\",{\"1\":{\"84\":1}}],[\"sometimes\",{\"1\":{\"32\":1,\"184\":1,\"241\":2}}],[\"something\",{\"1\":{\"12\":1,\"13\":1,\"17\":3,\"26\":1,\"37\":1,\"44\":1,\"92\":1,\"105\":1,\"135\":6,\"173\":1,\"217\":1,\"220\":1,\"223\":1,\"290\":1,\"380\":2}}],[\"some\",{\"1\":{\"9\":1,\"16\":1,\"25\":1,\"35\":1,\"43\":1,\"44\":3,\"52\":1,\"58\":1,\"62\":1,\"82\":1,\"84\":1,\"89\":1,\"90\":1,\"140\":1,\"145\":1,\"156\":1,\"161\":1,\"196\":1,\"205\":1,\"236\":1,\"255\":2,\"287\":1,\"300\":1,\"305\":1,\"310\":2,\"420\":2}}],[\"source\",{\"1\":{\"7\":1,\"9\":2,\"15\":2,\"18\":1,\"55\":1,\"96\":1,\"142\":1}}],[\"sake\",{\"1\":{\"469\":1}}],[\"save\",{\"1\":{\"244\":1}}],[\"says\",{\"1\":{\"123\":1}}],[\"say\",{\"1\":{\"32\":1,\"86\":1}}],[\"safety\",{\"1\":{\"28\":1}}],[\"safer\",{\"1\":{\"5\":1}}],[\"same\",{\"1\":{\"7\":1,\"32\":1,\"43\":3,\"58\":1,\"59\":1,\"88\":1,\"99\":1,\"111\":1,\"165\":1,\"167\":1,\"318\":1}}],[\"step\",{\"1\":{\"224\":2}}],[\"steps\",{\"1\":{\"25\":1}}],[\"styling\",{\"0\":{\"114\":1},\"1\":{\"114\":1,\"115\":2,\"117\":2,\"366\":2}}],[\"styles\",{\"0\":{\"115\":1,\"116\":1,\"117\":1,\"118\":1},\"1\":{\"61\":1,\"114\":1,\"115\":3,\"116\":1,\"117\":2,\"119\":1,\"172\":1,\"174\":1}}],[\"style\",{\"0\":{\"119\":1,\"120\":1},\"1\":{\"32\":1,\"58\":1,\"107\":2,\"108\":1,\"111\":3,\"116\":1,\"118\":1,\"119\":1,\"172\":1,\"174\":1,\"224\":1,\"429\":1}}],[\"stuff\",{\"1\":{\"73\":1,\"74\":1,\"145\":1,\"183\":1,\"348\":1,\"353\":1,\"358\":1}}],[\"stdout\",{\"1\":{\"27\":1,\"58\":1,\"136\":1,\"153\":1}}],[\"still\",{\"1\":{\"26\":1,\"103\":1,\"336\":2}}],[\"stored\",{\"1\":{\"227\":1}}],[\"store\",{\"0\":{\"42\":1,\"180\":1},\"1\":{\"17\":7,\"42\":1,\"43\":7,\"44\":2,\"46\":1,\"74\":2,\"82\":2,\"84\":1,\"86\":1,\"90\":1,\"96\":1,\"100\":1,\"103\":1,\"104\":2,\"105\":2,\"135\":7,\"173\":2,\"175\":2,\"178\":1,\"179\":2,\"180\":2,\"181\":3,\"183\":2,\"186\":1,\"192\":2,\"195\":2,\"198\":3,\"201\":2,\"205\":2,\"208\":2,\"211\":2,\"214\":2,\"217\":2,\"220\":3,\"223\":3,\"225\":1,\"227\":3,\"236\":1,\"271\":1,\"275\":1,\"290\":2,\"318\":1,\"327\":2,\"451\":2,\"456\":2,\"461\":2,\"466\":2}}],[\"strongly\",{\"1\":{\"142\":1}}],[\"straightforward\",{\"1\":{\"62\":1}}],[\"stringify\",{\"1\":{\"148\":1}}],[\"string>\",{\"1\":{\"142\":1}}],[\"string\",{\"1\":{\"9\":2,\"10\":1,\"17\":1,\"79\":2,\"80\":2,\"102\":2,\"103\":1,\"107\":3,\"116\":1,\"124\":1,\"129\":1,\"134\":4,\"142\":13,\"158\":3,\"162\":4,\"163\":1,\"166\":1,\"168\":1,\"172\":4,\"174\":4,\"210\":1,\"213\":1,\"250\":1,\"251\":1,\"253\":1,\"254\":1,\"294\":1,\"319\":1,\"324\":2,\"331\":2,\"376\":1,\"428\":1,\"437\":1,\"438\":1,\"443\":1,\"450\":1,\"455\":1}}],[\"structured\",{\"0\":{\"27\":1},\"1\":{\"27\":2}}],[\"structure\",{\"1\":{\"8\":1}}],[\"stream\",{\"1\":{\"7\":1}}],[\"stacktrace\",{\"1\":{\"366\":1}}],[\"stack\",{\"1\":{\"142\":1}}],[\"stackoverflow\",{\"1\":{\"5\":2}}],[\"stacy\",{\"1\":{\"94\":1,\"343\":1}}],[\"statustext\",{\"1\":{\"151\":1}}],[\"status\",{\"1\":{\"151\":1}}],[\"statuscode\",{\"1\":{\"142\":1}}],[\"statement\",{\"1\":{\"123\":1}}],[\"stated\",{\"1\":{\"60\":1}}],[\"statically\",{\"1\":{\"22\":1,\"226\":1}}],[\"static\",{\"1\":{\"20\":1,\"22\":1,\"62\":1,\"66\":1,\"226\":1,\"230\":1}}],[\"standard\",{\"0\":{\"153\":1},\"1\":{\"18\":2,\"27\":1,\"55\":3,\"58\":2,\"103\":2,\"136\":2,\"153\":5,\"156\":1,\"157\":1,\"172\":1,\"174\":1,\"261\":1,\"271\":1,\"288\":1,\"293\":1,\"295\":1,\"313\":1,\"318\":1,\"323\":1,\"330\":1,\"336\":1,\"356\":1,\"361\":1,\"366\":1,\"371\":1,\"376\":1,\"378\":2,\"383\":1,\"388\":1,\"393\":1,\"398\":2,\"403\":2,\"408\":1,\"413\":1,\"418\":2,\"424\":1,\"427\":1,\"432\":1,\"437\":1,\"442\":1}}],[\"starting\",{\"1\":{\"348\":1,\"353\":1}}],[\"starts\",{\"1\":{\"298\":1,\"303\":1,\"346\":1}}],[\"started\",{\"1\":{\"97\":1,\"180\":1,\"181\":1,\"224\":1,\"288\":1,\"442\":1,\"447\":1}}],[\"start\",{\"1\":{\"4\":7,\"20\":1,\"95\":1,\"228\":1,\"255\":1}}],[\"s\",{\"1\":{\"6\":1,\"8\":2,\"9\":2,\"10\":3,\"12\":2,\"13\":1,\"16\":1,\"17\":3,\"19\":1,\"26\":3,\"27\":2,\"31\":2,\"32\":3,\"35\":1,\"37\":3,\"43\":3,\"44\":1,\"48\":1,\"58\":1,\"60\":1,\"62\":2,\"82\":1,\"84\":4,\"86\":1,\"87\":1,\"90\":3,\"91\":2,\"92\":1,\"95\":1,\"96\":1,\"97\":1,\"103\":1,\"114\":1,\"173\":1,\"174\":1,\"238\":1,\"240\":1,\"242\":1,\"258\":3,\"266\":1,\"275\":1,\"315\":2,\"325\":1,\"327\":2,\"346\":1,\"348\":3,\"351\":1,\"353\":3,\"358\":3,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"415\":1,\"420\":1,\"442\":1}}],[\"ly\",{\"1\":{\"55\":1}}],[\"leetlevel\",{\"1\":{\"108\":4}}],[\"leave\",{\"1\":{\"238\":1}}],[\"leaves\",{\"1\":{\"236\":1}}],[\"least\",{\"1\":{\"184\":1}}],[\"leaks\",{\"1\":{\"103\":1}}],[\"learn\",{\"1\":{\"97\":1}}],[\"learned\",{\"1\":{\"81\":1}}],[\"leads\",{\"1\":{\"18\":1}}],[\"left\",{\"1\":{\"59\":1}}],[\"levelconfiguration\",{\"0\":{\"106\":1,\"107\":1},\"1\":{\"103\":1,\"106\":2,\"107\":1,\"108\":1,\"111\":1,\"114\":1,\"162\":2,\"163\":1,\"166\":2,\"168\":2}}],[\"levelconfig>\",{\"1\":{\"80\":1,\"102\":1}}],[\"levelconfig\",{\"1\":{\"32\":3}}],[\"levelname\",{\"1\":{\"31\":1,\"32\":1,\"103\":1,\"107\":1,\"108\":1,\"111\":2,\"142\":1,\"172\":1,\"174\":1,\"428\":1,\"429\":1}}],[\"level\",{\"0\":{\"26\":1,\"32\":1,\"108\":1,\"111\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":1,\"377\":1},\"1\":{\"17\":1,\"25\":2,\"26\":13,\"27\":1,\"31\":1,\"32\":10,\"34\":1,\"44\":1,\"46\":2,\"80\":2,\"82\":3,\"90\":1,\"95\":1,\"96\":1,\"102\":2,\"103\":4,\"106\":2,\"107\":1,\"108\":2,\"111\":2,\"114\":2,\"116\":1,\"118\":1,\"119\":3,\"123\":2,\"124\":1,\"135\":3,\"141\":2,\"142\":1,\"162\":2,\"163\":2,\"166\":2,\"168\":2,\"172\":3,\"173\":2,\"174\":3,\"215\":1,\"221\":1,\"222\":1,\"234\":1,\"327\":1,\"376\":3,\"377\":1,\"378\":2,\"383\":1,\"388\":1,\"393\":2,\"398\":1,\"403\":1,\"408\":1,\"413\":1,\"415\":1,\"418\":2,\"420\":1,\"423\":1,\"427\":1,\"429\":3,\"432\":1,\"437\":1,\"459\":1,\"460\":1}}],[\"levelselector\",{\"0\":{\"133\":1},\"1\":{\"17\":1,\"40\":1,\"90\":1,\"133\":2,\"134\":1,\"216\":1,\"460\":1}}],[\"levels\",{\"0\":{\"40\":1},\"1\":{\"17\":4,\"26\":6,\"32\":1,\"40\":2,\"80\":1,\"102\":1,\"103\":2,\"106\":1,\"108\":2,\"111\":2,\"114\":3,\"120\":1,\"123\":1,\"133\":1,\"135\":2,\"216\":1,\"376\":1,\"408\":1,\"427\":2,\"429\":1}}],[\"less\",{\"1\":{\"17\":1,\"26\":2,\"32\":1,\"388\":1}}],[\"let\",{\"1\":{\"8\":1,\"9\":1,\"10\":2,\"12\":3,\"13\":2,\"16\":1,\"17\":2,\"19\":1,\"26\":2,\"27\":1,\"31\":1,\"32\":3,\"35\":1,\"37\":3,\"43\":2,\"44\":1,\"84\":3,\"86\":1,\"90\":3,\"173\":1,\"242\":1,\"258\":2,\"268\":1,\"273\":1,\"277\":2,\"315\":1,\"325\":1,\"327\":1,\"348\":3,\"353\":3,\"358\":3}}],[\"lastname\",{\"1\":{\"343\":2}}],[\"lastly\",{\"1\":{\"18\":1,\"40\":1}}],[\"latency\",{\"1\":{\"141\":2,\"142\":2}}],[\"later\",{\"1\":{\"8\":1,\"84\":1,\"103\":1,\"141\":1,\"215\":1,\"323\":1}}],[\"large\",{\"1\":{\"34\":3,\"43\":1,\"87\":1}}],[\"labeled\",{\"1\":{\"288\":1}}],[\"label\",{\"0\":{\"318\":1},\"1\":{\"12\":3,\"13\":3,\"14\":1,\"34\":1,\"38\":5,\"70\":2,\"71\":2,\"87\":3,\"88\":2,\"90\":3,\"103\":1,\"123\":1,\"124\":1,\"186\":3,\"209\":1,\"210\":1,\"211\":3,\"212\":1,\"213\":2,\"214\":3,\"217\":1,\"220\":1,\"223\":1,\"233\":1,\"255\":1,\"261\":2,\"263\":5,\"266\":1,\"268\":1,\"271\":1,\"273\":4,\"275\":1,\"277\":3,\"288\":1,\"290\":5,\"318\":4,\"319\":1,\"320\":2,\"346\":2,\"348\":3,\"351\":2,\"353\":3,\"356\":1,\"444\":3,\"449\":1,\"450\":1,\"451\":2}}],[\"labels\",{\"0\":{\"12\":1,\"38\":1},\"1\":{\"8\":1,\"12\":2,\"38\":2,\"58\":1,\"69\":1,\"90\":1,\"202\":1,\"255\":1,\"320\":1}}],[\"ll\",{\"1\":{\"5\":1,\"9\":2,\"10\":1,\"16\":3,\"25\":1,\"26\":1,\"50\":1,\"84\":2,\"100\":1,\"151\":1,\"166\":1,\"168\":1,\"175\":1,\"179\":1,\"228\":1,\"244\":1,\"245\":1,\"326\":1,\"327\":1}}],[\"loop\",{\"1\":{\"175\":1,\"179\":1,\"348\":6,\"353\":6}}],[\"looks\",{\"1\":{\"9\":1,\"43\":1,\"61\":1,\"358\":1}}],[\"look\",{\"0\":{\"60\":1},\"1\":{\"4\":1,\"10\":1,\"16\":1,\"17\":1,\"19\":1,\"25\":1,\"35\":1,\"37\":2,\"43\":1,\"44\":1,\"60\":1,\"61\":1,\"97\":1,\"100\":1,\"240\":1,\"258\":1,\"315\":1}}],[\"lose\",{\"1\":{\"55\":1}}],[\"long\",{\"1\":{\"55\":2}}],[\"longer\",{\"1\":{\"26\":1,\"62\":1,\"69\":1,\"308\":1,\"418\":1}}],[\"lot\",{\"1\":{\"43\":1,\"348\":1,\"353\":1,\"358\":1}}],[\"lower\",{\"1\":{\"26\":2,\"90\":1,\"408\":1}}],[\"lowest\",{\"1\":{\"26\":1}}],[\"loadbrowserdependencies\",{\"1\":{\"243\":1,\"244\":1}}],[\"loadserverdependencies\",{\"1\":{\"243\":1,\"244\":1}}],[\"loading\",{\"0\":{\"243\":1},\"1\":{\"243\":3}}],[\"loaded\",{\"1\":{\"16\":1,\"243\":1,\"356\":1}}],[\"load\",{\"1\":{\"16\":7,\"82\":1,\"86\":2,\"243\":1,\"244\":3,\"245\":2,\"356\":1,\"358\":2}}],[\"localhost\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"141\":2,\"157\":1,\"326\":1}}],[\"local\",{\"1\":{\"10\":1,\"16\":1}}],[\"location\",{\"1\":{\"7\":1,\"37\":1,\"99\":1}}],[\"loglisteners\",{\"1\":{\"223\":1}}],[\"loglistener\",{\"1\":{\"216\":1,\"222\":1}}],[\"loglevels\",{\"1\":{\"79\":2}}],[\"loglevel\",{\"1\":{\"79\":1}}],[\"logic\",{\"1\":{\"161\":1}}],[\"login\",{\"1\":{\"148\":1,\"151\":1}}],[\"log4j\",{\"1\":{\"87\":1}}],[\"log4js\",{\"1\":{\"58\":1}}],[\"log|json|formatter\",{\"1\":{\"55\":1}}],[\"logged\",{\"1\":{\"142\":1,\"172\":1,\"174\":1,\"231\":1}}],[\"loggers\",{\"0\":{\"61\":1},\"1\":{\"61\":1,\"83\":1,\"84\":1,\"86\":2,\"293\":1,\"330\":1,\"432\":1,\"437\":1}}],[\"logger\",{\"0\":{\"84\":1,\"86\":1},\"1\":{\"2\":1,\"5\":1,\"8\":1,\"9\":8,\"10\":9,\"12\":5,\"13\":5,\"15\":1,\"16\":3,\"17\":2,\"25\":1,\"26\":10,\"27\":4,\"28\":1,\"29\":3,\"30\":3,\"31\":4,\"32\":9,\"37\":4,\"44\":8,\"58\":1,\"61\":7,\"67\":2,\"68\":2,\"82\":10,\"84\":11,\"86\":9,\"90\":7,\"141\":5,\"142\":2,\"326\":1,\"335\":4,\"376\":3,\"432\":1,\"434\":3}}],[\"logging\",{\"0\":{\"27\":1,\"236\":1},\"1\":{\"8\":1,\"18\":1,\"21\":1,\"26\":11,\"31\":1,\"32\":1,\"43\":2,\"44\":1,\"57\":1,\"58\":2,\"84\":1,\"91\":2,\"98\":1,\"141\":1,\"142\":2,\"236\":1,\"238\":1,\"285\":1,\"295\":1,\"373\":1,\"383\":1,\"388\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"410\":2,\"413\":1,\"418\":2,\"420\":2,\"437\":2,\"469\":1}}],[\"log\",{\"0\":{\"15\":1,\"17\":1,\"20\":1,\"22\":1,\"26\":1,\"32\":1,\"87\":1,\"228\":1,\"408\":1},\"1\":{\"7\":1,\"8\":2,\"9\":3,\"10\":2,\"12\":4,\"13\":1,\"14\":1,\"15\":4,\"16\":3,\"17\":19,\"18\":2,\"20\":4,\"21\":2,\"22\":3,\"23\":4,\"24\":5,\"25\":2,\"26\":7,\"27\":3,\"28\":2,\"31\":1,\"32\":6,\"35\":3,\"37\":2,\"38\":3,\"40\":3,\"42\":1,\"43\":3,\"44\":4,\"46\":4,\"53\":1,\"54\":1,\"58\":5,\"60\":5,\"61\":1,\"62\":2,\"64\":2,\"65\":2,\"67\":2,\"68\":2,\"70\":4,\"71\":4,\"72\":2,\"74\":1,\"76\":1,\"77\":1,\"80\":1,\"81\":2,\"82\":5,\"84\":6,\"86\":2,\"87\":4,\"88\":6,\"90\":11,\"91\":2,\"95\":1,\"96\":1,\"100\":1,\"102\":1,\"103\":7,\"104\":2,\"105\":2,\"106\":2,\"108\":2,\"111\":3,\"114\":2,\"115\":1,\"116\":1,\"118\":1,\"119\":2,\"120\":1,\"123\":1,\"128\":1,\"133\":1,\"135\":15,\"136\":1,\"141\":1,\"142\":9,\"143\":1,\"148\":1,\"151\":1,\"153\":1,\"155\":1,\"156\":2,\"157\":2,\"161\":1,\"163\":4,\"165\":3,\"167\":3,\"171\":5,\"172\":9,\"173\":4,\"174\":11,\"175\":7,\"178\":1,\"179\":7,\"183\":6,\"184\":1,\"186\":6,\"190\":2,\"191\":1,\"192\":7,\"201\":1,\"202\":1,\"203\":3,\"204\":2,\"205\":1,\"206\":1,\"208\":2,\"211\":2,\"214\":2,\"215\":1,\"217\":5,\"218\":1,\"220\":5,\"221\":1,\"223\":5,\"224\":1,\"225\":2,\"227\":6,\"228\":4,\"230\":3,\"231\":2,\"232\":3,\"233\":1,\"234\":2,\"240\":2,\"246\":1,\"247\":5,\"248\":5,\"249\":5,\"250\":7,\"251\":6,\"252\":5,\"253\":7,\"254\":6,\"255\":3,\"257\":2,\"258\":4,\"262\":2,\"266\":2,\"267\":2,\"268\":1,\"271\":2,\"272\":2,\"273\":4,\"275\":3,\"276\":2,\"277\":3,\"280\":1,\"281\":2,\"282\":1,\"285\":1,\"286\":2,\"287\":1,\"288\":1,\"289\":2,\"290\":1,\"293\":1,\"294\":2,\"295\":1,\"298\":2,\"299\":2,\"303\":2,\"304\":2,\"308\":1,\"309\":2,\"314\":2,\"315\":5,\"318\":1,\"319\":2,\"320\":2,\"323\":3,\"324\":3,\"325\":2,\"326\":2,\"327\":7,\"330\":2,\"331\":3,\"332\":5,\"335\":1,\"336\":2,\"337\":2,\"338\":3,\"341\":1,\"342\":2,\"343\":1,\"346\":3,\"347\":2,\"348\":3,\"351\":3,\"352\":2,\"353\":3,\"357\":2,\"358\":2,\"361\":1,\"362\":2,\"363\":2,\"366\":2,\"367\":2,\"368\":1,\"371\":1,\"372\":2,\"373\":1,\"376\":9,\"378\":2,\"383\":2,\"388\":2,\"393\":2,\"398\":2,\"403\":2,\"408\":3,\"409\":1,\"410\":2,\"413\":2,\"415\":1,\"418\":2,\"420\":1,\"424\":1,\"426\":2,\"427\":3,\"429\":2,\"432\":5,\"434\":2,\"437\":1,\"442\":1,\"451\":5,\"456\":5,\"461\":4,\"466\":4}}],[\"logs\",{\"0\":{\"8\":1,\"34\":1},\"1\":{\"7\":1,\"8\":1,\"9\":2,\"10\":2,\"12\":2,\"13\":2,\"16\":1,\"17\":4,\"18\":2,\"20\":1,\"25\":1,\"26\":8,\"27\":6,\"28\":1,\"34\":8,\"35\":1,\"36\":1,\"38\":1,\"40\":1,\"42\":2,\"43\":7,\"46\":2,\"55\":4,\"57\":1,\"58\":7,\"61\":1,\"81\":3,\"82\":3,\"84\":1,\"86\":6,\"88\":1,\"89\":1,\"90\":10,\"91\":5,\"92\":2,\"93\":2,\"95\":1,\"96\":4,\"103\":8,\"104\":1,\"123\":3,\"135\":7,\"136\":5,\"137\":1,\"139\":3,\"140\":1,\"142\":1,\"153\":3,\"155\":1,\"156\":1,\"175\":1,\"179\":1,\"180\":1,\"183\":1,\"196\":1,\"199\":1,\"202\":1,\"208\":1,\"215\":1,\"227\":2,\"228\":1,\"236\":4,\"238\":1,\"239\":2,\"240\":1,\"280\":1,\"285\":1,\"290\":1,\"298\":2,\"303\":2,\"308\":1,\"318\":1,\"327\":1,\"330\":2,\"356\":1,\"366\":1,\"378\":1,\"415\":1,\"420\":1,\"447\":3,\"449\":1,\"454\":1,\"459\":1,\"464\":1,\"469\":2}}],[\"literal\",{\"1\":{\"376\":1}}],[\"linked\",{\"1\":{\"318\":1}}],[\"line\",{\"0\":{\"55\":1},\"1\":{\"55\":4,\"88\":1}}],[\"linear\",{\"1\":{\"32\":1,\"108\":1,\"116\":7,\"429\":1}}],[\"license\",{\"1\":{\"94\":1}}],[\"limited\",{\"1\":{\"58\":1}}],[\"limitation\",{\"1\":{\"3\":1}}],[\"lived\",{\"1\":{\"55\":2}}],[\"lib\",{\"1\":{\"50\":1,\"51\":1}}],[\"libraries\",{\"1\":{\"18\":2,\"55\":1,\"58\":3,\"91\":1,\"98\":1,\"240\":1}}],[\"library\",{\"1\":{\"0\":1,\"7\":1,\"18\":3,\"23\":1,\"24\":1,\"55\":3,\"57\":2,\"87\":1,\"100\":1,\"117\":1,\"133\":1,\"228\":2,\"290\":1}}],[\"lifecycle\",{\"0\":{\"19\":1,\"224\":1,\"225\":1,\"226\":1,\"246\":1},\"1\":{\"16\":2,\"17\":1,\"42\":1,\"103\":1,\"225\":2,\"227\":1,\"240\":1,\"246\":2}}],[\"liking\",{\"1\":{\"15\":1}}],[\"like\",{\"0\":{\"60\":1},\"1\":{\"4\":1,\"8\":2,\"9\":2,\"12\":2,\"23\":1,\"24\":1,\"26\":1,\"38\":1,\"55\":3,\"58\":1,\"60\":1,\"61\":1,\"69\":1,\"81\":1,\"84\":2,\"87\":1,\"91\":1,\"99\":1,\"358\":1,\"471\":1}}],[\"listed\",{\"1\":{\"246\":1}}],[\"listens\",{\"1\":{\"215\":1}}],[\"listen\",{\"1\":{\"82\":1,\"327\":1}}],[\"listener\",{\"0\":{\"327\":1,\"328\":1,\"329\":1},\"1\":{\"17\":3,\"135\":3,\"171\":1,\"173\":1,\"183\":2,\"215\":3,\"216\":1,\"218\":1,\"221\":1,\"290\":1,\"323\":1,\"330\":1}}],[\"listeners\",{\"0\":{\"17\":1},\"1\":{\"15\":1,\"17\":5,\"18\":1,\"42\":1,\"58\":1,\"62\":1,\"72\":1,\"103\":1,\"104\":1,\"181\":1,\"202\":1,\"225\":1,\"327\":1,\"336\":1}}],[\"list\",{\"1\":{\"6\":2,\"37\":1,\"55\":2,\"115\":1,\"117\":1}}],[\"nice\",{\"1\":{\"61\":1}}],[\"nine\",{\"1\":{\"24\":1}}],[\"narrow\",{\"1\":{\"447\":1}}],[\"natural\",{\"1\":{\"92\":1}}],[\"nature\",{\"1\":{\"58\":1,\"330\":1}}],[\"named\",{\"0\":{\"57\":1},\"1\":{\"32\":2,\"62\":1,\"75\":1,\"76\":1,\"77\":1,\"90\":1,\"117\":1,\"211\":1}}],[\"names\",{\"1\":{\"17\":1,\"26\":1,\"103\":1}}],[\"namespaced\",{\"1\":{\"175\":1,\"179\":1}}],[\"namespaces\",{\"0\":{\"9\":1,\"35\":1,\"37\":1,\"335\":1},\"1\":{\"8\":1,\"9\":1,\"10\":2,\"12\":1,\"33\":2,\"35\":3,\"36\":3,\"37\":6,\"38\":1,\"58\":1,\"90\":1,\"125\":1,\"330\":2,\"332\":1,\"335\":3,\"454\":1}}],[\"namespace\",{\"0\":{\"330\":1},\"1\":{\"6\":1,\"9\":3,\"10\":2,\"33\":1,\"34\":1,\"37\":2,\"60\":2,\"61\":2,\"82\":1,\"90\":2,\"103\":1,\"123\":1,\"124\":1,\"125\":1,\"233\":1,\"239\":1,\"330\":2,\"331\":1,\"332\":5,\"335\":4,\"455\":1}}],[\"name\",{\"1\":{\"2\":1,\"10\":1,\"14\":1,\"28\":3,\"29\":1,\"30\":1,\"31\":1,\"57\":1,\"103\":1,\"111\":1,\"116\":1,\"118\":1,\"119\":1,\"135\":3,\"141\":3,\"142\":4,\"172\":1,\"174\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"228\":1,\"248\":3,\"249\":3,\"250\":1,\"251\":1,\"253\":1,\"254\":1,\"319\":1,\"326\":1,\"376\":2,\"449\":1}}],[\"n\",{\"1\":{\"14\":1}}],[\"nuxtjs\",{\"1\":{\"99\":1}}],[\"null\",{\"1\":{\"10\":1,\"271\":1}}],[\"number\",{\"1\":{\"10\":4,\"14\":1,\"17\":1,\"34\":2,\"55\":1,\"79\":1,\"80\":2,\"87\":4,\"90\":1,\"102\":2,\"103\":1,\"107\":1,\"134\":4,\"142\":2,\"172\":1,\"174\":1,\"197\":1,\"216\":1,\"219\":1,\"222\":1,\"263\":4,\"290\":4,\"444\":4}}],[\"numbers\",{\"0\":{\"55\":1},\"1\":{\"10\":2,\"55\":3,\"115\":1}}],[\"ns\",{\"0\":{\"330\":1},\"1\":{\"9\":3,\"10\":4,\"12\":2,\"13\":2,\"35\":4,\"37\":1,\"44\":2,\"82\":2,\"86\":1,\"90\":1,\"125\":3,\"175\":1,\"179\":1,\"233\":1,\"330\":1,\"331\":3,\"332\":5,\"335\":1,\"434\":1,\"456\":2}}],[\"npmjs\",{\"1\":{\"7\":1}}],[\"npm\",{\"1\":{\"6\":1,\"7\":1,\"48\":3,\"95\":3}}],[\"never\",{\"1\":{\"33\":1,\"142\":1}}],[\"needed\",{\"1\":{\"239\":1}}],[\"needing\",{\"1\":{\"236\":1}}],[\"needs\",{\"1\":{\"32\":1,\"128\":1,\"136\":1}}],[\"need\",{\"1\":{\"26\":1,\"50\":2,\"55\":2,\"87\":1,\"230\":1,\"236\":1,\"245\":1,\"415\":1,\"420\":1}}],[\"nearly\",{\"1\":{\"18\":1}}],[\"necessary\",{\"1\":{\"16\":1,\"17\":1,\"156\":1,\"166\":1}}],[\"nextjs\",{\"1\":{\"99\":1}}],[\"next\",{\"1\":{\"16\":1,\"166\":1}}],[\"network\",{\"1\":{\"15\":1,\"26\":2,\"155\":1,\"398\":1,\"403\":1}}],[\"nested\",{\"1\":{\"298\":1,\"303\":1}}],[\"nest\",{\"1\":{\"4\":3}}],[\"nestjs\",{\"0\":{\"1\":1},\"1\":{\"2\":1,\"3\":1,\"4\":1,\"5\":1}}],[\"newly\",{\"1\":{\"287\":1}}],[\"newcontent\",{\"1\":{\"287\":2}}],[\"newdiv\",{\"1\":{\"287\":4}}],[\"new\",{\"0\":{\"78\":1},\"1\":{\"4\":1,\"12\":1,\"16\":1,\"32\":3,\"62\":1,\"77\":1,\"78\":1,\"82\":1,\"84\":3,\"86\":2,\"145\":1,\"148\":1,\"151\":1,\"205\":2,\"226\":1,\"228\":1,\"230\":1,\"245\":1,\"250\":1,\"287\":1,\"335\":2,\"376\":1,\"432\":2}}],[\"nobody\",{\"1\":{\"338\":1}}],[\"normally\",{\"1\":{\"43\":1,\"432\":1}}],[\"noise\",{\"1\":{\"36\":1}}],[\"none\",{\"1\":{\"58\":1}}],[\"non\",{\"1\":{\"26\":1,\"55\":1,\"398\":1}}],[\"now\",{\"0\":{\"75\":1},\"1\":{\"14\":1,\"15\":1,\"16\":1,\"25\":1,\"27\":2,\"32\":1,\"37\":1,\"55\":1,\"62\":4,\"63\":1,\"72\":1,\"75\":1,\"78\":1,\"82\":1,\"84\":2,\"88\":1,\"90\":3,\"235\":1,\"255\":1,\"335\":1}}],[\"no\",{\"1\":{\"13\":1,\"26\":1,\"31\":1,\"43\":1,\"44\":1,\"55\":1,\"62\":1,\"69\":1,\"83\":1,\"92\":1,\"95\":1,\"273\":1,\"303\":1,\"308\":1,\"418\":1}}],[\"node\",{\"1\":{\"4\":7,\"43\":1,\"49\":2,\"50\":1,\"58\":1,\"244\":2,\"287\":1}}],[\"note\",{\"1\":{\"116\":1,\"205\":1}}],[\"notes\",{\"1\":{\"49\":1}}],[\"notify\",{\"1\":{\"82\":1}}],[\"notification\",{\"1\":{\"17\":1,\"82\":1}}],[\"noticed\",{\"1\":{\"84\":1}}],[\"notice\",{\"1\":{\"10\":1,\"13\":1,\"17\":1,\"31\":1,\"46\":1,\"86\":1,\"88\":1,\"115\":1}}],[\"not\",{\"0\":{\"69\":1},\"1\":{\"2\":1,\"3\":1,\"9\":1,\"10\":1,\"26\":4,\"31\":2,\"34\":1,\"35\":4,\"37\":1,\"38\":6,\"40\":6,\"43\":1,\"46\":1,\"58\":1,\"70\":1,\"86\":2,\"88\":1,\"91\":1,\"103\":1,\"104\":1,\"123\":1,\"125\":3,\"153\":1,\"156\":1,\"160\":1,\"166\":1,\"214\":1,\"224\":1,\"227\":1,\"258\":4,\"261\":1,\"271\":1,\"288\":1,\"293\":1,\"303\":1,\"313\":1,\"315\":2,\"318\":1,\"323\":1,\"330\":3,\"335\":2,\"336\":1,\"356\":2,\"361\":1,\"371\":1,\"378\":1,\"393\":1,\"398\":2,\"403\":1,\"413\":1,\"418\":1,\"427\":1,\"432\":1,\"437\":1,\"442\":1,\"469\":1,\"472\":1}}],[\"danger\",{\"1\":{\"235\":1}}],[\"date\",{\"1\":{\"80\":2,\"102\":2,\"103\":1,\"129\":2,\"130\":2,\"162\":4,\"163\":2}}],[\"database\",{\"1\":{\"15\":1,\"16\":1}}],[\"data\",{\"0\":{\"15\":1,\"171\":1,\"172\":1},\"1\":{\"9\":2,\"10\":1,\"15\":3,\"16\":3,\"17\":2,\"18\":1,\"27\":1,\"28\":3,\"31\":1,\"58\":3,\"73\":1,\"81\":2,\"84\":1,\"87\":3,\"88\":1,\"91\":1,\"103\":2,\"105\":1,\"123\":1,\"140\":1,\"142\":1,\"143\":1,\"144\":1,\"147\":1,\"150\":1,\"156\":2,\"162\":2,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"171\":4,\"172\":3,\"173\":2,\"174\":2,\"189\":1,\"224\":1,\"227\":1,\"232\":3,\"240\":1,\"244\":1,\"247\":1,\"248\":4,\"249\":4,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"290\":3,\"323\":2,\"325\":1,\"327\":3,\"343\":2,\"376\":1,\"448\":1}}],[\"d9dce0\",{\"1\":{\"116\":2}}],[\"d8ebff\",{\"1\":{\"116\":1}}],[\"due\",{\"1\":{\"115\":1}}],[\"during\",{\"1\":{\"103\":1,\"247\":1}}],[\"dumping\",{\"1\":{\"263\":1}}],[\"dump\",{\"0\":{\"288\":1},\"1\":{\"80\":1,\"87\":1,\"88\":2,\"102\":1,\"103\":1,\"233\":1,\"263\":2,\"289\":1,\"290\":1,\"442\":1,\"444\":1}}],[\"drawback\",{\"1\":{\"36\":1}}],[\"dynamic\",{\"1\":{\"5\":1}}],[\"deliberately\",{\"1\":{\"271\":1,\"275\":1}}],[\"deleting\",{\"1\":{\"261\":1}}],[\"demo\",{\"1\":{\"205\":1}}],[\"declaring\",{\"1\":{\"142\":2}}],[\"decide\",{\"1\":{\"27\":1}}],[\"detects\",{\"1\":{\"142\":1}}],[\"determine\",{\"1\":{\"123\":1}}],[\"details\",{\"1\":{\"44\":2,\"97\":1,\"224\":1,\"280\":1,\"285\":1,\"427\":1}}],[\"detailed\",{\"1\":{\"26\":1,\"235\":1,\"418\":1,\"447\":1}}],[\"detail\",{\"1\":{\"26\":1,\"81\":1,\"100\":1,\"420\":2}}],[\"desired\",{\"1\":{\"376\":1}}],[\"desire\",{\"1\":{\"128\":1}}],[\"design\",{\"1\":{\"100\":1}}],[\"description\",{\"1\":{\"103\":1,\"136\":1,\"163\":1,\"172\":1,\"174\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"376\":1}}],[\"descriptions\",{\"0\":{\"103\":1}}],[\"destination\",{\"1\":{\"16\":1}}],[\"deploy\",{\"1\":{\"238\":1}}],[\"deprecated\",{\"1\":{\"235\":1}}],[\"dependent\",{\"1\":{\"288\":1,\"346\":1,\"351\":1,\"356\":1}}],[\"dependency\",{\"1\":{\"49\":1,\"244\":1,\"255\":1}}],[\"dependencies\",{\"0\":{\"243\":1},\"1\":{\"16\":3,\"50\":1,\"84\":2,\"243\":5,\"244\":2}}],[\"depending\",{\"1\":{\"161\":1}}],[\"depth\",{\"1\":{\"84\":1,\"96\":1,\"180\":1,\"181\":1}}],[\"deeper\",{\"1\":{\"81\":1}}],[\"deno\",{\"1\":{\"43\":1,\"49\":2,\"58\":2}}],[\"deal\",{\"1\":{\"34\":1}}],[\"defining\",{\"1\":{\"46\":1}}],[\"defineproperty\",{\"1\":{\"151\":1}}],[\"defined\",{\"1\":{\"103\":1,\"164\":1,\"172\":1,\"427\":1}}],[\"define\",{\"1\":{\"10\":1,\"246\":1,\"335\":1}}],[\"defaults\",{\"1\":{\"100\":1}}],[\"default\",{\"0\":{\"111\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1},\"1\":{\"16\":1,\"17\":1,\"24\":1,\"26\":5,\"27\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":2,\"82\":2,\"84\":1,\"86\":1,\"90\":4,\"93\":1,\"103\":1,\"106\":2,\"111\":2,\"114\":4,\"115\":2,\"116\":1,\"119\":2,\"128\":1,\"136\":1,\"137\":1,\"141\":1,\"164\":1,\"178\":2,\"228\":1,\"241\":2,\"376\":2,\"377\":1,\"378\":1,\"383\":1,\"388\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"413\":2,\"418\":1}}],[\"debugging\",{\"1\":{\"26\":2,\"36\":1,\"43\":1,\"44\":1,\"55\":3,\"413\":1,\"415\":2,\"418\":1,\"471\":1}}],[\"debug\",{\"0\":{\"413\":1},\"1\":{\"4\":2,\"26\":2,\"40\":1,\"44\":2,\"46\":1,\"80\":1,\"102\":1,\"116\":1,\"118\":1,\"119\":1,\"141\":3,\"234\":1,\"376\":3,\"413\":1,\"414\":1,\"415\":4,\"418\":1}}],[\"developer\",{\"1\":{\"90\":2,\"98\":1,\"123\":1,\"165\":1}}],[\"developers\",{\"1\":{\"37\":1,\"89\":1,\"91\":1}}],[\"development\",{\"1\":{\"82\":1}}],[\"dev\",{\"1\":{\"4\":1,\"82\":1,\"238\":1,\"447\":1}}],[\"dirxml\",{\"0\":{\"285\":1,\"286\":1},\"1\":{\"233\":1,\"285\":3,\"286\":1,\"287\":1}}],[\"dir\",{\"0\":{\"280\":1},\"1\":{\"233\":1,\"280\":3,\"281\":1,\"282\":1}}],[\"directing\",{\"1\":{\"280\":1,\"285\":1,\"341\":1}}],[\"directory\",{\"1\":{\"16\":1,\"82\":1,\"86\":1}}],[\"directly\",{\"1\":{\"3\":1,\"58\":1}}],[\"div\",{\"1\":{\"287\":3}}],[\"diving\",{\"1\":{\"225\":1}}],[\"dive\",{\"1\":{\"81\":1}}],[\"diagnostic\",{\"1\":{\"87\":2,\"442\":1}}],[\"diagram\",{\"0\":{\"226\":1},\"1\":{\"20\":1,\"42\":1}}],[\"disable\",{\"1\":{\"469\":1}}],[\"disabled\",{\"1\":{\"90\":1}}],[\"disk\",{\"1\":{\"290\":1}}],[\"discovered\",{\"1\":{\"62\":1}}],[\"dist\",{\"1\":{\"2\":2,\"4\":1}}],[\"difficult\",{\"1\":{\"34\":1}}],[\"differences\",{\"1\":{\"62\":1}}],[\"different\",{\"1\":{\"26\":1,\"52\":1,\"87\":1,\"115\":1,\"423\":1}}],[\"differ\",{\"1\":{\"12\":1,\"280\":1,\"285\":1}}],[\"don\",{\"1\":{\"205\":1,\"241\":1}}],[\"done\",{\"1\":{\"203\":1}}],[\"downside\",{\"1\":{\"236\":1}}],[\"down\",{\"1\":{\"142\":1,\"447\":1}}],[\"docs\",{\"1\":{\"50\":1,\"91\":1,\"115\":1,\"256\":1,\"266\":1,\"275\":1,\"280\":2,\"285\":2,\"298\":1,\"303\":1,\"308\":1,\"341\":1,\"346\":1,\"351\":1,\"366\":1,\"383\":1,\"388\":1,\"393\":1,\"408\":1,\"413\":1,\"424\":1}}],[\"documented\",{\"1\":{\"62\":1}}],[\"documentation\",{\"1\":{\"23\":1,\"107\":1,\"117\":1,\"224\":1}}],[\"document\",{\"1\":{\"0\":1,\"287\":2}}],[\"dom\",{\"1\":{\"50\":1,\"51\":1,\"285\":2}}],[\"doing\",{\"1\":{\"12\":1,\"13\":1,\"84\":1,\"145\":1}}],[\"dotenloop\",{\"1\":{\"13\":2,\"14\":1}}],[\"doten\",{\"1\":{\"12\":2,\"13\":2}}],[\"do\",{\"1\":{\"10\":1,\"17\":3,\"18\":1,\"26\":3,\"35\":1,\"36\":1,\"38\":1,\"73\":1,\"74\":1,\"81\":1,\"91\":1,\"105\":1,\"115\":1,\"125\":1,\"135\":6,\"160\":1,\"173\":1,\"183\":1,\"205\":1,\"214\":2,\"217\":1,\"220\":1,\"223\":1,\"290\":1,\"330\":1,\"348\":1,\"353\":1,\"358\":1,\"398\":1,\"413\":1,\"469\":1}}],[\"doesn\",{\"1\":{\"26\":1,\"43\":1,\"55\":1,\"408\":1}}],[\"does\",{\"0\":{\"43\":1,\"60\":1},\"1\":{\"3\":1,\"12\":1,\"13\":1,\"26\":1,\"84\":1,\"88\":1,\"91\":1,\"104\":1,\"153\":1,\"156\":1,\"258\":3,\"315\":1,\"330\":1,\"393\":1}}],[\"mdn\",{\"1\":{\"115\":1,\"256\":1,\"266\":1,\"275\":1,\"280\":2,\"285\":2,\"298\":1,\"303\":1,\"308\":1,\"341\":1,\"346\":1,\"351\":1,\"366\":1,\"383\":1,\"388\":1,\"393\":1,\"408\":1,\"413\":1,\"424\":1}}],[\"mdc\",{\"0\":{\"87\":1}}],[\"mfe\",{\"1\":{\"44\":2}}],[\"msg\",{\"1\":{\"31\":1}}],[\"mutated\",{\"1\":{\"250\":1}}],[\"multiple\",{\"1\":{\"43\":2,\"58\":1,\"87\":2,\"88\":1,\"93\":1,\"96\":1,\"142\":1,\"236\":1,\"280\":1,\"285\":1,\"330\":1,\"332\":2,\"376\":1,\"442\":1}}],[\"much\",{\"1\":{\"17\":1,\"18\":1,\"37\":1,\"58\":1,\"91\":1,\"143\":1,\"236\":1}}],[\"must\",{\"1\":{\"13\":1,\"16\":2,\"32\":1,\"90\":1,\"140\":1,\"148\":1,\"151\":1,\"169\":1,\"240\":1,\"243\":1,\"250\":1,\"346\":1,\"351\":1,\"376\":1}}],[\"mylevel\",{\"1\":{\"429\":4}}],[\"myapp\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"82\":1,\"86\":1,\"141\":2,\"326\":1}}],[\"my\",{\"1\":{\"8\":1,\"36\":1,\"61\":1,\"82\":6,\"268\":1,\"273\":4,\"277\":3,\"327\":1,\"429\":2,\"434\":2,\"471\":1}}],[\"m\",{\"1\":{\"8\":1,\"35\":3,\"38\":3,\"90\":2,\"390\":2}}],[\"milliseconds\",{\"1\":{\"142\":1}}],[\"minimum\",{\"1\":{\"141\":1}}],[\"mind\",{\"1\":{\"4\":1,\"86\":1,\"255\":1}}],[\"mix\",{\"1\":{\"93\":1}}],[\"mixed\",{\"1\":{\"43\":1}}],[\"migration\",{\"1\":{\"62\":1}}],[\"migrating\",{\"0\":{\"62\":1}}],[\"might\",{\"1\":{\"8\":1,\"9\":1,\"61\":1}}],[\"microfrontend\",{\"1\":{\"44\":2,\"96\":1}}],[\"microfrontends\",{\"1\":{\"43\":1}}],[\"micro\",{\"0\":{\"235\":1,\"236\":1},\"1\":{\"43\":1,\"58\":1,\"235\":5,\"236\":3}}],[\"missed\",{\"1\":{\"62\":1}}],[\"missing\",{\"1\":{\"28\":1}}],[\"mistake\",{\"1\":{\"13\":1}}],[\"middleware\",{\"0\":{\"16\":1,\"240\":1,\"245\":1},\"1\":{\"7\":1,\"15\":1,\"16\":12,\"17\":1,\"18\":1,\"19\":1,\"58\":1,\"80\":2,\"82\":2,\"86\":9,\"91\":1,\"102\":2,\"103\":4,\"171\":1,\"172\":1,\"225\":1,\"227\":1,\"240\":6,\"241\":7,\"242\":3,\"243\":4,\"244\":3,\"245\":3,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"336\":1}}],[\"mom\",{\"1\":{\"148\":1}}],[\"most\",{\"1\":{\"18\":1,\"26\":4,\"62\":1,\"83\":1,\"164\":1,\"228\":1,\"378\":1}}],[\"moving\",{\"1\":{\"15\":1}}],[\"monitoring\",{\"1\":{\"15\":1}}],[\"modern\",{\"1\":{\"99\":1}}],[\"modeled\",{\"1\":{\"91\":1}}],[\"modifies\",{\"1\":{\"174\":1}}],[\"modifiername\",{\"1\":{\"248\":1,\"249\":1}}],[\"modifierdata\",{\"0\":{\"174\":1},\"1\":{\"162\":2,\"166\":2,\"168\":2,\"171\":1,\"174\":1,\"175\":1,\"232\":1,\"248\":1,\"249\":1}}],[\"modifiers\",{\"0\":{\"23\":1,\"233\":1,\"255\":1},\"1\":{\"12\":1,\"20\":1,\"23\":4,\"24\":1,\"60\":1,\"81\":1,\"84\":2,\"101\":1,\"165\":1,\"167\":1,\"171\":1,\"232\":1,\"233\":1,\"255\":4,\"318\":2,\"376\":1}}],[\"modifier\",{\"0\":{\"30\":1},\"1\":{\"9\":3,\"12\":1,\"21\":2,\"22\":2,\"23\":1,\"28\":1,\"31\":1,\"33\":1,\"88\":1,\"140\":1,\"141\":1,\"165\":1,\"167\":1,\"174\":2,\"226\":3,\"227\":1,\"230\":1,\"248\":4,\"249\":4,\"256\":1,\"261\":1,\"266\":1,\"271\":2,\"275\":2,\"280\":2,\"285\":2,\"288\":2,\"293\":1,\"298\":1,\"303\":1,\"308\":1,\"313\":3,\"320\":1,\"323\":1,\"330\":3,\"336\":1,\"341\":1,\"346\":4,\"351\":4,\"356\":2,\"361\":1,\"366\":2,\"371\":1,\"442\":1}}],[\"modifying\",{\"1\":{\"106\":1,\"111\":1,\"202\":1}}],[\"modify\",{\"1\":{\"20\":1}}],[\"modules\",{\"1\":{\"3\":1}}],[\"module\",{\"0\":{\"4\":1},\"1\":{\"2\":1,\"4\":5,\"5\":1,\"36\":1,\"37\":1,\"82\":5}}],[\"more\",{\"1\":{\"5\":1,\"16\":1,\"17\":2,\"18\":1,\"24\":1,\"25\":1,\"26\":1,\"44\":2,\"50\":1,\"58\":1,\"84\":2,\"91\":1,\"97\":2,\"115\":1,\"133\":1,\"178\":1,\"180\":1,\"181\":1,\"226\":1,\"235\":1,\"255\":1,\"280\":1,\"285\":1,\"288\":1,\"330\":1,\"332\":1,\"442\":1}}],[\"measuring\",{\"1\":{\"356\":1}}],[\"measurement\",{\"1\":{\"346\":1,\"351\":1}}],[\"measurements\",{\"1\":{\"346\":1,\"351\":1}}],[\"meaning\",{\"1\":{\"58\":2}}],[\"meant\",{\"1\":{\"55\":1,\"240\":1}}],[\"meanwhile\",{\"1\":{\"44\":1}}],[\"mean\",{\"1\":{\"43\":1}}],[\"means\",{\"1\":{\"5\":1,\"43\":2,\"92\":1,\"96\":1,\"99\":1,\"236\":1,\"298\":1,\"303\":1}}],[\"memory\",{\"1\":{\"103\":1}}],[\"me\",{\"1\":{\"82\":1}}],[\"merge\",{\"1\":{\"43\":1}}],[\"meta<kv\",{\"1\":{\"324\":1}}],[\"meta<t>\",{\"1\":{\"324\":1}}],[\"meta<jsonlogoptionalfields>\",{\"1\":{\"141\":1,\"145\":1,\"148\":1,\"151\":1}}],[\"meta<jsonlogformatmeta>\",{\"1\":{\"30\":1,\"141\":1,\"326\":1}}],[\"meta\",{\"0\":{\"30\":1,\"323\":1},\"1\":{\"28\":5,\"29\":1,\"31\":1,\"58\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":2,\"84\":2,\"102\":1,\"103\":2,\"140\":2,\"141\":3,\"142\":2,\"143\":2,\"144\":1,\"147\":1,\"150\":1,\"156\":1,\"157\":1,\"233\":1,\"290\":1,\"323\":2,\"325\":2,\"327\":4}}],[\"methods\",{\"0\":{\"202\":1,\"230\":1,\"448\":1},\"1\":{\"15\":1,\"18\":1,\"20\":3,\"22\":1,\"23\":2,\"62\":1,\"66\":1,\"162\":1,\"224\":1,\"227\":1,\"243\":1,\"255\":1,\"376\":1,\"423\":1,\"447\":1}}],[\"method\",{\"1\":{\"5\":2,\"16\":4,\"17\":1,\"22\":2,\"24\":2,\"32\":1,\"84\":1,\"86\":2,\"107\":2,\"108\":1,\"111\":1,\"142\":1,\"148\":1,\"161\":2,\"164\":1,\"165\":3,\"166\":1,\"167\":3,\"168\":1,\"172\":2,\"174\":2,\"215\":1,\"218\":1,\"226\":5,\"227\":1,\"230\":1,\"243\":1,\"245\":1,\"271\":1,\"275\":1,\"280\":1,\"285\":1,\"323\":1,\"330\":1,\"341\":1,\"366\":1,\"376\":2,\"378\":1,\"383\":1,\"388\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"413\":1,\"418\":1,\"424\":1,\"429\":1,\"438\":1}}],[\"meet\",{\"1\":{\"18\":1,\"160\":1}}],[\"message\",{\"1\":{\"9\":1,\"16\":1,\"87\":1,\"142\":1,\"172\":1,\"174\":1,\"227\":1,\"250\":6,\"251\":3,\"252\":1,\"295\":1,\"325\":3,\"326\":1,\"327\":2,\"366\":2,\"410\":2}}],[\"magenta\",{\"1\":{\"111\":1}}],[\"maximum\",{\"1\":{\"90\":1,\"103\":2}}],[\"maths\",{\"1\":{\"87\":3,\"88\":3,\"444\":3}}],[\"matching\",{\"1\":{\"114\":1}}],[\"match\",{\"1\":{\"34\":2,\"90\":3,\"91\":1,\"93\":1,\"215\":1,\"449\":1,\"454\":1,\"459\":1}}],[\"mapped\",{\"1\":{\"87\":2,\"442\":1}}],[\"major\",{\"1\":{\"43\":1}}],[\"majority\",{\"1\":{\"26\":1}}],[\"machinereadable\",{\"1\":{\"79\":1}}],[\"machine\",{\"1\":{\"27\":1,\"28\":1,\"31\":1,\"58\":1,\"91\":2,\"93\":1,\"136\":1,\"139\":1,\"142\":1}}],[\"made\",{\"1\":{\"20\":1,\"148\":1}}],[\"manipulate\",{\"1\":{\"227\":1}}],[\"manner\",{\"1\":{\"33\":1,\"83\":1,\"137\":1}}],[\"manually\",{\"1\":{\"104\":1,\"142\":1,\"205\":1}}],[\"manual\",{\"1\":{\"16\":1,\"17\":1,\"23\":1,\"24\":1,\"81\":1,\"82\":1,\"97\":1,\"115\":1,\"224\":1,\"225\":1}}],[\"many\",{\"1\":{\"10\":1,\"26\":1,\"58\":1,\"87\":1}}],[\"may\",{\"1\":{\"12\":1,\"15\":1,\"25\":1,\"26\":1,\"62\":1,\"84\":1,\"114\":1,\"142\":1,\"235\":1,\"236\":1,\"243\":1,\"255\":1,\"280\":1,\"285\":1,\"388\":1,\"471\":1}}],[\"mainly\",{\"1\":{\"285\":1,\"330\":1}}],[\"maintain\",{\"1\":{\"57\":1}}],[\"maintained\",{\"1\":{\"6\":1}}],[\"main\",{\"1\":{\"4\":1}}],[\"makes\",{\"1\":{\"37\":1,\"84\":1,\"117\":1,\"271\":1,\"275\":1}}],[\"make\",{\"0\":{\"1\":1},\"1\":{\"31\":1,\"36\":1,\"50\":1,\"82\":1,\"86\":1,\"87\":1,\"115\":1,\"143\":1,\"151\":1,\"166\":1,\"168\":1,\"244\":1,\"245\":1,\"335\":1}}],[\"omitted\",{\"1\":{\"178\":1}}],[\"ok\",{\"1\":{\"151\":1}}],[\"old\",{\"1\":{\"76\":1}}],[\"oh\",{\"1\":{\"44\":1,\"92\":1,\"145\":1}}],[\"oops\",{\"1\":{\"28\":1}}],[\"others\",{\"1\":{\"423\":1}}],[\"otherwise\",{\"1\":{\"244\":1}}],[\"otherfile\",{\"1\":{\"61\":1}}],[\"other\",{\"0\":{\"423\":1},\"1\":{\"12\":2,\"13\":2,\"16\":1,\"17\":1,\"18\":2,\"24\":1,\"26\":3,\"36\":1,\"37\":1,\"43\":1,\"51\":1,\"58\":3,\"62\":1,\"82\":1,\"88\":1,\"91\":1,\"95\":1,\"98\":1,\"153\":1,\"181\":1,\"285\":1,\"310\":1,\"376\":1,\"398\":1,\"403\":1}}],[\"out\",{\"1\":{\"16\":1,\"32\":1,\"58\":1,\"93\":1,\"96\":1,\"136\":1,\"238\":1,\"285\":1,\"371\":1}}],[\"outputting\",{\"1\":{\"442\":1}}],[\"outputs\",{\"1\":{\"84\":1,\"469\":1}}],[\"output\",{\"0\":{\"10\":1,\"11\":1,\"13\":1,\"14\":1,\"28\":1,\"31\":1,\"33\":1,\"36\":1,\"39\":1,\"41\":1,\"45\":1,\"46\":1,\"85\":1,\"88\":1,\"109\":1,\"110\":1,\"112\":1,\"113\":1,\"121\":1,\"122\":1,\"126\":1,\"127\":1,\"131\":1,\"132\":1,\"138\":1,\"146\":1,\"149\":1,\"152\":1,\"154\":1,\"159\":1,\"176\":1,\"177\":1,\"187\":1,\"188\":1,\"259\":1,\"260\":1,\"264\":1,\"265\":1,\"269\":1,\"270\":1,\"274\":1,\"278\":1,\"279\":1,\"283\":1,\"284\":1,\"291\":1,\"292\":1,\"296\":1,\"297\":1,\"301\":1,\"302\":1,\"306\":1,\"307\":1,\"311\":1,\"312\":1,\"316\":1,\"317\":1,\"321\":1,\"322\":1,\"328\":1,\"329\":1,\"333\":1,\"334\":1,\"339\":1,\"340\":1,\"344\":1,\"345\":1,\"349\":1,\"350\":1,\"354\":1,\"355\":1,\"359\":1,\"360\":1,\"364\":1,\"365\":1,\"369\":1,\"370\":1,\"374\":1,\"375\":1,\"381\":1,\"382\":1,\"386\":1,\"387\":1,\"391\":1,\"392\":1,\"396\":1,\"397\":1,\"401\":1,\"402\":1,\"406\":1,\"407\":1,\"411\":1,\"412\":1,\"416\":1,\"417\":1,\"421\":1,\"422\":1,\"430\":1,\"431\":1,\"435\":1,\"436\":1,\"440\":1,\"441\":1,\"445\":1,\"446\":1,\"452\":1,\"453\":1,\"457\":1,\"458\":1,\"462\":1,\"463\":1,\"467\":1,\"468\":1},\"1\":{\"10\":1,\"14\":1,\"23\":1,\"25\":1,\"27\":1,\"46\":1,\"60\":1,\"61\":1,\"82\":1,\"88\":1,\"103\":2,\"115\":1,\"165\":1,\"167\":1,\"258\":1,\"280\":1,\"285\":1,\"315\":1,\"326\":1,\"341\":1,\"348\":1,\"353\":1,\"442\":1}}],[\"ourselves\",{\"1\":{\"10\":1}}],[\"our\",{\"1\":{\"8\":1,\"9\":6,\"10\":2,\"12\":1,\"13\":1,\"15\":6,\"16\":3,\"17\":1,\"24\":2,\"25\":1,\"26\":9,\"27\":3,\"28\":1,\"31\":1,\"32\":3,\"37\":4,\"38\":1,\"44\":1,\"46\":2,\"81\":6,\"82\":5,\"83\":1,\"84\":3,\"86\":9,\"87\":1,\"88\":1,\"90\":4,\"91\":2,\"141\":1,\"242\":1,\"243\":1,\"244\":3,\"245\":1,\"246\":1,\"263\":1,\"290\":1,\"300\":1,\"305\":1,\"310\":1,\"326\":1,\"335\":1,\"348\":2,\"353\":2,\"444\":1}}],[\"occuring\",{\"1\":{\"16\":1}}],[\"occurs\",{\"1\":{\"9\":1,\"55\":1,\"145\":1,\"298\":1,\"303\":1}}],[\"occurred\",{\"1\":{\"9\":2,\"10\":1,\"32\":1,\"44\":1,\"145\":1,\"385\":2}}],[\"org\",{\"1\":{\"50\":1,\"235\":1}}],[\"organization\",{\"1\":{\"6\":2}}],[\"ordering\",{\"1\":{\"26\":1}}],[\"order\",{\"1\":{\"13\":1,\"165\":1,\"167\":1,\"190\":1,\"236\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"271\":1,\"275\":1,\"320\":1,\"346\":1,\"351\":1}}],[\"or\",{\"1\":{\"10\":1,\"15\":1,\"16\":1,\"17\":3,\"18\":1,\"23\":1,\"26\":4,\"28\":1,\"34\":2,\"53\":1,\"58\":3,\"84\":1,\"87\":2,\"90\":1,\"93\":2,\"96\":1,\"97\":1,\"99\":1,\"101\":2,\"103\":1,\"104\":1,\"106\":1,\"114\":2,\"123\":2,\"133\":1,\"135\":2,\"136\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"153\":1,\"171\":1,\"174\":1,\"175\":1,\"178\":1,\"179\":1,\"184\":2,\"226\":1,\"227\":1,\"233\":1,\"240\":1,\"243\":1,\"250\":1,\"252\":1,\"255\":1,\"285\":1,\"290\":3,\"293\":1,\"323\":1,\"330\":1,\"335\":2,\"383\":1,\"398\":1,\"403\":1,\"427\":2}}],[\"original\",{\"1\":{\"62\":1}}],[\"originated\",{\"1\":{\"9\":1}}],[\"origin\",{\"1\":{\"10\":1}}],[\"objects\",{\"1\":{\"136\":1}}],[\"object\",{\"1\":{\"9\":2,\"10\":1,\"32\":1,\"62\":1,\"78\":1,\"90\":2,\"101\":1,\"103\":1,\"104\":1,\"142\":4,\"144\":2,\"147\":2,\"150\":2,\"151\":1,\"169\":1,\"171\":1,\"174\":2,\"178\":1,\"209\":1,\"211\":1,\"212\":1,\"232\":1,\"248\":1,\"249\":1,\"280\":1,\"285\":1,\"427\":1}}],[\"overloaded\",{\"1\":{\"324\":1}}],[\"overwrite\",{\"1\":{\"86\":1,\"330\":1}}],[\"overwritten\",{\"1\":{\"33\":1,\"46\":1}}],[\"overview\",{\"1\":{\"82\":1}}],[\"overridden\",{\"1\":{\"111\":2,\"114\":1}}],[\"overriding\",{\"1\":{\"44\":1,\"114\":1}}],[\"override\",{\"0\":{\"111\":1,\"471\":1},\"1\":{\"43\":1,\"104\":1,\"161\":1,\"163\":1,\"164\":1,\"178\":1,\"181\":1}}],[\"overrides\",{\"1\":{\"42\":1,\"44\":1,\"73\":1,\"74\":1,\"193\":1,\"195\":1,\"198\":1}}],[\"over\",{\"1\":{\"6\":1,\"15\":1,\"123\":1,\"236\":1}}],[\"opposite\",{\"1\":{\"313\":1}}],[\"optionally\",{\"1\":{\"327\":1}}],[\"optional\",{\"1\":{\"141\":1,\"142\":1,\"163\":1}}],[\"option\",{\"1\":{\"128\":1,\"142\":1}}],[\"options\",{\"1\":{\"3\":1,\"16\":1,\"51\":1,\"93\":1,\"241\":1}}],[\"operation\",{\"1\":{\"400\":2,\"405\":2}}],[\"operations\",{\"1\":{\"26\":1,\"403\":1}}],[\"operator\",{\"1\":{\"332\":1}}],[\"operates\",{\"1\":{\"241\":2}}],[\"operate\",{\"1\":{\"241\":1}}],[\"open\",{\"1\":{\"3\":1,\"62\":1,\"90\":1}}],[\"offers\",{\"1\":{\"34\":1,\"58\":1,\"60\":1}}],[\"officially\",{\"1\":{\"6\":1}}],[\"official\",{\"0\":{\"6\":1},\"1\":{\"6\":1}}],[\"often\",{\"1\":{\"8\":1,\"20\":1,\"34\":1,\"83\":1,\"87\":1,\"91\":1}}],[\"of\",{\"1\":{\"2\":1,\"3\":1,\"5\":2,\"7\":1,\"8\":2,\"10\":2,\"13\":1,\"14\":2,\"16\":2,\"17\":2,\"18\":2,\"20\":1,\"22\":1,\"23\":3,\"24\":3,\"25\":1,\"26\":6,\"28\":2,\"31\":1,\"34\":2,\"35\":1,\"36\":1,\"37\":6,\"42\":1,\"43\":12,\"44\":1,\"50\":1,\"52\":1,\"57\":1,\"58\":3,\"60\":3,\"61\":1,\"62\":2,\"75\":1,\"81\":1,\"82\":3,\"84\":2,\"86\":3,\"87\":4,\"88\":1,\"90\":6,\"91\":3,\"92\":1,\"93\":2,\"96\":1,\"98\":1,\"103\":8,\"106\":1,\"111\":1,\"114\":1,\"115\":2,\"117\":2,\"123\":1,\"133\":1,\"135\":2,\"136\":3,\"141\":1,\"142\":5,\"143\":2,\"153\":1,\"156\":1,\"161\":1,\"163\":2,\"164\":1,\"169\":1,\"171\":1,\"172\":4,\"174\":1,\"180\":2,\"181\":3,\"190\":1,\"215\":1,\"221\":1,\"224\":1,\"225\":3,\"226\":1,\"227\":1,\"228\":3,\"230\":2,\"235\":2,\"236\":3,\"238\":2,\"239\":1,\"240\":1,\"241\":1,\"243\":3,\"246\":1,\"247\":2,\"248\":2,\"249\":2,\"250\":3,\"251\":3,\"252\":1,\"253\":2,\"254\":2,\"255\":1,\"280\":1,\"285\":1,\"288\":1,\"298\":1,\"303\":1,\"313\":1,\"327\":2,\"335\":2,\"341\":1,\"348\":3,\"353\":3,\"356\":2,\"358\":1,\"371\":1,\"376\":3,\"378\":1,\"383\":1,\"408\":1,\"432\":3,\"447\":2,\"469\":2}}],[\"once\",{\"1\":{\"23\":1,\"255\":1}}],[\"ones\",{\"1\":{\"34\":1}}],[\"one\",{\"1\":{\"10\":1,\"12\":1,\"17\":3,\"24\":1,\"36\":1,\"43\":3,\"104\":1,\"133\":1,\"184\":1,\"236\":1,\"241\":1,\"243\":1,\"330\":1}}],[\"only\",{\"0\":{\"37\":1,\"326\":1},\"1\":{\"4\":1,\"12\":1,\"16\":3,\"17\":2,\"26\":4,\"34\":1,\"37\":1,\"46\":1,\"58\":2,\"62\":2,\"72\":1,\"86\":2,\"90\":1,\"103\":1,\"115\":1,\"123\":1,\"205\":1,\"214\":1,\"238\":1,\"241\":4,\"244\":1,\"256\":1,\"280\":2,\"285\":2,\"313\":1,\"327\":1,\"335\":1,\"341\":1,\"366\":1,\"371\":1,\"378\":2,\"469\":1}}],[\"on\",{\"1\":{\"0\":1,\"3\":1,\"6\":1,\"7\":1,\"16\":2,\"17\":2,\"23\":1,\"31\":1,\"34\":2,\"36\":1,\"43\":2,\"55\":1,\"58\":2,\"84\":1,\"87\":2,\"88\":1,\"90\":1,\"91\":2,\"98\":1,\"99\":1,\"115\":1,\"116\":1,\"123\":1,\"139\":1,\"142\":1,\"155\":1,\"161\":1,\"164\":1,\"178\":1,\"181\":1,\"184\":1,\"224\":1,\"227\":1,\"235\":1,\"243\":1,\"255\":2,\"323\":1,\"327\":1,\"447\":1}}],[\"elapsed\",{\"1\":{\"356\":1,\"358\":2}}],[\"element\",{\"1\":{\"285\":1,\"287\":1}}],[\"elements\",{\"1\":{\"285\":1}}],[\"else\",{\"1\":{\"173\":1}}],[\"elsewhere\",{\"1\":{\"17\":2,\"141\":1,\"244\":1}}],[\"ecedef\",{\"1\":{\"116\":1}}],[\"e6f6e4\",{\"1\":{\"116\":1}}],[\"e3d696\",{\"1\":{\"116\":1}}],[\"e3bbbb\",{\"1\":{\"32\":1,\"108\":1,\"116\":2,\"429\":1}}],[\"evaluated\",{\"1\":{\"103\":1,\"227\":1}}],[\"even\",{\"1\":{\"25\":1,\"31\":1,\"43\":1,\"46\":1,\"81\":1,\"93\":1,\"96\":1}}],[\"everything\",{\"1\":{\"44\":1,\"58\":1}}],[\"every\",{\"1\":{\"10\":1,\"16\":1,\"22\":1,\"26\":1,\"31\":2,\"84\":1,\"171\":1,\"201\":1,\"226\":1,\"230\":1}}],[\"etc\",{\"1\":{\"69\":1,\"224\":1}}],[\"eyes\",{\"1\":{\"58\":1}}],[\"emphasize\",{\"1\":{\"57\":1}}],[\"emoji\",{\"1\":{\"9\":1,\"31\":2,\"32\":1,\"61\":1,\"84\":1,\"92\":1,\"103\":1,\"107\":1,\"108\":1,\"111\":1,\"114\":1,\"116\":1,\"118\":1,\"120\":1,\"172\":2,\"174\":2,\"258\":1,\"315\":1,\"348\":1,\"353\":1,\"358\":1,\"371\":1,\"373\":1,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"415\":1,\"420\":1,\"429\":2}}],[\"edge\",{\"1\":{\"55\":1}}],[\"equivalents\",{\"1\":{\"226\":1}}],[\"equivalent\",{\"1\":{\"26\":1}}],[\"equals\",{\"1\":{\"315\":3}}],[\"equal\",{\"1\":{\"26\":1,\"258\":4,\"315\":1}}],[\"entry\",{\"1\":{\"332\":1}}],[\"entire\",{\"1\":{\"58\":1}}],[\"ensures\",{\"1\":{\"326\":1}}],[\"enabling\",{\"1\":{\"236\":1}}],[\"enabled\",{\"1\":{\"84\":1,\"203\":1,\"227\":1,\"258\":1,\"315\":1,\"358\":1,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"415\":1,\"420\":1}}],[\"enable\",{\"1\":{\"42\":1,\"43\":1,\"55\":1,\"90\":2}}],[\"enables\",{\"1\":{\"19\":1,\"55\":1,\"239\":1,\"318\":1}}],[\"env=test\",{\"1\":{\"471\":1}}],[\"env\",{\"1\":{\"82\":2,\"469\":1,\"470\":1,\"471\":2}}],[\"environments\",{\"1\":{\"16\":1,\"18\":1,\"27\":1,\"55\":2,\"58\":3,\"59\":1,\"81\":1,\"82\":1,\"90\":1,\"241\":3,\"243\":1,\"280\":1,\"285\":1,\"470\":1}}],[\"environment\",{\"0\":{\"241\":1},\"1\":{\"16\":3,\"43\":4,\"49\":3,\"58\":1,\"82\":2,\"91\":1,\"116\":1,\"153\":1,\"161\":1,\"165\":1,\"167\":1,\"238\":1,\"241\":2,\"242\":1,\"243\":1,\"244\":2,\"303\":1,\"469\":1}}],[\"encourage\",{\"1\":{\"50\":1}}],[\"enough\",{\"1\":{\"26\":1,\"418\":1}}],[\"ends\",{\"1\":{\"24\":1,\"308\":1,\"310\":1,\"351\":1}}],[\"ended\",{\"1\":{\"24\":1,\"227\":1}}],[\"end\",{\"1\":{\"20\":1,\"43\":1,\"60\":1,\"99\":2,\"234\":1,\"348\":1,\"353\":1}}],[\"enhance\",{\"1\":{\"10\":1}}],[\"either\",{\"1\":{\"15\":1,\"34\":2,\"58\":1,\"174\":1}}],[\"executing\",{\"1\":{\"469\":2}}],[\"execute\",{\"1\":{\"400\":2}}],[\"executed\",{\"1\":{\"59\":1,\"90\":1,\"99\":1,\"128\":1,\"174\":1}}],[\"executes\",{\"1\":{\"12\":1}}],[\"except\",{\"1\":{\"432\":1}}],[\"exception\",{\"1\":{\"142\":1,\"172\":1}}],[\"excellent\",{\"1\":{\"235\":1}}],[\"exclusively\",{\"1\":{\"86\":1}}],[\"excluded\",{\"1\":{\"38\":4}}],[\"exclude\",{\"1\":{\"34\":2,\"38\":1,\"123\":3,\"124\":1}}],[\"existing\",{\"1\":{\"58\":1,\"114\":1,\"218\":1}}],[\"exist\",{\"1\":{\"43\":1,\"55\":1,\"104\":1}}],[\"exists\",{\"1\":{\"43\":1,\"424\":1}}],[\"extension\",{\"1\":{\"235\":1}}],[\"extended\",{\"1\":{\"240\":3}}],[\"extends\",{\"1\":{\"18\":1,\"58\":1,\"86\":1,\"166\":1,\"168\":1,\"182\":1,\"242\":1,\"244\":1,\"324\":1}}],[\"extending\",{\"1\":{\"16\":1,\"160\":1,\"240\":1}}],[\"extreme\",{\"1\":{\"420\":2}}],[\"extremely\",{\"1\":{\"26\":1,\"418\":1}}],[\"extra\",{\"1\":{\"8\":1,\"99\":1,\"141\":1,\"156\":1}}],[\"examples\",{\"1\":{\"52\":1,\"228\":1}}],[\"example\",{\"0\":{\"10\":1,\"11\":1,\"13\":1,\"14\":1,\"21\":1,\"28\":1,\"31\":1,\"33\":1,\"36\":1,\"39\":1,\"41\":1,\"51\":1,\"64\":1,\"65\":1,\"67\":1,\"68\":1,\"70\":1,\"71\":1,\"73\":1,\"74\":1,\"76\":1,\"77\":1,\"79\":1,\"80\":1,\"82\":1,\"85\":1,\"88\":1,\"105\":1,\"108\":1,\"111\":1,\"120\":1,\"125\":1,\"130\":1,\"135\":1,\"141\":1,\"145\":1,\"146\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"154\":1,\"157\":1,\"159\":1,\"166\":1,\"168\":1,\"170\":1,\"173\":1,\"175\":1,\"179\":1,\"183\":1,\"186\":1,\"192\":1,\"195\":1,\"198\":1,\"201\":1,\"205\":1,\"208\":1,\"211\":1,\"214\":1,\"217\":1,\"220\":1,\"223\":1,\"229\":1,\"231\":1,\"237\":1,\"242\":1,\"244\":1,\"258\":1,\"263\":1,\"268\":1,\"273\":1,\"277\":1,\"282\":1,\"287\":1,\"290\":1,\"295\":1,\"300\":1,\"305\":1,\"310\":1,\"315\":1,\"320\":1,\"325\":1,\"326\":1,\"327\":1,\"332\":1,\"338\":1,\"343\":1,\"348\":1,\"353\":1,\"358\":1,\"363\":1,\"368\":1,\"373\":1,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"415\":1,\"420\":1,\"426\":1,\"429\":1,\"434\":1,\"439\":1,\"444\":1,\"451\":1,\"456\":1,\"461\":1,\"466\":1,\"470\":1},\"1\":{\"9\":2,\"16\":1,\"17\":1,\"23\":1,\"24\":1,\"35\":1,\"37\":2,\"38\":1,\"44\":1,\"46\":1,\"60\":3,\"61\":2,\"86\":3,\"87\":1,\"90\":1,\"91\":1,\"108\":1,\"148\":1,\"151\":2,\"214\":1,\"231\":1,\"439\":1}}],[\"explicitly\",{\"1\":{\"230\":1}}],[\"explanation\",{\"0\":{\"227\":1,\"238\":1},\"1\":{\"235\":1}}],[\"explain\",{\"1\":{\"100\":1}}],[\"exposes\",{\"1\":{\"117\":2,\"171\":1,\"423\":1}}],[\"exports\",{\"1\":{\"141\":1,\"156\":1,\"184\":1,\"240\":1}}],[\"exported\",{\"1\":{\"116\":1}}],[\"export\",{\"1\":{\"9\":2,\"10\":3,\"12\":1,\"13\":1,\"16\":1,\"17\":1,\"26\":2,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"61\":1,\"82\":1,\"84\":2,\"86\":2,\"90\":1,\"141\":1,\"142\":3,\"228\":1,\"242\":1,\"244\":1}}],[\"experience\",{\"1\":{\"98\":1}}],[\"experimental\",{\"0\":{\"4\":1},\"1\":{\"4\":6}}],[\"expression\",{\"1\":{\"55\":1,\"256\":2,\"257\":1,\"313\":2,\"314\":1}}],[\"earlier\",{\"1\":{\"90\":1}}],[\"easy\",{\"1\":{\"43\":1,\"55\":1,\"58\":1,\"60\":1,\"91\":1}}],[\"easier\",{\"1\":{\"37\":1,\"335\":1}}],[\"easiest\",{\"1\":{\"4\":1}}],[\"easily\",{\"1\":{\"26\":1,\"43\":1,\"96\":1,\"142\":1,\"418\":1}}],[\"each\",{\"1\":{\"5\":1,\"13\":1,\"46\":1,\"88\":1,\"100\":2,\"103\":2,\"106\":1,\"115\":1,\"119\":1,\"123\":1,\"128\":1,\"174\":1,\"238\":1,\"243\":1}}],[\"e\",{\"1\":{\"4\":3,\"9\":2,\"10\":1,\"439\":1}}],[\"especially\",{\"1\":{\"37\":1,\"330\":1}}],[\"es\",{\"1\":{\"2\":1,\"3\":1}}],[\"esmoduleinterop\",{\"1\":{\"50\":1,\"51\":1}}],[\"esm\",{\"0\":{\"54\":1},\"1\":{\"2\":1,\"5\":1}}],[\"err`failed\",{\"1\":{\"439\":1}}],[\"errmsg\",{\"1\":{\"145\":3}}],[\"err\",{\"1\":{\"2\":1,\"142\":1,\"143\":1,\"145\":1,\"437\":1,\"439\":1}}],[\"errors\",{\"1\":{\"16\":1,\"26\":5,\"378\":1,\"383\":2,\"398\":2,\"437\":2}}],[\"error\",{\"0\":{\"383\":1},\"1\":{\"2\":2,\"9\":9,\"10\":2,\"26\":4,\"28\":2,\"32\":3,\"44\":2,\"80\":1,\"84\":1,\"102\":1,\"111\":6,\"116\":1,\"118\":1,\"119\":1,\"135\":7,\"142\":3,\"144\":1,\"145\":4,\"166\":1,\"201\":2,\"234\":1,\"335\":1,\"376\":3,\"378\":1,\"383\":1,\"384\":1,\"385\":4,\"388\":1,\"439\":1}}],[\"fs\",{\"1\":{\"244\":5}}],[\"fc2323\",{\"1\":{\"116\":1}}],[\"fc8585\",{\"1\":{\"116\":1}}],[\"fun\",{\"1\":{\"82\":1}}],[\"functionality\",{\"1\":{\"18\":1,\"26\":1,\"62\":1,\"69\":1,\"81\":1,\"240\":1,\"383\":1}}],[\"functions\",{\"0\":{\"119\":1,\"143\":1},\"1\":{\"10\":1,\"12\":2,\"13\":1,\"17\":1,\"62\":1,\"88\":1,\"111\":1,\"116\":1,\"117\":1,\"143\":1,\"221\":1,\"224\":1,\"437\":1}}],[\"function\",{\"0\":{\"29\":1,\"44\":1,\"104\":1,\"120\":1,\"181\":1,\"184\":1},\"1\":{\"5\":2,\"8\":1,\"9\":6,\"10\":3,\"12\":3,\"13\":1,\"17\":1,\"28\":1,\"44\":1,\"62\":1,\"72\":1,\"84\":3,\"87\":2,\"103\":1,\"104\":2,\"119\":1,\"128\":2,\"140\":1,\"142\":5,\"144\":1,\"147\":1,\"150\":1,\"163\":1,\"164\":3,\"181\":5,\"182\":1,\"184\":2,\"185\":1,\"243\":1,\"244\":2,\"245\":1,\"263\":2,\"290\":2,\"335\":2,\"376\":1,\"427\":1,\"437\":2,\"444\":2}}],[\"ffe8e8\",{\"1\":{\"116\":1}}],[\"ff02f2\",{\"1\":{\"108\":1,\"429\":1}}],[\"ffcafc\",{\"1\":{\"108\":1,\"429\":1}}],[\"ffd1d1\",{\"1\":{\"32\":1,\"116\":2}}],[\"fff0a8\",{\"1\":{\"116\":1}}],[\"fff\",{\"1\":{\"32\":1,\"108\":1,\"116\":3,\"429\":1}}],[\"falsy\",{\"1\":{\"256\":1}}],[\"false\",{\"1\":{\"103\":5}}],[\"fake\",{\"1\":{\"151\":1}}],[\"factory\",{\"0\":{\"63\":1}}],[\"fairly\",{\"1\":{\"62\":1}}],[\"failed\",{\"1\":{\"400\":2}}],[\"fails\",{\"1\":{\"256\":1,\"315\":1}}],[\"fail\",{\"0\":{\"398\":1},\"1\":{\"26\":1,\"80\":1,\"102\":1,\"116\":1,\"118\":1,\"119\":1,\"125\":2,\"234\":1,\"335\":1,\"376\":1,\"399\":1,\"400\":2}}],[\"fatal\",{\"1\":{\"26\":2,\"383\":1,\"398\":1}}],[\"firefox\",{\"1\":{\"300\":1,\"305\":1,\"310\":1,\"366\":1}}],[\"firstname\",{\"1\":{\"343\":2}}],[\"first\",{\"1\":{\"10\":1,\"16\":2,\"17\":1,\"18\":1,\"28\":1,\"32\":1,\"58\":1,\"84\":1,\"90\":1,\"95\":1,\"166\":1,\"168\":1,\"241\":1,\"335\":1}}],[\"field\",{\"1\":{\"142\":1}}],[\"fields\",{\"1\":{\"28\":2,\"32\":1,\"141\":2}}],[\"fit\",{\"1\":{\"136\":1}}],[\"fits\",{\"1\":{\"42\":1}}],[\"final\",{\"1\":{\"346\":1,\"351\":1}}],[\"finalizes\",{\"1\":{\"227\":1}}],[\"finalized\",{\"1\":{\"172\":1}}],[\"finalize\",{\"1\":{\"22\":1}}],[\"find\",{\"1\":{\"34\":1,\"62\":1,\"368\":1,\"437\":1}}],[\"fill\",{\"1\":{\"156\":1,\"178\":1}}],[\"filling\",{\"1\":{\"32\":1,\"156\":1}}],[\"filterconfig<t\",{\"1\":{\"124\":1}}],[\"filterconfig<levelselector>\",{\"1\":{\"124\":1}}],[\"filterconfig\",{\"1\":{\"124\":2}}],[\"filterbylevel\",{\"0\":{\"459\":1},\"1\":{\"90\":1,\"133\":1,\"201\":1,\"460\":1,\"461\":1}}],[\"filterbylabel\",{\"0\":{\"449\":1},\"1\":{\"90\":1,\"450\":1,\"451\":1}}],[\"filterbynamespace\",{\"0\":{\"454\":1},\"1\":{\"90\":1,\"455\":1,\"456\":1}}],[\"filters\",{\"0\":{\"123\":1},\"1\":{\"35\":1,\"38\":1,\"40\":1,\"79\":1,\"80\":2,\"102\":2,\"103\":1,\"123\":1,\"124\":1,\"125\":1,\"133\":1}}],[\"filter\",{\"1\":{\"34\":3,\"35\":1,\"37\":1,\"38\":1,\"40\":1,\"81\":1,\"96\":1,\"123\":1,\"227\":1,\"335\":1}}],[\"filtering\",{\"0\":{\"34\":1,\"35\":1,\"38\":1,\"40\":1},\"1\":{\"34\":1,\"36\":2,\"38\":1,\"42\":1,\"58\":1,\"62\":1,\"81\":1,\"90\":3,\"91\":1,\"93\":1,\"103\":1,\"123\":1,\"139\":1,\"199\":1,\"330\":1}}],[\"filetransport\",{\"1\":{\"16\":3,\"82\":3,\"86\":3}}],[\"files\",{\"1\":{\"7\":1,\"82\":1,\"86\":2,\"136\":1}}],[\"file\",{\"0\":{\"7\":1},\"1\":{\"7\":3,\"8\":1,\"10\":2,\"15\":1,\"16\":8,\"82\":1,\"84\":2,\"86\":1,\"91\":1,\"153\":1,\"244\":1}}],[\"fix\",{\"1\":{\"13\":1}}],[\"feels\",{\"1\":{\"92\":1,\"98\":1}}],[\"few\",{\"1\":{\"18\":1,\"34\":1,\"52\":1,\"62\":1,\"423\":1}}],[\"fetching\",{\"1\":{\"9\":2,\"10\":1}}],[\"fetch\",{\"1\":{\"9\":5,\"10\":2,\"439\":2}}],[\"features\",{\"1\":{\"12\":1,\"58\":1,\"93\":1,\"228\":1,\"236\":1}}],[\"feature\",{\"1\":{\"4\":1,\"18\":1,\"58\":1,\"86\":1,\"87\":1,\"332\":1}}],[\"flag\",{\"0\":{\"4\":1},\"1\":{\"4\":1}}],[\"followed\",{\"1\":{\"346\":1}}],[\"follows\",{\"1\":{\"90\":1}}],[\"following\",{\"1\":{\"2\":1,\"6\":1,\"9\":1,\"25\":1,\"28\":2,\"48\":1,\"55\":1,\"60\":1,\"61\":1,\"81\":1,\"308\":1}}],[\"foo\",{\"1\":{\"35\":3,\"37\":2,\"38\":3,\"44\":2,\"90\":1,\"125\":3,\"148\":1,\"211\":3,\"214\":4,\"217\":1,\"220\":1,\"223\":1,\"263\":6,\"282\":1,\"290\":3,\"320\":3,\"332\":1,\"335\":3,\"451\":2,\"456\":2}}],[\"focused\",{\"1\":{\"91\":1,\"224\":1}}],[\"focus\",{\"1\":{\"34\":1,\"36\":1}}],[\"font\",{\"1\":{\"32\":1,\"108\":1,\"116\":9,\"429\":1}}],[\"four\",{\"1\":{\"27\":1,\"58\":1,\"103\":1,\"136\":1}}],[\"found\",{\"1\":{\"5\":1,\"472\":1}}],[\"forcing\",{\"1\":{\"46\":1}}],[\"forces\",{\"1\":{\"37\":1,\"271\":1,\"275\":1}}],[\"force\",{\"1\":{\"37\":1,\"335\":1}}],[\"forward\",{\"1\":{\"26\":1}}],[\"formatbrowser\",{\"0\":{\"165\":1},\"1\":{\"162\":1,\"165\":1,\"166\":1,\"168\":1}}],[\"formatting\",{\"1\":{\"81\":1,\"82\":1,\"93\":2,\"103\":1,\"117\":1,\"163\":1,\"164\":1,\"165\":2,\"167\":2,\"253\":1}}],[\"formatterconstructor>\",{\"1\":{\"80\":1,\"102\":1}}],[\"formatter\",{\"0\":{\"137\":1,\"139\":1,\"153\":1,\"155\":1,\"161\":1,\"169\":1},\"1\":{\"28\":1,\"31\":1,\"103\":2,\"136\":5,\"137\":2,\"139\":1,\"153\":2,\"155\":1,\"156\":2,\"160\":2,\"161\":4,\"162\":1,\"164\":3,\"166\":2,\"168\":2,\"169\":1,\"170\":1,\"250\":2,\"251\":2,\"293\":1,\"326\":1,\"371\":3}}],[\"formatters\",{\"0\":{\"136\":1,\"160\":1},\"1\":{\"27\":1,\"28\":1,\"80\":1,\"102\":1,\"103\":2,\"136\":1,\"160\":1,\"161\":2,\"169\":1,\"170\":2,\"172\":1,\"196\":1}}],[\"formatted\",{\"1\":{\"16\":1,\"27\":1,\"128\":1,\"140\":1,\"156\":1,\"163\":2,\"165\":1,\"167\":1,\"172\":1,\"174\":1,\"251\":1,\"254\":1,\"293\":1,\"295\":1}}],[\"formatserver\",{\"0\":{\"167\":1},\"1\":{\"162\":1,\"166\":1,\"167\":1,\"168\":1}}],[\"formats\",{\"1\":{\"58\":1,\"91\":1,\"137\":1}}],[\"format\",{\"0\":{\"293\":1},\"1\":{\"25\":1,\"27\":3,\"29\":2,\"30\":2,\"31\":2,\"44\":3,\"46\":3,\"58\":1,\"80\":1,\"82\":3,\"91\":2,\"93\":2,\"96\":1,\"102\":1,\"103\":2,\"128\":1,\"136\":3,\"137\":1,\"139\":1,\"141\":2,\"153\":1,\"155\":1,\"157\":1,\"170\":1,\"183\":1,\"195\":2,\"233\":1,\"250\":3,\"251\":3,\"293\":1,\"294\":2,\"295\":1,\"326\":1}}],[\"fortunately\",{\"1\":{\"10\":1}}],[\"for\",{\"1\":{\"3\":1,\"7\":1,\"8\":2,\"9\":3,\"10\":1,\"12\":4,\"13\":3,\"15\":3,\"16\":2,\"17\":4,\"18\":2,\"23\":2,\"24\":1,\"26\":12,\"27\":2,\"28\":3,\"32\":3,\"34\":1,\"37\":1,\"42\":2,\"44\":2,\"50\":1,\"55\":7,\"57\":3,\"58\":4,\"62\":2,\"69\":1,\"81\":3,\"82\":4,\"86\":3,\"89\":1,\"90\":2,\"91\":5,\"96\":3,\"97\":2,\"103\":3,\"104\":2,\"106\":1,\"107\":1,\"111\":1,\"114\":1,\"115\":3,\"117\":4,\"119\":1,\"136\":2,\"139\":2,\"141\":1,\"142\":4,\"143\":1,\"151\":1,\"153\":4,\"155\":2,\"156\":1,\"161\":1,\"163\":2,\"164\":1,\"165\":3,\"166\":1,\"167\":3,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"174\":1,\"178\":2,\"180\":2,\"181\":1,\"189\":1,\"199\":1,\"202\":1,\"205\":2,\"215\":1,\"224\":1,\"226\":1,\"227\":1,\"232\":1,\"235\":1,\"236\":3,\"238\":1,\"240\":5,\"242\":1,\"243\":4,\"244\":2,\"261\":1,\"268\":1,\"273\":1,\"277\":2,\"280\":2,\"285\":3,\"288\":1,\"293\":1,\"318\":1,\"330\":3,\"332\":2,\"335\":1,\"341\":1,\"346\":1,\"348\":2,\"351\":1,\"353\":2,\"356\":1,\"358\":2,\"366\":1,\"376\":2,\"378\":2,\"383\":1,\"388\":1,\"393\":1,\"398\":1,\"403\":1,\"408\":1,\"413\":1,\"418\":1,\"423\":1,\"424\":1,\"432\":1,\"437\":4,\"442\":2,\"447\":1,\"448\":1,\"469\":1,\"470\":1}}],[\"friendly\",{\"1\":{\"133\":1}}],[\"frameworks\",{\"1\":{\"58\":1,\"99\":1}}],[\"front\",{\"1\":{\"43\":1,\"99\":1}}],[\"frontends\",{\"0\":{\"235\":1},\"1\":{\"235\":3}}],[\"frontend\",{\"0\":{\"236\":1},\"1\":{\"43\":1,\"58\":1,\"96\":1,\"235\":2,\"236\":3}}],[\"from\",{\"0\":{\"62\":1,\"85\":1,\"328\":1,\"329\":1},\"1\":{\"2\":1,\"8\":1,\"9\":6,\"10\":3,\"12\":2,\"13\":1,\"15\":1,\"16\":3,\"17\":2,\"23\":1,\"25\":1,\"26\":6,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":4,\"35\":1,\"37\":3,\"38\":1,\"40\":1,\"43\":1,\"44\":3,\"48\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":2,\"64\":1,\"65\":1,\"67\":1,\"68\":1,\"70\":1,\"71\":1,\"73\":1,\"74\":1,\"76\":1,\"77\":1,\"82\":3,\"84\":5,\"86\":3,\"87\":4,\"88\":2,\"90\":5,\"95\":3,\"96\":1,\"98\":1,\"105\":1,\"108\":1,\"111\":1,\"116\":1,\"120\":1,\"125\":1,\"130\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":3,\"142\":8,\"145\":1,\"148\":1,\"151\":1,\"153\":1,\"157\":1,\"161\":1,\"164\":1,\"166\":1,\"168\":2,\"170\":2,\"171\":1,\"173\":1,\"175\":1,\"178\":2,\"179\":1,\"183\":1,\"186\":1,\"192\":1,\"195\":1,\"198\":1,\"201\":1,\"205\":1,\"208\":1,\"211\":1,\"214\":1,\"217\":1,\"218\":1,\"220\":1,\"223\":1,\"227\":1,\"229\":1,\"231\":1,\"232\":2,\"236\":1,\"242\":1,\"244\":2,\"245\":2,\"248\":1,\"249\":1,\"258\":1,\"261\":1,\"263\":2,\"268\":1,\"271\":2,\"273\":1,\"275\":1,\"277\":1,\"282\":1,\"287\":1,\"288\":1,\"290\":3,\"295\":1,\"300\":1,\"305\":1,\"310\":1,\"315\":1,\"320\":1,\"323\":1,\"325\":1,\"326\":1,\"327\":1,\"330\":1,\"332\":1,\"335\":1,\"336\":1,\"338\":1,\"343\":1,\"348\":1,\"353\":1,\"358\":1,\"363\":1,\"368\":1,\"373\":1,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"415\":1,\"420\":1,\"423\":1,\"426\":1,\"429\":1,\"434\":2,\"439\":2,\"442\":1,\"444\":2,\"447\":1,\"451\":1,\"456\":1,\"461\":1,\"466\":1}}],[\"frequency\",{\"1\":{\"16\":1}}],[\"frequently\",{\"0\":{\"0\":1},\"1\":{\"0\":1}}],[\"px\",{\"1\":{\"116\":5}}],[\"piece\",{\"1\":{\"356\":1}}],[\"picocolors\",{\"1\":{\"107\":1,\"117\":4}}],[\"pino\",{\"1\":{\"58\":1}}],[\"pid2\",{\"1\":{\"198\":1}}],[\"pid1\",{\"1\":{\"198\":1}}],[\"pid\",{\"0\":{\"196\":1},\"1\":{\"31\":1,\"196\":1,\"197\":1,\"198\":2}}],[\"put\",{\"1\":{\"244\":1}}],[\"putting\",{\"0\":{\"81\":1}}],[\"public\",{\"0\":{\"189\":1,\"202\":1,\"448\":1},\"1\":{\"162\":1,\"191\":1,\"194\":1,\"197\":1,\"200\":1,\"204\":1,\"207\":1,\"210\":1,\"213\":1,\"216\":1,\"219\":1,\"222\":1,\"232\":1,\"257\":1,\"262\":1,\"267\":1,\"272\":1,\"276\":1,\"281\":1,\"286\":1,\"289\":1,\"294\":1,\"299\":1,\"304\":1,\"309\":1,\"314\":1,\"319\":1,\"324\":2,\"331\":2,\"337\":1,\"342\":1,\"347\":1,\"352\":1,\"357\":1,\"362\":1,\"367\":1,\"372\":1,\"379\":1,\"384\":1,\"389\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"425\":2,\"428\":1,\"433\":1,\"438\":1,\"443\":1,\"450\":1,\"455\":1,\"460\":1,\"465\":1}}],[\"purpose\",{\"1\":{\"136\":1}}],[\"purposes\",{\"1\":{\"42\":1,\"43\":1,\"44\":1,\"55\":2,\"166\":1,\"205\":1,\"280\":1,\"285\":1,\"341\":1,\"423\":1}}],[\"purple\",{\"1\":{\"111\":2}}],[\"puns\",{\"1\":{\"57\":1}}],[\"pnpm\",{\"1\":{\"48\":2,\"95\":2}}],[\"performance\",{\"1\":{\"23\":1,\"26\":1,\"346\":1,\"348\":4,\"351\":1,\"353\":4,\"356\":2,\"358\":1,\"388\":1}}],[\"personal\",{\"1\":{\"2\":2}}],[\"platforms\",{\"1\":{\"153\":1}}],[\"place\",{\"1\":{\"92\":1,\"335\":1}}],[\"places\",{\"1\":{\"37\":1,\"133\":1}}],[\"play\",{\"1\":{\"26\":1}}],[\"please\",{\"1\":{\"16\":1,\"23\":1,\"24\":1,\"55\":1,\"62\":1,\"81\":1,\"91\":1,\"224\":1,\"235\":2}}],[\"plugin\",{\"1\":{\"7\":1,\"290\":1}}],[\"plugins\",{\"0\":{\"6\":1},\"1\":{\"6\":1,\"58\":1,\"227\":1}}],[\"point\",{\"1\":{\"227\":1}}],[\"points\",{\"1\":{\"16\":1,\"240\":1,\"246\":1,\"376\":1}}],[\"possible\",{\"1\":{\"115\":1}}],[\"post\",{\"1\":{\"5\":1,\"82\":1,\"142\":1,\"148\":1}}],[\"packaging\",{\"1\":{\"236\":1,\"238\":1}}],[\"package\",{\"0\":{\"48\":1},\"1\":{\"7\":1,\"16\":1}}],[\"pattern\",{\"1\":{\"235\":1}}],[\"painful\",{\"1\":{\"115\":1}}],[\"pairs\",{\"1\":{\"103\":2}}],[\"pair\",{\"1\":{\"88\":1,\"169\":1}}],[\"passes\",{\"1\":{\"258\":1,\"313\":1}}],[\"passed\",{\"1\":{\"141\":1}}],[\"password\",{\"1\":{\"148\":1}}],[\"pass\",{\"1\":{\"101\":1,\"290\":1}}],[\"passing\",{\"1\":{\"17\":1,\"111\":1,\"245\":1,\"335\":1,\"427\":1}}],[\"parsing\",{\"1\":{\"91\":1,\"139\":1}}],[\"parse\",{\"1\":{\"91\":1}}],[\"parent\",{\"1\":{\"84\":1,\"236\":6,\"238\":2,\"239\":1}}],[\"parameter\",{\"0\":{\"471\":1},\"1\":{\"37\":1,\"86\":1,\"241\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":2,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"335\":1,\"471\":1}}],[\"party\",{\"0\":{\"160\":1,\"169\":1},\"1\":{\"161\":1,\"169\":1}}],[\"particular\",{\"1\":{\"142\":1,\"356\":1}}],[\"particularly\",{\"1\":{\"36\":1}}],[\"partial<loglevels>\",{\"1\":{\"79\":1}}],[\"part\",{\"1\":{\"62\":1}}],[\"parts\",{\"1\":{\"20\":1}}],[\"padding\",{\"1\":{\"32\":1,\"108\":1,\"115\":2,\"116\":10,\"429\":1}}],[\"pay\",{\"1\":{\"16\":1}}],[\"pageload\",{\"1\":{\"21\":1,\"23\":1}}],[\"page\",{\"1\":{\"0\":1,\"16\":1,\"23\":1,\"24\":1,\"178\":1,\"181\":1,\"356\":2,\"358\":2,\"447\":1}}],[\"practices\",{\"0\":{\"239\":1}}],[\"practice\",{\"1\":{\"87\":1}}],[\"prior\",{\"1\":{\"253\":1}}],[\"priority\",{\"1\":{\"164\":1}}],[\"private\",{\"1\":{\"244\":2}}],[\"primarily\",{\"1\":{\"55\":1,\"155\":1,\"261\":1}}],[\"primary\",{\"1\":{\"42\":1,\"43\":1,\"100\":1,\"136\":1,\"181\":1}}],[\"prints\",{\"1\":{\"136\":4}}],[\"printing\",{\"1\":{\"46\":1,\"172\":1,\"174\":1,\"280\":1,\"285\":1,\"336\":1,\"341\":1}}],[\"printed\",{\"1\":{\"27\":1,\"34\":2,\"73\":1,\"166\":1,\"168\":1,\"172\":1,\"174\":1,\"227\":1,\"250\":1,\"251\":1,\"252\":1,\"254\":1,\"371\":1}}],[\"print\",{\"1\":{\"22\":1,\"35\":5,\"38\":5,\"40\":5,\"55\":1,\"87\":1,\"103\":3,\"123\":1,\"125\":4,\"172\":1,\"174\":1,\"253\":1,\"254\":1,\"256\":1,\"258\":1,\"288\":1,\"313\":1,\"315\":2,\"366\":1}}],[\"prerequisite\",{\"1\":{\"318\":1}}],[\"preceded\",{\"1\":{\"351\":1}}],[\"precedence\",{\"1\":{\"123\":1,\"236\":1}}],[\"precendence\",{\"1\":{\"178\":1}}],[\"presence\",{\"1\":{\"84\":1,\"255\":1}}],[\"present\",{\"1\":{\"58\":1,\"178\":1}}],[\"previous\",{\"1\":{\"90\":1,\"168\":1}}],[\"previously\",{\"1\":{\"62\":1,\"330\":1}}],[\"preview\",{\"0\":{\"59\":1},\"1\":{\"59\":1}}],[\"prevents\",{\"1\":{\"336\":1}}],[\"prevent\",{\"1\":{\"16\":1,\"37\":1,\"103\":1,\"236\":1,\"469\":1}}],[\"pretend\",{\"1\":{\"55\":1}}],[\"pretty\",{\"0\":{\"137\":1},\"1\":{\"27\":2,\"31\":1,\"43\":1,\"44\":1,\"46\":1,\"58\":1,\"82\":2,\"93\":1,\"103\":3,\"136\":3,\"137\":4,\"172\":1,\"174\":1,\"371\":1}}],[\"preferred\",{\"1\":{\"3\":1,\"103\":1}}],[\"pr\",{\"1\":{\"3\":1}}],[\"protected\",{\"1\":{\"162\":5,\"166\":1,\"168\":1,\"243\":2,\"244\":2}}],[\"promise\",{\"1\":{\"148\":1,\"151\":1}}],[\"proper\",{\"1\":{\"366\":1}}],[\"properties\",{\"0\":{\"163\":1},\"1\":{\"143\":1,\"156\":1,\"162\":1,\"172\":3,\"227\":1}}],[\"property\",{\"0\":{\"103\":1},\"1\":{\"100\":1,\"103\":1,\"106\":1,\"108\":1,\"114\":1,\"142\":1,\"163\":1,\"169\":1,\"170\":1,\"172\":1,\"174\":2,\"244\":1,\"427\":1}}],[\"properly\",{\"1\":{\"13\":1}}],[\"programs\",{\"1\":{\"91\":1}}],[\"progressively\",{\"1\":{\"10\":1}}],[\"pronounced\",{\"1\":{\"57\":1}}],[\"providing\",{\"1\":{\"43\":1,\"114\":1,\"241\":1}}],[\"provide\",{\"1\":{\"16\":2,\"18\":2,\"28\":1,\"34\":1,\"86\":1,\"123\":1,\"196\":1,\"224\":1}}],[\"provides\",{\"1\":{\"15\":1,\"18\":1,\"28\":1,\"37\":1,\"58\":1,\"81\":1,\"88\":1,\"92\":1,\"98\":1,\"143\":1,\"243\":1,\"376\":1}}],[\"provided\",{\"1\":{\"9\":3,\"10\":1,\"16\":1,\"90\":3,\"160\":1,\"165\":4,\"167\":4,\"172\":1,\"174\":1,\"178\":1,\"215\":1,\"335\":1,\"427\":1,\"449\":1,\"454\":1,\"459\":1}}],[\"processed\",{\"1\":{\"336\":1}}],[\"process\",{\"1\":{\"16\":1,\"90\":1,\"196\":1,\"227\":1}}],[\"production\",{\"0\":{\"82\":1},\"1\":{\"55\":2,\"58\":1,\"82\":1,\"142\":1,\"236\":2,\"238\":1}}],[\"prod\",{\"1\":{\"4\":1}}],[\"project\",{\"1\":{\"2\":1,\"8\":1,\"9\":1,\"43\":1,\"50\":1,\"62\":1,\"97\":1}}],[\"projects\",{\"1\":{\"2\":2}}],[\"problems\",{\"1\":{\"18\":1,\"26\":2,\"393\":1}}],[\"problem\",{\"0\":{\"2\":1},\"1\":{\"26\":1,\"55\":2,\"413\":1}}],[\"wrong\",{\"1\":{\"380\":2}}],[\"wrapper\",{\"1\":{\"55\":1}}],[\"wrap\",{\"1\":{\"55\":1}}],[\"wraps\",{\"1\":{\"18\":1,\"58\":1}}],[\"writing\",{\"1\":{\"10\":1,\"12\":1,\"26\":1,\"37\":1,\"92\":2,\"95\":1,\"153\":1,\"239\":1,\"432\":1}}],[\"writefile\",{\"1\":{\"244\":6}}],[\"write\",{\"1\":{\"9\":1,\"15\":1,\"32\":1,\"58\":1,\"82\":1,\"86\":2,\"90\":1,\"91\":1,\"244\":1,\"271\":1,\"275\":1,\"290\":1}}],[\"why\",{\"0\":{\"57\":1,\"58\":1},\"1\":{\"84\":1}}],[\"whatever\",{\"1\":{\"128\":1,\"250\":1}}],[\"what\",{\"0\":{\"60\":1,\"61\":1},\"1\":{\"10\":1,\"27\":1,\"34\":1,\"36\":1,\"43\":1,\"62\":1,\"84\":1,\"96\":1,\"235\":1,\"236\":1,\"335\":1,\"358\":1}}],[\"white\",{\"1\":{\"32\":1,\"108\":1,\"111\":1,\"118\":8,\"429\":1}}],[\"which\",{\"1\":{\"9\":1,\"10\":1,\"16\":1,\"18\":1,\"26\":1,\"37\":1,\"55\":2,\"88\":1,\"98\":1,\"99\":1,\"104\":1,\"184\":1,\"190\":1,\"227\":1,\"228\":1,\"280\":1,\"285\":1,\"327\":1,\"376\":1}}],[\"while\",{\"1\":{\"9\":2,\"10\":1,\"366\":1,\"469\":1}}],[\"whether\",{\"1\":{\"123\":1}}],[\"wheel\",{\"1\":{\"91\":1}}],[\"whereas\",{\"1\":{\"98\":1,\"227\":1}}],[\"where\",{\"1\":{\"8\":2,\"20\":1,\"26\":2,\"37\":2,\"38\":1,\"43\":2,\"55\":2,\"61\":1,\"87\":1,\"236\":1,\"442\":1}}],[\"when\",{\"1\":{\"2\":1,\"8\":2,\"9\":3,\"12\":1,\"16\":1,\"17\":2,\"18\":1,\"19\":1,\"24\":1,\"26\":4,\"28\":2,\"32\":1,\"34\":2,\"36\":1,\"49\":4,\"50\":1,\"82\":1,\"86\":1,\"87\":1,\"90\":1,\"91\":1,\"101\":2,\"103\":1,\"104\":2,\"114\":1,\"123\":1,\"140\":1,\"142\":1,\"165\":1,\"167\":1,\"171\":1,\"174\":1,\"184\":1,\"203\":1,\"227\":1,\"228\":1,\"238\":1,\"239\":1,\"241\":1,\"243\":1,\"246\":1,\"254\":1,\"271\":1,\"275\":1,\"330\":1,\"335\":5,\"376\":1,\"418\":1,\"469\":1,\"471\":1}}],[\"won\",{\"1\":{\"244\":1,\"451\":1,\"456\":1,\"461\":1}}],[\"wood\",{\"1\":{\"57\":1}}],[\"word\",{\"1\":{\"166\":1,\"168\":1}}],[\"world\",{\"1\":{\"53\":1,\"54\":1,\"84\":1,\"151\":1,\"325\":2,\"327\":1,\"335\":2}}],[\"workflow\",{\"1\":{\"225\":1}}],[\"works\",{\"1\":{\"18\":1,\"180\":1}}],[\"working\",{\"1\":{\"3\":1,\"34\":1,\"91\":1,\"330\":1}}],[\"work\",{\"0\":{\"1\":1,\"43\":1},\"1\":{\"4\":2,\"55\":1,\"58\":1,\"225\":1}}],[\"would\",{\"1\":{\"8\":1,\"9\":1,\"23\":1,\"26\":1,\"31\":1,\"43\":3,\"60\":1,\"61\":1,\"81\":1,\"432\":1,\"471\":1}}],[\"www\",{\"1\":{\"7\":1,\"50\":1,\"439\":1}}],[\"walkthrough\",{\"1\":{\"224\":1}}],[\"was\",{\"1\":{\"10\":1,\"13\":1,\"14\":1,\"22\":1,\"55\":1,\"57\":1,\"59\":1,\"61\":1,\"76\":1,\"115\":1,\"172\":1,\"174\":1,\"248\":1,\"249\":1,\"251\":1,\"271\":2,\"275\":2,\"405\":2}}],[\"warning\",{\"1\":{\"26\":1,\"32\":1,\"62\":1,\"271\":1,\"275\":1,\"280\":1,\"285\":1,\"303\":1,\"366\":1,\"390\":2}}],[\"warn\",{\"0\":{\"388\":1},\"1\":{\"10\":1,\"26\":2,\"35\":1,\"38\":1,\"40\":2,\"80\":1,\"102\":1,\"116\":1,\"118\":1,\"119\":1,\"135\":3,\"153\":2,\"157\":1,\"234\":1,\"376\":2,\"388\":1,\"389\":1,\"390\":2}}],[\"wanted\",{\"1\":{\"23\":1,\"205\":1}}],[\"want\",{\"1\":{\"5\":1,\"8\":1,\"15\":1,\"25\":1,\"26\":3,\"32\":1,\"44\":1,\"83\":1,\"86\":2,\"87\":1,\"92\":1,\"114\":1,\"141\":1,\"142\":1,\"153\":1,\"156\":1,\"171\":1,\"208\":1,\"413\":1,\"447\":1,\"469\":1}}],[\"watch\",{\"1\":{\"4\":2}}],[\"ways\",{\"1\":{\"12\":1,\"15\":1,\"28\":1,\"34\":1,\"52\":1,\"115\":1,\"136\":1,\"227\":1}}],[\"way\",{\"1\":{\"4\":1,\"26\":2,\"28\":2,\"37\":1,\"43\":1,\"50\":1,\"55\":1,\"58\":1,\"115\":2,\"133\":1,\"181\":1,\"235\":1,\"255\":1,\"290\":1,\"303\":1,\"388\":1}}],[\"winston\",{\"1\":{\"58\":1}}],[\"window\",{\"1\":{\"43\":2,\"90\":1,\"184\":1}}],[\"wikipedia\",{\"1\":{\"57\":1}}],[\"wildcard\",{\"1\":{\"17\":1}}],[\"will\",{\"1\":{\"4\":1,\"6\":1,\"9\":2,\"16\":1,\"17\":1,\"22\":2,\"26\":3,\"31\":1,\"33\":2,\"34\":4,\"35\":5,\"37\":2,\"38\":5,\"40\":5,\"43\":6,\"44\":2,\"55\":3,\"58\":1,\"62\":1,\"81\":1,\"82\":1,\"84\":2,\"86\":2,\"90\":1,\"96\":1,\"103\":6,\"104\":1,\"128\":1,\"142\":1,\"166\":2,\"171\":1,\"174\":3,\"178\":2,\"184\":1,\"224\":1,\"226\":1,\"227\":2,\"228\":1,\"236\":1,\"238\":1,\"241\":2,\"244\":1,\"250\":2,\"254\":1,\"256\":1,\"258\":1,\"293\":1,\"298\":1,\"303\":2,\"308\":1,\"313\":1,\"315\":1,\"318\":1,\"330\":1,\"335\":5,\"336\":1,\"366\":2,\"451\":1,\"456\":1,\"461\":1,\"466\":2}}],[\"without\",{\"1\":{\"36\":1,\"58\":1,\"99\":1,\"230\":1,\"236\":2,\"471\":1}}],[\"withemojimodifiers\",{\"1\":{\"92\":1}}],[\"withemoji\",{\"0\":{\"371\":1},\"1\":{\"26\":2,\"27\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":1,\"61\":1,\"80\":1,\"84\":2,\"92\":1,\"102\":1,\"103\":1,\"108\":1,\"111\":1,\"120\":1,\"175\":1,\"179\":1,\"233\":1,\"248\":1,\"249\":1,\"258\":1,\"315\":1,\"348\":1,\"353\":1,\"358\":1,\"372\":1,\"373\":1,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"415\":1,\"420\":1,\"429\":1,\"434\":1,\"439\":1}}],[\"within\",{\"1\":{\"10\":1,\"26\":1,\"43\":1,\"55\":1,\"88\":1,\"156\":1,\"230\":1,\"236\":2,\"238\":1,\"323\":1,\"403\":1,\"427\":1,\"469\":1}}],[\"with\",{\"0\":{\"1\":1,\"72\":1,\"326\":1,\"327\":1,\"335\":1},\"1\":{\"4\":2,\"5\":1,\"10\":1,\"13\":1,\"16\":1,\"17\":4,\"24\":2,\"26\":2,\"27\":1,\"32\":1,\"34\":2,\"35\":1,\"43\":4,\"44\":2,\"46\":1,\"49\":1,\"50\":2,\"52\":1,\"55\":2,\"57\":1,\"58\":4,\"60\":3,\"62\":3,\"66\":1,\"67\":1,\"68\":1,\"72\":1,\"81\":1,\"84\":1,\"87\":1,\"88\":2,\"90\":4,\"91\":2,\"92\":2,\"93\":1,\"96\":1,\"98\":1,\"100\":1,\"101\":1,\"103\":3,\"105\":1,\"106\":1,\"108\":1,\"111\":2,\"114\":2,\"117\":1,\"135\":5,\"136\":2,\"139\":1,\"140\":1,\"142\":4,\"144\":1,\"147\":1,\"150\":1,\"156\":1,\"164\":1,\"169\":1,\"172\":2,\"174\":1,\"183\":1,\"217\":1,\"220\":1,\"223\":1,\"224\":1,\"228\":2,\"236\":1,\"238\":2,\"258\":1,\"261\":1,\"273\":1,\"290\":1,\"293\":1,\"315\":1,\"330\":1,\"346\":2,\"348\":1,\"351\":2,\"353\":1,\"358\":1,\"366\":1,\"371\":1,\"373\":1,\"376\":1,\"377\":1,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"413\":1,\"415\":1,\"420\":1,\"429\":1,\"432\":1,\"442\":1}}],[\"went\",{\"1\":{\"380\":2}}],[\"were\",{\"1\":{\"62\":1,\"90\":1,\"103\":1,\"165\":1,\"167\":1,\"190\":1}}],[\"welcome\",{\"1\":{\"44\":2}}],[\"well\",{\"1\":{\"14\":1,\"16\":1,\"50\":1,\"62\":1,\"66\":1,\"81\":1,\"90\":2,\"91\":1}}],[\"web\",{\"1\":{\"43\":1,\"50\":1,\"90\":1}}],[\"we\",{\"1\":{\"0\":1,\"6\":1,\"8\":1,\"9\":7,\"10\":5,\"12\":1,\"14\":1,\"15\":2,\"16\":7,\"17\":2,\"24\":1,\"25\":3,\"26\":10,\"27\":2,\"28\":3,\"31\":1,\"32\":6,\"37\":4,\"38\":2,\"40\":1,\"43\":4,\"44\":2,\"50\":1,\"55\":1,\"62\":1,\"81\":1,\"83\":1,\"84\":7,\"86\":4,\"87\":2,\"88\":2,\"90\":4,\"91\":1,\"100\":1,\"151\":1,\"166\":3,\"168\":1,\"175\":2,\"179\":2,\"243\":1,\"244\":4,\"245\":2,\"246\":1,\"326\":1,\"327\":1,\"335\":5,\"415\":1,\"420\":1}}],[\"ie\",{\"1\":{\"248\":1,\"249\":1}}],[\"illustrative\",{\"1\":{\"166\":1}}],[\"illustration\",{\"1\":{\"57\":1}}],[\"ignore\",{\"1\":{\"55\":3}}],[\"imagine\",{\"1\":{\"43\":1}}],[\"immediate\",{\"1\":{\"26\":1,\"378\":1}}],[\"immediately\",{\"1\":{\"23\":1}}],[\"impactful\",{\"1\":{\"26\":1,\"388\":1}}],[\"impact\",{\"1\":{\"26\":2,\"383\":1,\"388\":1}}],[\"implementing\",{\"1\":{\"261\":1}}],[\"implements\",{\"1\":{\"236\":1}}],[\"implemented\",{\"1\":{\"166\":1}}],[\"implementation\",{\"1\":{\"22\":1,\"82\":1,\"230\":1}}],[\"implement\",{\"1\":{\"17\":1}}],[\"imported\",{\"1\":{\"83\":1,\"84\":1,\"119\":1,\"228\":1}}],[\"importance\",{\"1\":{\"32\":1}}],[\"important\",{\"1\":{\"26\":1,\"32\":1,\"55\":1,\"325\":2,\"326\":1,\"327\":1,\"332\":1}}],[\"import\",{\"1\":{\"5\":2,\"9\":2,\"10\":2,\"12\":1,\"13\":1,\"16\":2,\"17\":1,\"26\":3,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":3,\"35\":1,\"37\":3,\"38\":1,\"40\":1,\"43\":1,\"44\":3,\"54\":1,\"60\":1,\"61\":2,\"64\":1,\"65\":1,\"67\":1,\"68\":1,\"70\":1,\"71\":1,\"73\":1,\"74\":1,\"76\":1,\"77\":1,\"82\":5,\"84\":5,\"86\":2,\"87\":1,\"90\":2,\"95\":2,\"105\":1,\"108\":1,\"111\":1,\"120\":1,\"125\":1,\"130\":1,\"135\":1,\"137\":1,\"139\":1,\"141\":3,\"145\":1,\"148\":1,\"151\":1,\"153\":1,\"157\":1,\"166\":1,\"168\":1,\"170\":2,\"173\":1,\"175\":1,\"179\":1,\"183\":1,\"186\":1,\"192\":1,\"195\":1,\"198\":1,\"201\":1,\"205\":1,\"208\":1,\"211\":1,\"214\":1,\"217\":1,\"220\":1,\"223\":1,\"229\":1,\"231\":1,\"242\":1,\"244\":4,\"245\":2,\"258\":1,\"263\":1,\"268\":1,\"273\":1,\"277\":1,\"282\":1,\"287\":1,\"290\":1,\"295\":1,\"300\":1,\"305\":1,\"310\":1,\"315\":1,\"320\":1,\"325\":1,\"326\":1,\"327\":1,\"332\":1,\"335\":1,\"338\":1,\"343\":1,\"348\":1,\"353\":1,\"358\":1,\"363\":1,\"368\":1,\"373\":1,\"380\":1,\"385\":1,\"390\":1,\"395\":1,\"400\":1,\"405\":1,\"410\":1,\"415\":1,\"420\":1,\"426\":1,\"429\":1,\"434\":1,\"439\":1,\"444\":1,\"451\":1,\"456\":1,\"461\":1,\"466\":1}}],[\"importing\",{\"0\":{\"52\":1},\"1\":{\"3\":1,\"43\":1,\"83\":1,\"84\":1,\"228\":1}}],[\"ident\",{\"1\":{\"157\":1,\"158\":1}}],[\"identifiers\",{\"1\":{\"330\":1}}],[\"identifier\",{\"1\":{\"142\":1,\"157\":1}}],[\"identifying\",{\"1\":{\"318\":1,\"330\":1}}],[\"identify\",{\"1\":{\"10\":1}}],[\"identical\",{\"1\":{\"18\":1}}],[\"id\",{\"1\":{\"17\":2,\"142\":2,\"196\":1,\"215\":2,\"218\":2,\"219\":1,\"220\":2,\"287\":1}}],[\"i++\",{\"1\":{\"12\":1,\"13\":1}}],[\"if\",{\"0\":{\"313\":1},\"1\":{\"8\":1,\"9\":1,\"10\":3,\"16\":1,\"17\":1,\"22\":1,\"23\":1,\"32\":1,\"34\":2,\"37\":1,\"43\":5,\"62\":2,\"81\":1,\"90\":1,\"96\":1,\"103\":1,\"104\":1,\"115\":1,\"123\":1,\"141\":1,\"142\":1,\"160\":1,\"178\":1,\"184\":1,\"205\":1,\"208\":1,\"226\":1,\"227\":1,\"233\":1,\"241\":2,\"256\":1,\"280\":1,\"285\":1,\"313\":1,\"314\":1,\"315\":5,\"335\":1,\"371\":1,\"437\":1,\"447\":1}}],[\"italic\",{\"1\":{\"118\":1}}],[\"items\",{\"1\":{\"62\":1}}],[\"iterations\",{\"1\":{\"12\":1,\"268\":1,\"273\":1,\"277\":2}}],[\"itself\",{\"1\":{\"58\":1}}],[\"its\",{\"1\":{\"12\":1,\"16\":2,\"19\":1,\"20\":1,\"23\":1,\"43\":1,\"86\":2,\"93\":1,\"117\":1,\"218\":1,\"227\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"261\":1}}],[\"it\",{\"0\":{\"43\":1,\"81\":1},\"1\":{\"4\":1,\"5\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"15\":3,\"16\":3,\"17\":1,\"18\":2,\"20\":1,\"22\":1,\"23\":2,\"24\":1,\"26\":1,\"31\":1,\"32\":1,\"34\":1,\"36\":1,\"37\":2,\"43\":5,\"50\":1,\"52\":1,\"55\":2,\"58\":6,\"83\":2,\"84\":2,\"86\":3,\"87\":2,\"88\":1,\"91\":1,\"95\":1,\"97\":1,\"99\":2,\"104\":3,\"106\":1,\"115\":1,\"133\":1,\"137\":2,\"139\":1,\"143\":1,\"148\":1,\"151\":1,\"153\":2,\"155\":1,\"156\":1,\"161\":1,\"166\":1,\"169\":1,\"174\":3,\"178\":1,\"180\":1,\"181\":1,\"184\":1,\"225\":1,\"228\":1,\"234\":1,\"236\":1,\"238\":1,\"241\":1,\"245\":2,\"250\":1,\"263\":1,\"271\":4,\"275\":3,\"280\":1,\"285\":1,\"287\":1,\"303\":1,\"323\":1,\"335\":3,\"336\":2,\"341\":1,\"358\":1,\"371\":1,\"432\":2,\"471\":1}}],[\"iso\",{\"1\":{\"128\":1,\"164\":1,\"361\":1}}],[\"isomorphic\",{\"1\":{\"16\":1,\"240\":2}}],[\"issafari\",{\"1\":{\"116\":1}}],[\"issues\",{\"1\":{\"26\":1,\"388\":1}}],[\"issue\",{\"1\":{\"4\":1,\"32\":8,\"55\":1,\"62\":1,\"368\":1,\"415\":2}}],[\"ischrome\",{\"1\":{\"116\":4}}],[\"isn\",{\"1\":{\"166\":1,\"335\":1}}],[\"isnan\",{\"1\":{\"10\":1}}],[\"isnumber\",{\"1\":{\"10\":3}}],[\"is\",{\"0\":{\"57\":1,\"59\":1,\"75\":1},\"1\":{\"3\":1,\"4\":2,\"5\":2,\"7\":2,\"8\":2,\"9\":1,\"10\":2,\"13\":1,\"16\":6,\"17\":2,\"18\":4,\"20\":2,\"23\":1,\"24\":2,\"26\":4,\"27\":1,\"28\":4,\"31\":2,\"32\":1,\"34\":2,\"36\":2,\"37\":2,\"42\":1,\"43\":7,\"46\":4,\"50\":1,\"55\":6,\"57\":2,\"58\":4,\"62\":3,\"63\":1,\"64\":1,\"65\":1,\"67\":1,\"68\":1,\"69\":1,\"71\":1,\"75\":1,\"77\":1,\"82\":2,\"84\":3,\"86\":2,\"87\":3,\"90\":2,\"92\":1,\"93\":1,\"95\":2,\"96\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"103\":2,\"104\":2,\"106\":1,\"108\":1,\"111\":1,\"115\":3,\"128\":1,\"133\":3,\"136\":1,\"137\":1,\"139\":1,\"142\":5,\"144\":1,\"147\":1,\"150\":1,\"153\":4,\"155\":2,\"156\":1,\"157\":1,\"161\":1,\"163\":2,\"165\":2,\"166\":1,\"167\":2,\"171\":1,\"174\":4,\"175\":2,\"179\":2,\"180\":1,\"181\":1,\"183\":2,\"184\":1,\"186\":3,\"190\":1,\"192\":2,\"196\":1,\"203\":2,\"205\":1,\"208\":1,\"211\":1,\"214\":1,\"217\":1,\"218\":1,\"220\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":6,\"228\":2,\"231\":1,\"232\":1,\"235\":1,\"236\":6,\"240\":4,\"243\":1,\"247\":1,\"248\":2,\"249\":2,\"250\":3,\"251\":2,\"252\":2,\"253\":3,\"254\":2,\"256\":1,\"261\":2,\"271\":2,\"275\":1,\"280\":1,\"285\":2,\"288\":2,\"290\":1,\"293\":1,\"303\":1,\"313\":3,\"318\":1,\"323\":1,\"327\":1,\"330\":3,\"332\":1,\"335\":3,\"336\":2,\"338\":1,\"346\":2,\"351\":2,\"356\":3,\"361\":1,\"371\":2,\"378\":1,\"398\":1,\"403\":1,\"413\":1,\"418\":1,\"426\":1,\"427\":1,\"429\":2,\"432\":2,\"434\":1,\"437\":2,\"442\":3,\"451\":2,\"456\":2,\"461\":2,\"466\":2}}],[\"i\",{\"0\":{\"1\":1,\"58\":1},\"1\":{\"2\":1,\"8\":3,\"12\":2,\"13\":2,\"35\":10,\"36\":1,\"38\":10,\"40\":10,\"44\":1,\"48\":1,\"90\":2,\"125\":5,\"205\":1,\"208\":1,\"268\":3,\"273\":3,\"277\":6,\"338\":1,\"348\":3,\"353\":3,\"358\":3,\"390\":2}}],[\"inputs\",{\"1\":{\"469\":1}}],[\"input\",{\"1\":{\"326\":1}}],[\"injected\",{\"1\":{\"236\":1}}],[\"infinite\",{\"1\":{\"175\":1,\"179\":1}}],[\"info\",{\"0\":{\"393\":1},\"1\":{\"26\":7,\"27\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":2,\"35\":1,\"38\":1,\"40\":1,\"44\":4,\"46\":1,\"80\":1,\"82\":3,\"84\":1,\"87\":1,\"88\":1,\"90\":1,\"95\":2,\"102\":1,\"116\":1,\"118\":1,\"119\":1,\"135\":3,\"142\":1,\"234\":1,\"263\":3,\"290\":1,\"300\":5,\"305\":5,\"310\":6,\"325\":1,\"327\":1,\"332\":2,\"376\":4,\"393\":1,\"394\":1,\"395\":2,\"398\":1,\"403\":1,\"429\":1,\"444\":1,\"461\":2,\"466\":1}}],[\"information\",{\"1\":{\"5\":1,\"8\":1,\"16\":2,\"17\":1,\"24\":1,\"26\":3,\"50\":1,\"55\":1,\"82\":1,\"91\":1,\"107\":1,\"115\":1,\"178\":1,\"288\":1,\"300\":1,\"305\":1,\"310\":2,\"395\":2,\"413\":1,\"418\":1,\"442\":1}}],[\"inherit\",{\"1\":{\"84\":1,\"96\":1}}],[\"inherits\",{\"1\":{\"84\":1,\"86\":1,\"432\":1}}],[\"inherited\",{\"1\":{\"33\":1}}],[\"invalid\",{\"1\":{\"37\":1}}],[\"increment\",{\"1\":{\"266\":1}}],[\"incremented\",{\"1\":{\"196\":1}}],[\"increased\",{\"1\":{\"70\":1,\"71\":1}}],[\"increase\",{\"1\":{\"26\":1}}],[\"including\",{\"1\":{\"103\":1,\"142\":1}}],[\"included\",{\"1\":{\"35\":4,\"40\":5,\"123\":2,\"174\":1}}],[\"include\",{\"1\":{\"31\":1,\"34\":2,\"35\":2,\"40\":1,\"61\":1,\"123\":3,\"124\":1,\"125\":1,\"140\":1,\"142\":1,\"169\":1,\"244\":1}}],[\"includes\",{\"1\":{\"18\":1,\"172\":1}}],[\"innocuous\",{\"1\":{\"26\":1}}],[\"intended\",{\"1\":{\"224\":1}}],[\"internal\",{\"1\":{\"469\":1}}],[\"interact\",{\"1\":{\"238\":1}}],[\"interpolation\",{\"1\":{\"116\":1}}],[\"interesting\",{\"1\":{\"84\":1}}],[\"interface\",{\"0\":{\"102\":1,\"107\":1,\"124\":1,\"129\":1,\"134\":1,\"140\":1,\"142\":1,\"158\":1,\"162\":1,\"182\":1,\"185\":1,\"191\":1,\"194\":1,\"197\":1,\"200\":1,\"204\":1,\"207\":1,\"210\":1,\"213\":1,\"216\":1,\"219\":1,\"222\":1,\"257\":1,\"262\":1,\"267\":1,\"272\":1,\"276\":1,\"281\":1,\"286\":1,\"289\":1,\"294\":1,\"299\":1,\"304\":1,\"309\":1,\"314\":1,\"319\":1,\"324\":1,\"331\":1,\"337\":1,\"342\":1,\"347\":1,\"352\":1,\"357\":1,\"362\":1,\"367\":1,\"372\":1,\"379\":1,\"384\":1,\"389\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"425\":1,\"428\":1,\"433\":1,\"438\":1,\"443\":1,\"450\":1,\"455\":1,\"460\":1,\"465\":1},\"1\":{\"79\":1,\"80\":1,\"102\":1,\"107\":1,\"124\":2,\"141\":2,\"142\":4,\"144\":1,\"147\":1,\"150\":1,\"156\":1,\"158\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1}}],[\"interval\",{\"1\":{\"16\":1}}],[\"introduced\",{\"1\":{\"81\":1}}],[\"introduction\",{\"0\":{\"56\":1,\"224\":1}}],[\"into\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"26\":3,\"42\":1,\"81\":1,\"88\":1,\"91\":1,\"225\":1,\"236\":1,\"240\":1,\"246\":1,\"271\":1,\"275\":1,\"376\":2,\"393\":1,\"432\":1}}],[\"indefinitely\",{\"1\":{\"227\":1}}],[\"independence\",{\"1\":{\"130\":1}}],[\"index\",{\"0\":{\"85\":1},\"1\":{\"2\":1,\"8\":1,\"26\":4,\"31\":1,\"32\":3,\"84\":2}}],[\"individual\",{\"1\":{\"224\":1}}],[\"individuals\",{\"1\":{\"87\":1}}],[\"indicate\",{\"1\":{\"26\":1,\"393\":1}}],[\"indicates\",{\"1\":{\"10\":1}}],[\"instructions\",{\"1\":{\"91\":1}}],[\"instructs\",{\"1\":{\"88\":1,\"103\":1,\"288\":1,\"361\":1,\"366\":1,\"371\":1}}],[\"instead\",{\"1\":{\"75\":1,\"84\":1,\"271\":1,\"432\":1}}],[\"install\",{\"0\":{\"48\":1},\"1\":{\"48\":1,\"95\":2}}],[\"installing\",{\"0\":{\"47\":1},\"1\":{\"2\":1,\"81\":1}}],[\"instantiate\",{\"1\":{\"43\":1,\"44\":1,\"230\":1,\"245\":1}}],[\"instantiated\",{\"1\":{\"16\":1}}],[\"instances\",{\"1\":{\"43\":1,\"103\":1,\"190\":1,\"227\":1}}],[\"instance\",{\"1\":{\"8\":1,\"16\":3,\"17\":2,\"20\":1,\"22\":2,\"23\":2,\"32\":1,\"43\":1,\"60\":1,\"62\":1,\"72\":1,\"82\":1,\"86\":1,\"171\":2,\"178\":1,\"181\":1,\"226\":1,\"227\":3,\"230\":1,\"232\":2,\"238\":2,\"243\":1,\"247\":2,\"248\":2,\"249\":2,\"250\":2,\"251\":2,\"252\":2,\"253\":1,\"254\":2,\"255\":3,\"323\":2,\"376\":1,\"437\":1}}],[\"insight\",{\"1\":{\"271\":1,\"275\":1}}],[\"insights\",{\"1\":{\"26\":1,\"393\":1}}],[\"inside\",{\"1\":{\"8\":1,\"171\":1}}],[\"insert\",{\"1\":{\"15\":1}}],[\"in\",{\"1\":{\"0\":1,\"2\":1,\"4\":1,\"5\":1,\"8\":1,\"9\":3,\"12\":1,\"13\":1,\"14\":1,\"16\":5,\"17\":3,\"18\":1,\"20\":1,\"24\":1,\"25\":1,\"26\":4,\"27\":2,\"28\":1,\"31\":1,\"33\":1,\"34\":2,\"36\":1,\"37\":6,\"43\":5,\"44\":4,\"46\":1,\"49\":3,\"50\":1,\"55\":3,\"58\":3,\"59\":1,\"62\":1,\"81\":2,\"82\":4,\"83\":1,\"84\":3,\"86\":3,\"87\":3,\"88\":2,\"90\":4,\"91\":2,\"92\":1,\"96\":1,\"97\":1,\"99\":1,\"100\":2,\"101\":1,\"103\":1,\"106\":1,\"114\":1,\"117\":1,\"123\":3,\"133\":3,\"136\":1,\"137\":1,\"140\":1,\"142\":5,\"153\":1,\"156\":2,\"161\":2,\"165\":3,\"166\":1,\"167\":2,\"172\":3,\"174\":1,\"178\":1,\"180\":1,\"181\":1,\"190\":1,\"227\":2,\"228\":1,\"236\":4,\"238\":1,\"239\":1,\"240\":1,\"241\":4,\"243\":1,\"244\":1,\"245\":1,\"246\":4,\"255\":2,\"261\":1,\"271\":1,\"275\":1,\"293\":1,\"303\":1,\"318\":1,\"320\":2,\"335\":1,\"346\":1,\"351\":1,\"376\":1,\"388\":1,\"437\":1,\"442\":3,\"471\":2}}],[\"again\",{\"1\":{\"277\":1}}],[\"against\",{\"1\":{\"35\":1}}],[\"aws\",{\"1\":{\"235\":1}}],[\"away\",{\"1\":{\"161\":1}}],[\"awaited\",{\"1\":{\"148\":1,\"151\":1}}],[\"await\",{\"1\":{\"5\":1,\"9\":4,\"10\":2,\"16\":1,\"82\":1,\"86\":2,\"148\":1,\"151\":1,\"243\":1,\"244\":1,\"245\":2}}],[\"auto\",{\"1\":{\"196\":1}}],[\"automatically\",{\"1\":{\"7\":1,\"43\":1,\"96\":1,\"104\":1,\"142\":1,\"203\":1}}],[\"authorization\",{\"1\":{\"148\":1}}],[\"afterterminated\",{\"0\":{\"254\":1},\"1\":{\"254\":1}}],[\"afterformatapplied\",{\"0\":{\"251\":1},\"1\":{\"251\":1}}],[\"aftermodifierapplied\",{\"0\":{\"249\":1},\"1\":{\"249\":1}}],[\"after\",{\"1\":{\"84\":1,\"165\":1,\"167\":1,\"172\":1,\"174\":1,\"227\":1,\"249\":1,\"251\":1,\"263\":1}}],[\"available\",{\"1\":{\"81\":1,\"90\":1,\"117\":1}}],[\"among\",{\"1\":{\"181\":1}}],[\"america\",{\"1\":{\"130\":1}}],[\"am\",{\"1\":{\"35\":1,\"38\":1,\"40\":5}}],[\"a4000f\",{\"1\":{\"32\":1,\"116\":2}}],[\"abstract\",{\"1\":{\"162\":2}}],[\"abstracts\",{\"1\":{\"161\":1}}],[\"able\",{\"1\":{\"37\":1,\"62\":1,\"236\":2,\"240\":1}}],[\"abide\",{\"1\":{\"31\":1}}],[\"above\",{\"1\":{\"9\":1,\"12\":1,\"14\":1,\"17\":1,\"24\":1,\"38\":1,\"60\":1,\"84\":1,\"86\":2}}],[\"about\",{\"0\":{\"61\":1},\"1\":{\"5\":1,\"8\":1,\"16\":1,\"24\":1,\"34\":1,\"44\":1,\"50\":1,\"61\":1,\"81\":1,\"82\":1,\"84\":1,\"97\":2,\"107\":1,\"224\":1,\"236\":2,\"241\":4,\"300\":1,\"305\":1,\"310\":1,\"469\":1}}],[\"apex\",{\"1\":{\"161\":1}}],[\"apache\",{\"1\":{\"94\":1}}],[\"apart\",{\"1\":{\"58\":1}}],[\"appendchild\",{\"1\":{\"287\":1}}],[\"appropriate\",{\"1\":{\"161\":1}}],[\"approaches\",{\"1\":{\"58\":1}}],[\"apps\",{\"1\":{\"43\":1,\"236\":2}}],[\"app\",{\"1\":{\"26\":2,\"36\":1,\"37\":1,\"82\":1,\"86\":1,\"141\":1,\"236\":1,\"238\":1,\"300\":2,\"305\":2,\"310\":2,\"335\":1,\"388\":1,\"395\":2,\"403\":1,\"434\":1}}],[\"applicable\",{\"1\":{\"43\":1}}],[\"applications\",{\"1\":{\"26\":1,\"34\":1,\"43\":5,\"81\":1,\"87\":1,\"96\":1,\"236\":1,\"238\":2,\"239\":1}}],[\"application\",{\"1\":{\"9\":1,\"15\":2,\"17\":2,\"26\":6,\"27\":1,\"28\":1,\"37\":2,\"43\":1,\"44\":9,\"46\":1,\"57\":1,\"58\":1,\"61\":1,\"82\":1,\"83\":1,\"84\":1,\"88\":1,\"90\":1,\"142\":1,\"235\":1,\"236\":7,\"238\":2,\"239\":1,\"335\":1,\"376\":1,\"383\":1,\"393\":1,\"398\":1,\"413\":1}}],[\"applied\",{\"1\":{\"12\":1,\"13\":1,\"96\":1,\"165\":1,\"167\":1,\"174\":2,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"320\":1,\"330\":1,\"332\":1,\"376\":1}}],[\"applies\",{\"1\":{\"10\":1,\"86\":1,\"103\":1,\"318\":1}}],[\"applying\",{\"1\":{\"86\":1,\"119\":1,\"165\":1,\"167\":1,\"255\":1}}],[\"apply\",{\"1\":{\"9\":2,\"10\":1,\"12\":1,\"25\":1,\"26\":1,\"33\":1,\"35\":1,\"37\":1,\"84\":1,\"86\":3,\"114\":1,\"140\":2,\"141\":1,\"143\":1,\"181\":1,\"183\":1,\"186\":1,\"239\":1,\"335\":2,\"408\":1}}],[\"apis\",{\"1\":{\"142\":1}}],[\"api\",{\"0\":{\"60\":1},\"1\":{\"16\":1,\"18\":5,\"19\":1,\"55\":4,\"58\":3,\"60\":1,\"61\":1,\"62\":1,\"86\":1,\"92\":1,\"97\":1,\"142\":1,\"261\":1,\"271\":1,\"288\":1,\"293\":1,\"313\":1,\"318\":1,\"323\":1,\"330\":1,\"336\":1,\"356\":1,\"361\":1,\"371\":1,\"378\":1,\"398\":1,\"403\":1,\"418\":1,\"427\":1,\"432\":1,\"437\":1,\"442\":1}}],[\"according\",{\"1\":{\"136\":1,\"155\":1,\"165\":1,\"167\":1}}],[\"access\",{\"1\":{\"90\":1,\"173\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1}}],[\"accessing\",{\"1\":{\"52\":1,\"189\":1,\"448\":1}}],[\"accessed\",{\"1\":{\"16\":1}}],[\"accepts\",{\"1\":{\"7\":1,\"104\":1,\"128\":1,\"144\":1,\"147\":1,\"150\":1,\"181\":1,\"256\":1,\"313\":1}}],[\"achieved\",{\"1\":{\"130\":1}}],[\"acts\",{\"1\":{\"104\":1}}],[\"actually\",{\"1\":{\"88\":1}}],[\"activelevel\",{\"1\":{\"26\":2,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"44\":1,\"80\":1,\"82\":2,\"102\":1,\"103\":1,\"108\":1,\"133\":1,\"415\":1,\"420\":1}}],[\"active\",{\"0\":{\"26\":1},\"1\":{\"25\":1,\"26\":7,\"27\":1,\"44\":1,\"82\":1,\"415\":1,\"420\":1}}],[\"acting\",{\"1\":{\"15\":1}}],[\"across\",{\"1\":{\"58\":1,\"115\":1,\"239\":1}}],[\"asking\",{\"1\":{\"61\":1,\"235\":1}}],[\"asked\",{\"0\":{\"0\":1},\"1\":{\"0\":1}}],[\"aside\",{\"1\":{\"58\":1,\"423\":1}}],[\"assuming\",{\"1\":{\"241\":1}}],[\"assume\",{\"1\":{\"8\":1,\"9\":1}}],[\"assertion\",{\"1\":{\"256\":1,\"258\":1}}],[\"assert\",{\"0\":{\"256\":1},\"1\":{\"233\":1,\"257\":1,\"258\":4,\"313\":1}}],[\"assignable\",{\"1\":{\"37\":1,\"335\":1}}],[\"assist\",{\"1\":{\"32\":1,\"156\":1}}],[\"associated\",{\"1\":{\"13\":1,\"103\":1,\"106\":1,\"172\":1,\"174\":1,\"266\":1,\"275\":1,\"346\":1,\"351\":1}}],[\"associate\",{\"1\":{\"12\":1}}],[\"async\",{\"1\":{\"9\":2,\"10\":1,\"243\":2,\"244\":2}}],[\"as\",{\"1\":{\"9\":2,\"10\":1,\"14\":2,\"16\":4,\"17\":1,\"18\":2,\"20\":1,\"27\":3,\"32\":1,\"36\":1,\"43\":1,\"50\":1,\"57\":2,\"58\":2,\"60\":1,\"62\":1,\"66\":1,\"81\":2,\"86\":1,\"87\":1,\"88\":1,\"90\":4,\"91\":1,\"104\":1,\"115\":2,\"136\":1,\"141\":1,\"142\":1,\"153\":1,\"156\":1,\"163\":1,\"165\":1,\"167\":1,\"169\":1,\"170\":1,\"181\":1,\"184\":1,\"239\":1,\"240\":1,\"241\":1,\"280\":1,\"285\":1,\"318\":1,\"325\":1,\"330\":1,\"424\":1,\"432\":1,\"437\":1,\"447\":1}}],[\"align\",{\"1\":{\"115\":1}}],[\"alignment\",{\"1\":{\"115\":1}}],[\"alias\",{\"1\":{\"9\":1,\"330\":1,\"332\":1,\"376\":1,\"424\":1}}],[\"alter\",{\"1\":{\"233\":1,\"255\":1}}],[\"alternative\",{\"1\":{\"86\":1}}],[\"alternatively\",{\"1\":{\"9\":1,\"53\":1,\"135\":1,\"141\":1,\"335\":1}}],[\"although\",{\"1\":{\"55\":1,\"83\":1}}],[\"alert\",{\"0\":{\"378\":1},\"1\":{\"17\":3,\"26\":3,\"80\":1,\"82\":2,\"92\":1,\"102\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":4,\"135\":8,\"234\":1,\"376\":1,\"379\":1,\"380\":2}}],[\"alertlistenerid\",{\"1\":{\"17\":1}}],[\"alerts\",{\"1\":{\"17\":1,\"82\":1}}],[\"always\",{\"1\":{\"16\":1,\"26\":1,\"33\":1,\"90\":1,\"166\":1,\"168\":1}}],[\"already\",{\"1\":{\"9\":1,\"104\":1,\"227\":1}}],[\"allow\",{\"1\":{\"447\":1}}],[\"allowing\",{\"1\":{\"226\":1}}],[\"allowednamespaces\",{\"1\":{\"335\":2}}],[\"allowed\",{\"1\":{\"103\":1,\"123\":1,\"335\":1}}],[\"allows\",{\"1\":{\"16\":2,\"26\":1,\"36\":1,\"86\":1,\"103\":1,\"142\":1,\"230\":1,\"323\":1,\"336\":1,\"376\":3,\"432\":1}}],[\"alllistenerid\",{\"1\":{\"17\":3}}],[\"all\",{\"0\":{\"81\":1},\"1\":{\"7\":1,\"10\":1,\"17\":2,\"18\":1,\"20\":1,\"23\":1,\"24\":1,\"26\":4,\"37\":2,\"43\":3,\"61\":1,\"81\":1,\"82\":1,\"84\":2,\"86\":3,\"87\":1,\"90\":2,\"96\":2,\"104\":1,\"111\":1,\"114\":1,\"135\":1,\"142\":3,\"153\":1,\"156\":1,\"161\":1,\"165\":1,\"167\":1,\"172\":2,\"228\":2,\"235\":1,\"236\":1,\"239\":1,\"240\":1,\"243\":1,\"248\":1,\"249\":1,\"298\":1,\"303\":1,\"318\":1,\"332\":1,\"376\":1,\"432\":1,\"449\":1,\"454\":1,\"459\":1,\"464\":1,\"470\":1}}],[\"also\",{\"1\":{\"5\":1,\"12\":1,\"15\":1,\"17\":2,\"22\":1,\"24\":1,\"26\":1,\"27\":1,\"28\":1,\"38\":1,\"46\":1,\"50\":1,\"58\":1,\"84\":1,\"87\":1,\"90\":1,\"93\":1,\"104\":2,\"106\":1,\"116\":1,\"142\":1,\"172\":1,\"181\":1,\"240\":1,\"271\":1,\"275\":1,\"293\":1,\"330\":1,\"335\":1,\"423\":1}}],[\"advantage\",{\"1\":{\"90\":1,\"91\":1,\"93\":1}}],[\"advanced\",{\"1\":{\"25\":1}}],[\"adhere\",{\"1\":{\"58\":1}}],[\"adz\",{\"1\":{\"57\":1}}],[\"adzeglobal\",{\"1\":{\"182\":1,\"191\":1,\"194\":1,\"197\":1,\"200\":1,\"204\":1,\"207\":1,\"210\":1,\"213\":1,\"216\":1,\"219\":1,\"222\":1}}],[\"adzefilters\",{\"1\":{\"79\":1}}],[\"adzefiletransport\",{\"1\":{\"16\":1}}],[\"adzetransportfile\",{\"1\":{\"16\":3,\"82\":2,\"86\":2}}],[\"adzejs\",{\"1\":{\"7\":1,\"95\":1}}],[\"adze\",{\"0\":{\"1\":1,\"7\":1,\"47\":1,\"52\":1,\"57\":1,\"58\":1,\"62\":1,\"63\":1,\"83\":1},\"1\":{\"0\":1,\"2\":2,\"5\":1,\"6\":2,\"7\":1,\"10\":1,\"15\":1,\"16\":9,\"17\":4,\"18\":3,\"19\":1,\"21\":1,\"23\":1,\"26\":8,\"27\":4,\"28\":1,\"29\":3,\"30\":3,\"31\":3,\"32\":4,\"33\":1,\"34\":2,\"35\":7,\"37\":5,\"38\":7,\"40\":7,\"42\":1,\"43\":6,\"44\":8,\"48\":4,\"49\":2,\"50\":3,\"52\":1,\"53\":6,\"54\":3,\"55\":4,\"57\":2,\"58\":4,\"60\":5,\"61\":3,\"62\":3,\"63\":2,\"64\":3,\"65\":3,\"67\":3,\"68\":3,\"70\":4,\"71\":4,\"73\":2,\"74\":2,\"76\":2,\"77\":2,\"81\":4,\"82\":5,\"83\":1,\"84\":6,\"86\":4,\"87\":8,\"89\":1,\"90\":6,\"91\":2,\"92\":2,\"93\":3,\"95\":6,\"96\":2,\"97\":1,\"98\":2,\"99\":1,\"100\":1,\"105\":2,\"108\":3,\"111\":3,\"114\":1,\"116\":1,\"117\":2,\"120\":3,\"123\":1,\"125\":6,\"128\":1,\"130\":3,\"133\":1,\"135\":2,\"136\":2,\"137\":3,\"139\":2,\"141\":5,\"142\":6,\"143\":1,\"145\":3,\"148\":3,\"151\":3,\"153\":3,\"156\":1,\"157\":3,\"160\":1,\"166\":1,\"168\":1,\"169\":1,\"170\":2,\"171\":1,\"173\":2,\"175\":5,\"179\":5,\"180\":1,\"183\":4,\"184\":2,\"186\":5,\"192\":4,\"195\":2,\"198\":2,\"201\":2,\"205\":3,\"208\":3,\"211\":3,\"214\":3,\"217\":3,\"220\":3,\"223\":3,\"225\":1,\"226\":2,\"228\":3,\"229\":2,\"231\":3,\"236\":2,\"238\":1,\"240\":5,\"242\":1,\"244\":1,\"245\":2,\"246\":1,\"255\":1,\"258\":5,\"263\":7,\"268\":3,\"273\":5,\"277\":5,\"282\":3,\"287\":3,\"290\":5,\"295\":3,\"300\":6,\"305\":6,\"310\":7,\"315\":5,\"320\":4,\"325\":3,\"326\":3,\"327\":4,\"332\":6,\"335\":4,\"338\":5,\"343\":3,\"348\":5,\"353\":5,\"358\":4,\"363\":3,\"368\":3,\"373\":3,\"376\":3,\"377\":1,\"380\":4,\"385\":4,\"390\":4,\"395\":4,\"400\":4,\"405\":4,\"410\":4,\"415\":4,\"420\":4,\"423\":1,\"426\":4,\"427\":2,\"429\":4,\"434\":3,\"439\":3,\"444\":5,\"451\":4,\"456\":4,\"461\":4,\"466\":4,\"469\":1,\"471\":3}}],[\"adopted\",{\"1\":{\"6\":1}}],[\"addlogtocache\",{\"0\":{\"203\":1},\"1\":{\"204\":1,\"205\":1}}],[\"addlistener\",{\"0\":{\"215\":1},\"1\":{\"17\":4,\"73\":1,\"74\":1,\"82\":1,\"105\":1,\"133\":1,\"135\":6,\"173\":1,\"175\":1,\"179\":1,\"183\":1,\"216\":1,\"217\":1,\"218\":1,\"220\":1,\"223\":1,\"290\":1,\"327\":1}}],[\"additional\",{\"1\":{\"142\":1}}],[\"addition\",{\"1\":{\"43\":1,\"172\":1,\"376\":1}}],[\"additive\",{\"1\":{\"33\":1,\"330\":1,\"332\":1}}],[\"adding\",{\"1\":{\"16\":1,\"28\":1,\"104\":1}}],[\"added`\",{\"1\":{\"290\":1}}],[\"added\",{\"1\":{\"32\":1,\"55\":1,\"87\":1,\"142\":2,\"263\":1,\"290\":1,\"444\":1}}],[\"addvalues\",{\"1\":{\"10\":2}}],[\"adds\",{\"1\":{\"10\":1,\"174\":1,\"203\":1,\"215\":1,\"330\":1}}],[\"add\",{\"1\":{\"6\":1,\"10\":1,\"12\":1,\"13\":1,\"17\":2,\"23\":1,\"25\":1,\"32\":1,\"37\":1,\"48\":2,\"50\":1,\"82\":1,\"87\":2,\"88\":2,\"92\":2,\"95\":1,\"103\":1,\"108\":1,\"135\":3,\"166\":1,\"169\":1,\"183\":1,\"205\":1,\"233\":1,\"263\":2,\"287\":1,\"290\":2,\"335\":1,\"444\":2}}],[\"a\",{\"0\":{\"32\":1,\"59\":1,\"84\":1,\"169\":1},\"1\":{\"5\":2,\"8\":4,\"9\":4,\"10\":5,\"12\":6,\"13\":2,\"15\":3,\"16\":8,\"17\":7,\"18\":5,\"19\":1,\"20\":2,\"22\":5,\"23\":3,\"24\":2,\"25\":3,\"26\":2,\"28\":2,\"31\":1,\"32\":7,\"34\":3,\"35\":1,\"36\":1,\"37\":5,\"38\":1,\"40\":1,\"42\":3,\"43\":7,\"49\":3,\"52\":1,\"55\":1,\"57\":3,\"58\":3,\"60\":5,\"61\":1,\"62\":4,\"64\":1,\"65\":1,\"66\":1,\"67\":2,\"68\":2,\"78\":1,\"82\":5,\"83\":1,\"84\":6,\"86\":7,\"87\":10,\"88\":4,\"90\":9,\"91\":4,\"92\":2,\"96\":1,\"97\":2,\"98\":1,\"100\":2,\"101\":1,\"103\":3,\"104\":5,\"106\":1,\"108\":2,\"111\":3,\"114\":2,\"115\":2,\"117\":2,\"119\":1,\"120\":1,\"123\":1,\"125\":1,\"128\":4,\"133\":2,\"135\":6,\"136\":2,\"137\":1,\"141\":1,\"142\":9,\"143\":1,\"144\":2,\"147\":2,\"148\":2,\"150\":2,\"151\":3,\"153\":4,\"156\":2,\"157\":1,\"160\":1,\"165\":2,\"166\":1,\"167\":1,\"169\":2,\"171\":2,\"173\":1,\"174\":2,\"175\":2,\"179\":2,\"180\":2,\"181\":4,\"183\":2,\"186\":3,\"192\":1,\"196\":1,\"199\":1,\"203\":1,\"205\":1,\"208\":1,\"209\":1,\"211\":1,\"212\":1,\"214\":1,\"215\":2,\"217\":1,\"220\":1,\"223\":1,\"224\":2,\"226\":4,\"227\":3,\"228\":1,\"230\":1,\"231\":1,\"232\":1,\"234\":1,\"235\":1,\"236\":5,\"238\":1,\"239\":1,\"240\":3,\"241\":1,\"245\":1,\"247\":1,\"248\":2,\"249\":2,\"250\":4,\"251\":3,\"252\":1,\"253\":1,\"254\":1,\"255\":2,\"256\":1,\"261\":4,\"263\":3,\"266\":1,\"271\":6,\"273\":1,\"275\":4,\"280\":2,\"285\":3,\"287\":1,\"288\":3,\"290\":5,\"293\":1,\"295\":1,\"298\":1,\"303\":2,\"308\":2,\"313\":3,\"318\":5,\"320\":1,\"323\":4,\"325\":1,\"327\":1,\"330\":4,\"332\":2,\"335\":6,\"336\":2,\"346\":6,\"348\":3,\"351\":6,\"353\":3,\"356\":3,\"358\":2,\"361\":1,\"363\":1,\"366\":1,\"371\":1,\"376\":8,\"378\":1,\"388\":1,\"398\":1,\"403\":1,\"410\":2,\"413\":1,\"418\":1,\"423\":1,\"426\":1,\"427\":1,\"432\":4,\"434\":1,\"437\":3,\"442\":3,\"444\":3,\"447\":3,\"451\":1,\"456\":1,\"461\":1,\"466\":1,\"471\":1}}],[\"attach\",{\"1\":{\"84\":1,\"103\":1,\"323\":1,\"325\":1}}],[\"attached\",{\"1\":{\"43\":2}}],[\"attempts\",{\"1\":{\"18\":1}}],[\"attention\",{\"1\":{\"16\":1,\"26\":1,\"32\":1,\"378\":1}}],[\"at\",{\"1\":{\"4\":1,\"5\":1,\"8\":1,\"9\":1,\"10\":1,\"16\":1,\"17\":1,\"25\":1,\"26\":1,\"35\":1,\"37\":2,\"43\":1,\"44\":1,\"55\":1,\"90\":1,\"97\":1,\"100\":1,\"184\":1,\"215\":1,\"227\":1,\"234\":1,\"258\":1,\"315\":1,\"323\":1,\"427\":1}}],[\"article\",{\"1\":{\"96\":1}}],[\"arg\",{\"1\":{\"166\":1,\"168\":1}}],[\"argument\",{\"1\":{\"37\":1,\"280\":1,\"285\":1,\"335\":1}}],[\"arguments\",{\"1\":{\"21\":1,\"142\":1,\"165\":4,\"167\":4,\"172\":2,\"174\":2,\"250\":1,\"251\":1,\"253\":1,\"254\":1,\"280\":1,\"285\":1}}],[\"args\",{\"1\":{\"31\":1,\"162\":2,\"166\":2,\"168\":2,\"172\":1,\"174\":1,\"253\":2,\"254\":2,\"379\":1,\"384\":1,\"389\":1,\"394\":1,\"399\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"428\":1}}],[\"arise\",{\"1\":{\"26\":1}}],[\"architectures\",{\"1\":{\"58\":1,\"235\":1,\"236\":1}}],[\"architecture\",{\"0\":{\"237\":1},\"1\":{\"19\":1,\"42\":1,\"43\":1,\"58\":1,\"235\":1,\"236\":2}}],[\"array\",{\"1\":{\"17\":2,\"103\":1,\"165\":1,\"167\":1,\"190\":1,\"221\":1,\"250\":1,\"251\":1}}],[\"around\",{\"1\":{\"3\":1,\"4\":1,\"55\":2}}],[\"aren\",{\"1\":{\"96\":1}}],[\"are\",{\"1\":{\"3\":1,\"6\":2,\"10\":2,\"15\":2,\"16\":2,\"17\":3,\"19\":1,\"23\":1,\"26\":8,\"27\":1,\"28\":2,\"32\":1,\"34\":2,\"36\":1,\"38\":1,\"42\":1,\"43\":3,\"46\":2,\"52\":1,\"55\":2,\"58\":2,\"62\":1,\"84\":2,\"86\":2,\"87\":1,\"90\":3,\"91\":3,\"93\":1,\"100\":1,\"103\":1,\"114\":1,\"116\":1,\"123\":4,\"136\":1,\"139\":2,\"141\":1,\"178\":1,\"189\":1,\"202\":1,\"227\":1,\"232\":1,\"233\":1,\"235\":2,\"236\":1,\"241\":1,\"243\":3,\"246\":2,\"255\":1,\"280\":1,\"285\":1,\"318\":1,\"324\":1,\"330\":3,\"332\":1,\"335\":1,\"376\":1,\"377\":1,\"413\":1,\"418\":3,\"427\":1,\"442\":2,\"447\":1,\"448\":1,\"469\":1,\"471\":1}}],[\"analysis\",{\"1\":{\"142\":1}}],[\"answer\",{\"1\":{\"87\":6,\"263\":6,\"290\":6,\"444\":6}}],[\"anothe\",{\"1\":{\"15\":1}}],[\"another\",{\"1\":{\"15\":1,\"17\":2,\"18\":1,\"82\":1,\"86\":2,\"183\":1,\"192\":1,\"290\":1,\"451\":1,\"456\":1,\"461\":1,\"466\":1}}],[\"annotations\",{\"1\":{\"58\":1}}],[\"annotating\",{\"0\":{\"8\":1},\"1\":{\"81\":1}}],[\"annotate\",{\"1\":{\"9\":1}}],[\"anything\",{\"1\":{\"236\":1,\"244\":1}}],[\"anytime\",{\"1\":{\"142\":1}}],[\"anywhere\",{\"1\":{\"99\":1}}],[\"any>>\",{\"1\":{\"182\":1}}],[\"any>\",{\"1\":{\"80\":1,\"102\":1,\"182\":1}}],[\"any\",{\"1\":{\"4\":1,\"16\":1,\"22\":1,\"26\":2,\"34\":1,\"35\":1,\"43\":3,\"58\":2,\"62\":2,\"69\":1,\"84\":1,\"86\":1,\"99\":1,\"103\":1,\"123\":1,\"142\":1,\"178\":1,\"227\":1,\"236\":1,\"308\":1,\"320\":1,\"324\":1,\"330\":1,\"335\":1,\"393\":1,\"408\":1,\"471\":1}}],[\"andrew\",{\"1\":{\"94\":1,\"343\":1}}],[\"andrewstacy\",{\"1\":{\"2\":2}}],[\"and\",{\"0\":{\"138\":1},\"1\":{\"4\":1,\"6\":2,\"7\":1,\"8\":1,\"9\":4,\"10\":2,\"12\":4,\"15\":5,\"16\":6,\"17\":2,\"18\":4,\"19\":1,\"20\":2,\"22\":3,\"23\":1,\"25\":1,\"26\":5,\"31\":1,\"32\":2,\"37\":1,\"42\":3,\"43\":3,\"44\":1,\"46\":1,\"50\":2,\"55\":2,\"57\":1,\"58\":10,\"59\":1,\"60\":1,\"61\":1,\"62\":4,\"81\":4,\"82\":2,\"83\":2,\"84\":6,\"86\":1,\"87\":1,\"88\":2,\"90\":4,\"91\":4,\"92\":2,\"93\":2,\"95\":1,\"97\":1,\"99\":2,\"100\":2,\"103\":5,\"104\":1,\"111\":1,\"115\":1,\"123\":1,\"135\":6,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"147\":1,\"150\":1,\"161\":2,\"165\":1,\"167\":1,\"170\":1,\"172\":1,\"173\":1,\"174\":1,\"178\":1,\"180\":1,\"181\":1,\"189\":1,\"199\":1,\"202\":2,\"215\":1,\"225\":1,\"226\":2,\"227\":4,\"228\":1,\"230\":2,\"234\":1,\"236\":4,\"238\":1,\"239\":1,\"241\":3,\"245\":1,\"255\":2,\"256\":1,\"258\":1,\"261\":1,\"280\":1,\"285\":1,\"287\":2,\"313\":1,\"318\":1,\"330\":2,\"336\":2,\"376\":1,\"378\":1,\"447\":1,\"448\":1,\"469\":1,\"471\":1}}],[\"an\",{\"1\":{\"3\":1,\"4\":1,\"9\":7,\"10\":2,\"16\":2,\"26\":2,\"32\":2,\"33\":1,\"35\":2,\"37\":3,\"43\":3,\"44\":2,\"55\":1,\"60\":3,\"62\":1,\"82\":2,\"86\":1,\"87\":1,\"90\":1,\"95\":1,\"96\":1,\"103\":1,\"108\":1,\"111\":1,\"128\":1,\"141\":1,\"142\":4,\"145\":2,\"161\":1,\"163\":1,\"165\":1,\"167\":1,\"174\":1,\"175\":1,\"179\":1,\"184\":1,\"190\":1,\"196\":1,\"218\":1,\"221\":1,\"225\":2,\"230\":1,\"235\":2,\"255\":1,\"256\":1,\"280\":1,\"298\":1,\"303\":1,\"318\":1,\"325\":1,\"326\":1,\"327\":1,\"361\":1,\"368\":1,\"371\":1,\"373\":1,\"376\":2,\"385\":2,\"388\":1,\"400\":2,\"405\":2,\"415\":2,\"424\":1,\"429\":1,\"437\":1}}],[\"tweaks\",{\"1\":{\"119\":1}}],[\"two\",{\"1\":{\"3\":1,\"10\":1,\"15\":2,\"17\":1,\"28\":1,\"100\":1}}],[\"tutorial\",{\"1\":{\"96\":1,\"97\":1,\"181\":1,\"224\":2,\"447\":1}}],[\"typical\",{\"1\":{\"84\":1}}],[\"typically\",{\"1\":{\"26\":2,\"236\":1,\"413\":2}}],[\"typeof\",{\"1\":{\"244\":1}}],[\"types\",{\"1\":{\"224\":1,\"243\":1,\"324\":1}}],[\"typescriptlang\",{\"1\":{\"50\":1}}],[\"typescript\",{\"0\":{\"50\":1,\"54\":1},\"1\":{\"18\":1,\"32\":1,\"37\":2,\"49\":2,\"50\":3,\"58\":1,\"98\":3,\"166\":1}}],[\"type\",{\"0\":{\"133\":1,\"326\":1},\"1\":{\"10\":1,\"28\":2,\"29\":1,\"30\":1,\"32\":2,\"34\":2,\"35\":1,\"37\":5,\"38\":1,\"40\":1,\"80\":1,\"90\":1,\"102\":1,\"106\":1,\"123\":2,\"124\":1,\"125\":1,\"129\":1,\"133\":1,\"134\":1,\"141\":4,\"142\":3,\"145\":1,\"148\":1,\"151\":1,\"153\":1,\"156\":1,\"157\":1,\"163\":1,\"166\":2,\"168\":2,\"172\":1,\"174\":1,\"244\":2,\"326\":2,\"335\":8}}],[\"t\",{\"1\":{\"26\":1,\"43\":1,\"55\":1,\"96\":1,\"124\":1,\"166\":1,\"205\":1,\"241\":1,\"244\":1,\"324\":1,\"335\":1,\"408\":1,\"451\":1,\"456\":1,\"461\":1}}],[\"testing\",{\"0\":{\"469\":1},\"1\":{\"469\":1}}],[\"test\",{\"1\":{\"208\":1,\"211\":1,\"214\":1,\"217\":1,\"220\":1,\"223\":1,\"287\":1,\"469\":2,\"470\":1}}],[\"tests\",{\"1\":{\"184\":2,\"469\":3}}],[\"teardown\",{\"0\":{\"184\":1},\"1\":{\"184\":1,\"185\":1,\"186\":2}}],[\"template\",{\"1\":{\"116\":1,\"376\":1,\"437\":2}}],[\"text\",{\"1\":{\"111\":1,\"117\":1,\"287\":1}}],[\"terrible\",{\"1\":{\"92\":1}}],[\"terminals\",{\"1\":{\"136\":1}}],[\"terminalstyle\",{\"1\":{\"32\":1,\"107\":1,\"108\":1,\"111\":1,\"429\":1}}],[\"terminalcolorfidelity\",{\"1\":{\"79\":1}}],[\"terminal\",{\"1\":{\"27\":1,\"107\":1,\"167\":1,\"303\":1}}],[\"terminating\",{\"1\":{\"432\":1}}],[\"termination\",{\"1\":{\"227\":1,\"254\":1}}],[\"terminates\",{\"1\":{\"427\":1}}],[\"terminate\",{\"1\":{\"23\":1,\"255\":1,\"376\":2}}],[\"terminated\",{\"1\":{\"17\":1,\"163\":1,\"172\":2,\"174\":3,\"227\":1,\"253\":1,\"336\":1}}],[\"terminators\",{\"0\":{\"234\":1,\"376\":1,\"377\":1,\"423\":1},\"1\":{\"24\":4,\"81\":1,\"101\":1,\"234\":1,\"293\":1,\"318\":1,\"376\":3,\"377\":1}}],[\"terminator\",{\"0\":{\"24\":1},\"1\":{\"10\":1,\"20\":1,\"21\":1,\"22\":2,\"24\":1,\"60\":1,\"84\":1,\"86\":1,\"142\":1,\"226\":2,\"227\":1,\"230\":1,\"253\":3,\"254\":3,\"261\":1,\"271\":1,\"275\":1,\"423\":1,\"424\":1,\"427\":1,\"432\":1,\"437\":1,\"442\":1}}],[\"term\",{\"1\":{\"15\":1}}],[\"tells\",{\"1\":{\"55\":1,\"103\":2,\"123\":1,\"266\":1,\"469\":1}}],[\"tend\",{\"1\":{\"18\":1}}],[\"tag\",{\"1\":{\"376\":1,\"437\":2}}],[\"tabular\",{\"1\":{\"343\":2}}],[\"table\",{\"0\":{\"341\":1},\"1\":{\"172\":1,\"233\":1,\"341\":2,\"342\":1,\"343\":1}}],[\"taking\",{\"1\":{\"103\":1,\"164\":1,\"346\":1,\"351\":1}}],[\"takes\",{\"1\":{\"123\":1,\"236\":1,\"348\":1,\"353\":1,\"358\":1}}],[\"take\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"25\":1,\"35\":1,\"43\":2,\"90\":1,\"91\":1,\"93\":1,\"97\":1,\"100\":1,\"178\":1}}],[\"targeting\",{\"0\":{\"241\":1},\"1\":{\"17\":1,\"244\":1}}],[\"targets\",{\"1\":{\"17\":3,\"240\":1}}],[\"target\",{\"1\":{\"17\":3,\"221\":1,\"239\":1,\"241\":3,\"242\":1}}],[\"tix\",{\"1\":{\"332\":5}}],[\"tied\",{\"1\":{\"142\":1}}],[\"tip\",{\"1\":{\"10\":1,\"26\":1,\"55\":1,\"58\":1,\"82\":1}}],[\"timer\",{\"1\":{\"346\":1,\"348\":3,\"351\":1,\"353\":3,\"358\":1}}],[\"timeend\",{\"0\":{\"351\":1},\"1\":{\"233\":1,\"318\":1,\"346\":1,\"348\":2,\"351\":1,\"353\":2}}],[\"timenow\",{\"0\":{\"356\":1},\"1\":{\"21\":1,\"23\":2,\"233\":1,\"318\":1,\"357\":1,\"358\":2}}],[\"timestampformatfunction\",{\"1\":{\"162\":1,\"163\":1}}],[\"timestampformatterconfiguration\",{\"1\":{\"128\":1}}],[\"timestampformatter\",{\"0\":{\"164\":1},\"1\":{\"80\":1,\"102\":1,\"103\":1,\"129\":1,\"130\":1,\"162\":1,\"164\":2,\"165\":1,\"167\":1}}],[\"timestamps\",{\"0\":{\"128\":1},\"1\":{\"84\":1,\"92\":1,\"153\":1,\"156\":1}}],[\"timestamp\",{\"0\":{\"361\":1},\"1\":{\"16\":1,\"17\":1,\"21\":1,\"23\":1,\"26\":2,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"37\":1,\"67\":2,\"68\":2,\"82\":1,\"84\":2,\"86\":1,\"90\":1,\"92\":2,\"103\":2,\"128\":3,\"130\":1,\"161\":1,\"162\":2,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"233\":1,\"361\":1,\"362\":1,\"363\":2}}],[\"times\",{\"1\":{\"12\":2,\"13\":1,\"14\":1,\"26\":1,\"87\":1,\"91\":1}}],[\"time\",{\"0\":{\"346\":1},\"1\":{\"4\":1,\"5\":1,\"6\":1,\"8\":1,\"10\":1,\"12\":1,\"21\":1,\"23\":1,\"26\":1,\"31\":1,\"128\":1,\"174\":1,\"215\":1,\"233\":1,\"318\":1,\"323\":1,\"346\":1,\"347\":1,\"348\":2,\"351\":1,\"352\":1,\"353\":2,\"356\":1,\"358\":3,\"471\":1}}],[\"truthy\",{\"1\":{\"313\":1}}],[\"true\",{\"1\":{\"50\":1,\"51\":1,\"90\":1,\"103\":1,\"105\":1,\"142\":1,\"192\":1,\"201\":1,\"208\":1,\"211\":1,\"214\":1,\"451\":1,\"456\":1,\"461\":1,\"466\":1}}],[\"trigger\",{\"1\":{\"82\":1,\"103\":1,\"175\":1,\"179\":1,\"183\":1,\"336\":1}}],[\"triggering\",{\"1\":{\"17\":1}}],[\"transforms\",{\"1\":{\"280\":1,\"285\":1,\"341\":1}}],[\"transports\",{\"1\":{\"15\":1,\"16\":2}}],[\"transporting\",{\"1\":{\"7\":1,\"18\":1,\"58\":1,\"86\":1,\"153\":1,\"240\":1}}],[\"transport\",{\"0\":{\"7\":1},\"1\":{\"7\":2,\"15\":1,\"16\":4,\"18\":1,\"81\":1,\"82\":1,\"86\":2}}],[\"trace\",{\"0\":{\"366\":1},\"1\":{\"233\":1,\"366\":1,\"367\":1,\"368\":1}}],[\"tracked\",{\"1\":{\"261\":1}}],[\"track\",{\"1\":{\"58\":1}}],[\"tracking\",{\"1\":{\"15\":1,\"155\":1,\"318\":1}}],[\"trying\",{\"1\":{\"37\":1,\"368\":1}}],[\"try\",{\"1\":{\"9\":2,\"10\":1,\"18\":1,\"37\":1,\"244\":1,\"439\":1}}],[\"ts|js\",{\"1\":{\"84\":1}}],[\"tsconfig\",{\"1\":{\"50\":2}}],[\"ts\",{\"0\":{\"37\":1,\"85\":1,\"326\":1},\"1\":{\"8\":3,\"9\":4,\"10\":2,\"12\":1,\"13\":1,\"26\":4,\"27\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":3,\"37\":2,\"44\":2,\"61\":3,\"82\":1,\"84\":3,\"141\":2,\"170\":1}}],[\"those\",{\"1\":{\"178\":1,\"239\":1}}],[\"though\",{\"1\":{\"31\":1,\"46\":1}}],[\"than\",{\"1\":{\"17\":1,\"26\":2,\"32\":1,\"271\":2,\"275\":1,\"356\":1,\"388\":1}}],[\"that\",{\"1\":{\"4\":2,\"5\":1,\"6\":2,\"8\":1,\"9\":3,\"10\":3,\"12\":2,\"13\":1,\"15\":1,\"16\":4,\"17\":5,\"18\":2,\"22\":1,\"23\":2,\"25\":1,\"26\":11,\"27\":4,\"28\":3,\"32\":4,\"34\":6,\"36\":1,\"43\":7,\"44\":1,\"46\":2,\"55\":5,\"57\":2,\"58\":3,\"81\":1,\"82\":1,\"83\":1,\"84\":6,\"86\":4,\"87\":1,\"88\":2,\"89\":1,\"90\":9,\"91\":1,\"92\":1,\"96\":4,\"100\":1,\"103\":4,\"104\":1,\"117\":1,\"119\":1,\"123\":2,\"128\":1,\"135\":3,\"136\":1,\"139\":1,\"141\":1,\"142\":3,\"144\":1,\"147\":1,\"150\":1,\"153\":1,\"156\":1,\"163\":2,\"171\":1,\"172\":1,\"174\":2,\"183\":1,\"215\":2,\"226\":1,\"227\":2,\"232\":1,\"236\":4,\"240\":2,\"241\":1,\"243\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"253\":1,\"254\":2,\"255\":2,\"258\":1,\"271\":1,\"275\":1,\"280\":1,\"285\":1,\"293\":1,\"298\":1,\"303\":1,\"318\":3,\"326\":1,\"348\":1,\"353\":1,\"358\":1,\"371\":1,\"376\":1,\"377\":1,\"378\":1,\"383\":1,\"388\":1,\"398\":1,\"408\":1,\"413\":1,\"418\":1,\"432\":1,\"437\":1,\"447\":1,\"449\":1,\"451\":2,\"454\":1,\"456\":2,\"459\":1,\"461\":2,\"466\":2}}],[\"thus\",{\"1\":{\"16\":1,\"226\":1}}],[\"third\",{\"0\":{\"160\":1,\"169\":1},\"1\":{\"161\":1,\"169\":1}}],[\"think\",{\"1\":{\"87\":1}}],[\"things\",{\"1\":{\"181\":1}}],[\"thing\",{\"1\":{\"12\":1,\"13\":1,\"84\":1}}],[\"this\",{\"0\":{\"57\":1},\"1\":{\"0\":1,\"3\":2,\"4\":3,\"5\":3,\"6\":1,\"7\":1,\"8\":2,\"9\":1,\"10\":1,\"13\":1,\"14\":1,\"16\":2,\"17\":1,\"20\":1,\"23\":3,\"26\":17,\"28\":2,\"31\":1,\"32\":1,\"34\":1,\"37\":2,\"43\":4,\"46\":1,\"50\":1,\"55\":5,\"57\":2,\"59\":1,\"60\":1,\"61\":2,\"64\":1,\"65\":1,\"67\":1,\"68\":1,\"82\":2,\"84\":3,\"86\":3,\"87\":2,\"90\":2,\"91\":1,\"95\":1,\"96\":2,\"98\":1,\"100\":1,\"101\":1,\"103\":2,\"108\":1,\"111\":1,\"115\":2,\"119\":1,\"128\":1,\"136\":4,\"142\":10,\"144\":1,\"147\":1,\"150\":1,\"151\":1,\"153\":3,\"155\":1,\"156\":1,\"157\":1,\"163\":1,\"164\":1,\"165\":2,\"166\":1,\"167\":2,\"171\":1,\"172\":5,\"174\":5,\"175\":2,\"178\":1,\"179\":2,\"181\":2,\"183\":3,\"186\":3,\"192\":2,\"196\":1,\"203\":1,\"205\":2,\"208\":1,\"211\":1,\"214\":2,\"217\":1,\"218\":1,\"220\":1,\"223\":1,\"224\":1,\"227\":2,\"230\":1,\"231\":1,\"232\":1,\"235\":1,\"236\":5,\"239\":1,\"241\":3,\"243\":1,\"244\":1,\"247\":2,\"248\":2,\"249\":2,\"250\":2,\"251\":2,\"252\":2,\"253\":2,\"254\":2,\"256\":1,\"258\":1,\"261\":3,\"271\":2,\"275\":1,\"285\":1,\"288\":3,\"293\":2,\"298\":2,\"303\":3,\"313\":3,\"315\":1,\"318\":2,\"323\":1,\"325\":1,\"326\":1,\"327\":1,\"330\":4,\"332\":1,\"335\":3,\"336\":1,\"346\":3,\"351\":3,\"356\":4,\"361\":2,\"363\":1,\"366\":2,\"371\":3,\"378\":3,\"383\":1,\"388\":1,\"393\":2,\"398\":2,\"403\":2,\"408\":1,\"413\":2,\"418\":3,\"424\":1,\"426\":1,\"427\":1,\"429\":2,\"432\":1,\"434\":1,\"437\":1,\"442\":2,\"447\":1,\"451\":2,\"456\":2,\"461\":2,\"466\":2,\"469\":1,\"471\":1}}],[\"thrown\",{\"1\":{\"335\":1}}],[\"throughout\",{\"1\":{\"58\":1,\"61\":1,\"81\":1,\"82\":1,\"83\":1,\"86\":1,\"227\":1,\"335\":1,\"376\":1}}],[\"through\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"26\":1,\"28\":1,\"34\":1,\"43\":1,\"81\":1,\"89\":1,\"142\":1,\"181\":1,\"224\":1,\"235\":1,\"240\":1}}],[\"threaded\",{\"1\":{\"290\":1}}],[\"thread\",{\"0\":{\"442\":1},\"1\":{\"87\":5,\"88\":3,\"103\":1,\"234\":1,\"261\":2,\"263\":5,\"288\":1,\"290\":3,\"318\":1,\"376\":2,\"442\":2,\"443\":1,\"444\":3}}],[\"threading\",{\"0\":{\"87\":1},\"1\":{\"87\":1,\"261\":1,\"288\":1,\"442\":1}}],[\"threads\",{\"1\":{\"12\":1,\"58\":1,\"87\":1}}],[\"three\",{\"1\":{\"20\":1,\"171\":1}}],[\"their\",{\"1\":{\"34\":1,\"43\":1,\"46\":1,\"111\":1,\"123\":1,\"135\":3,\"136\":2,\"139\":1,\"236\":3}}],[\"these\",{\"1\":{\"16\":1,\"20\":2,\"43\":2,\"58\":1,\"114\":1,\"115\":1,\"116\":1,\"140\":1,\"141\":1,\"143\":1,\"174\":1,\"189\":1,\"202\":1,\"235\":1,\"236\":1,\"243\":1,\"318\":1,\"330\":1,\"377\":1,\"448\":1}}],[\"they\",{\"1\":{\"13\":1,\"16\":1,\"17\":1,\"26\":1,\"55\":2,\"88\":1,\"103\":2,\"165\":1,\"167\":1,\"190\":1,\"221\":1,\"246\":1,\"418\":1}}],[\"them\",{\"1\":{\"10\":1,\"18\":1,\"34\":1,\"58\":1,\"62\":2,\"91\":1,\"96\":1,\"104\":1,\"115\":2,\"139\":1,\"140\":2,\"153\":1,\"236\":2,\"239\":2,\"241\":1,\"447\":2}}],[\"then\",{\"1\":{\"10\":1,\"15\":1,\"16\":1,\"20\":1,\"60\":1,\"95\":1,\"164\":2,\"173\":1,\"178\":1,\"227\":1,\"238\":1,\"255\":1,\"323\":1,\"447\":1}}],[\"there\",{\"1\":{\"3\":2,\"8\":1,\"26\":1,\"28\":1,\"36\":1,\"43\":1,\"55\":1,\"87\":1,\"100\":1,\"287\":1,\"303\":1,\"471\":1}}],[\"the\",{\"0\":{\"20\":1,\"26\":1,\"29\":1,\"30\":1,\"44\":1,\"48\":1,\"60\":1,\"245\":1},\"1\":{\"0\":1,\"2\":1,\"4\":2,\"5\":3,\"6\":3,\"7\":2,\"8\":2,\"9\":17,\"10\":10,\"12\":3,\"13\":3,\"14\":5,\"15\":3,\"16\":24,\"17\":15,\"18\":7,\"19\":3,\"20\":4,\"21\":1,\"22\":2,\"23\":5,\"24\":6,\"25\":4,\"26\":16,\"27\":3,\"28\":16,\"29\":1,\"30\":1,\"31\":6,\"32\":8,\"33\":1,\"34\":7,\"36\":2,\"37\":2,\"42\":4,\"43\":20,\"44\":4,\"46\":7,\"48\":1,\"50\":3,\"55\":14,\"57\":2,\"58\":6,\"59\":3,\"60\":2,\"61\":5,\"62\":7,\"72\":2,\"75\":1,\"78\":1,\"81\":4,\"82\":2,\"84\":9,\"86\":8,\"87\":1,\"88\":11,\"90\":20,\"91\":6,\"92\":2,\"93\":4,\"96\":3,\"97\":3,\"98\":1,\"99\":3,\"100\":2,\"101\":1,\"103\":9,\"104\":3,\"105\":1,\"106\":3,\"107\":1,\"108\":1,\"111\":3,\"114\":4,\"115\":6,\"116\":3,\"117\":2,\"119\":2,\"123\":3,\"128\":1,\"133\":2,\"135\":4,\"136\":6,\"137\":3,\"139\":4,\"140\":3,\"141\":4,\"142\":21,\"143\":1,\"144\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"153\":3,\"155\":3,\"156\":5,\"160\":2,\"161\":8,\"163\":7,\"164\":9,\"165\":12,\"166\":4,\"167\":13,\"168\":3,\"169\":2,\"170\":4,\"171\":2,\"172\":17,\"173\":1,\"174\":14,\"178\":7,\"180\":3,\"181\":10,\"183\":1,\"184\":4,\"189\":1,\"190\":2,\"192\":1,\"193\":1,\"195\":1,\"196\":1,\"198\":1,\"199\":1,\"201\":1,\"203\":1,\"205\":1,\"206\":1,\"208\":1,\"211\":1,\"214\":2,\"215\":6,\"217\":1,\"218\":1,\"220\":1,\"221\":1,\"223\":1,\"224\":3,\"225\":5,\"226\":1,\"227\":9,\"228\":9,\"230\":4,\"232\":3,\"234\":1,\"235\":3,\"236\":12,\"238\":3,\"239\":1,\"240\":2,\"241\":5,\"242\":1,\"243\":7,\"244\":7,\"245\":2,\"246\":3,\"247\":2,\"248\":5,\"249\":5,\"250\":8,\"251\":5,\"252\":3,\"253\":6,\"254\":6,\"255\":4,\"256\":1,\"258\":2,\"261\":1,\"263\":2,\"266\":3,\"271\":6,\"273\":2,\"275\":6,\"277\":1,\"280\":5,\"285\":5,\"287\":2,\"288\":4,\"293\":4,\"298\":1,\"303\":1,\"308\":1,\"310\":1,\"313\":3,\"315\":3,\"318\":3,\"323\":2,\"326\":3,\"327\":1,\"330\":3,\"332\":1,\"335\":6,\"336\":3,\"341\":4,\"346\":2,\"348\":3,\"351\":2,\"353\":3,\"356\":2,\"358\":2,\"361\":1,\"366\":5,\"371\":5,\"376\":4,\"377\":1,\"378\":1,\"408\":1,\"415\":1,\"418\":1,\"420\":1,\"423\":1,\"427\":6,\"432\":4,\"437\":2,\"442\":4,\"447\":5,\"448\":1,\"449\":1,\"451\":1,\"454\":1,\"456\":1,\"459\":1,\"461\":1,\"466\":1,\"469\":5,\"471\":3}}],[\"topic\",{\"1\":{\"87\":1}}],[\"top\",{\"1\":{\"43\":1,\"142\":1}}],[\"tool\",{\"1\":{\"57\":2,\"91\":2}}],[\"tools\",{\"0\":{\"89\":1,\"90\":1,\"91\":1,\"199\":1,\"447\":1},\"1\":{\"42\":1,\"58\":1,\"81\":1,\"89\":1,\"90\":7,\"133\":1,\"189\":1,\"199\":1,\"200\":2,\"201\":2,\"227\":1,\"447\":3,\"448\":1,\"450\":1,\"451\":1,\"455\":1,\"456\":1,\"460\":1,\"461\":1,\"465\":1,\"466\":1}}],[\"too\",{\"1\":{\"18\":1}}],[\"together\",{\"0\":{\"81\":1},\"1\":{\"10\":1,\"12\":1,\"60\":1,\"318\":1,\"442\":1}}],[\"to\",{\"1\":{\"0\":2,\"3\":1,\"4\":3,\"5\":2,\"7\":1,\"8\":3,\"9\":5,\"10\":6,\"12\":2,\"13\":2,\"15\":6,\"16\":11,\"17\":6,\"18\":10,\"19\":1,\"20\":1,\"22\":1,\"23\":2,\"25\":2,\"26\":14,\"27\":4,\"28\":1,\"29\":1,\"30\":1,\"31\":3,\"32\":6,\"33\":1,\"34\":4,\"35\":1,\"36\":1,\"37\":10,\"42\":3,\"43\":7,\"44\":4,\"46\":3,\"50\":6,\"55\":8,\"57\":2,\"58\":5,\"60\":2,\"62\":1,\"81\":4,\"82\":6,\"83\":1,\"84\":5,\"86\":13,\"87\":2,\"88\":2,\"90\":5,\"91\":5,\"92\":1,\"93\":1,\"97\":2,\"100\":1,\"103\":9,\"104\":1,\"107\":1,\"108\":2,\"111\":2,\"114\":2,\"115\":6,\"116\":8,\"117\":1,\"119\":1,\"123\":4,\"128\":3,\"136\":3,\"137\":2,\"139\":4,\"140\":2,\"141\":3,\"142\":5,\"143\":2,\"153\":5,\"155\":3,\"156\":4,\"161\":2,\"165\":4,\"167\":5,\"169\":2,\"170\":1,\"171\":1,\"172\":5,\"174\":7,\"178\":2,\"180\":1,\"181\":3,\"184\":2,\"196\":2,\"199\":1,\"201\":1,\"203\":1,\"205\":2,\"208\":1,\"214\":1,\"215\":1,\"224\":1,\"225\":2,\"226\":1,\"227\":1,\"230\":1,\"231\":1,\"233\":1,\"235\":3,\"236\":9,\"239\":1,\"240\":5,\"241\":2,\"243\":1,\"244\":5,\"245\":4,\"246\":1,\"247\":1,\"248\":2,\"249\":2,\"250\":5,\"251\":5,\"252\":2,\"253\":3,\"254\":2,\"266\":2,\"271\":2,\"275\":3,\"280\":2,\"285\":2,\"287\":1,\"288\":2,\"290\":4,\"293\":1,\"303\":1,\"318\":2,\"323\":2,\"325\":1,\"326\":1,\"327\":2,\"330\":2,\"332\":1,\"335\":6,\"336\":2,\"341\":1,\"346\":2,\"348\":1,\"351\":2,\"353\":1,\"361\":1,\"366\":1,\"368\":1,\"371\":1,\"376\":5,\"400\":2,\"408\":1,\"413\":1,\"415\":2,\"420\":2,\"426\":1,\"427\":1,\"429\":1,\"432\":1,\"439\":1,\"442\":2,\"447\":5,\"469\":3,\"471\":2}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
