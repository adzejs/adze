import{_ as s,c as r,b as e,e as a,w as n,d as t,a as i,r as o,o as d}from"./app-CocLtHWe.js";const c={},m=i(`<h1 id="log-class" tabindex="-1"><a class="header-anchor" href="#log-class"><span>Log Class</span></a></h1><p>The <strong>Log Class</strong> is the core of the Adze library and contains most of the features. All Adze logs begin with the Log Class.</p><p>When generating a new log, you&#39;ll start by importing the Log Class which is the default export of the library. In all examples you will see it imported with the name <code>adze</code>.</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="class-methods" tabindex="-1"><a class="header-anchor" href="#class-methods"><span>Class Methods</span></a></h2><p>Every modifier and terminator method within the Log Class has a corresponding static implementation. This allows the user to call and instantiate an instance of the Log Class <strong>without</strong> the need of explicitly calling <code>new Log()</code>.</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Example value to be logged.</span></span>
<span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is a log.&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="getters" tabindex="-1"><a class="header-anchor" href="#getters"><span>Getters</span></a></h3><p>The public getters are used for getting data from a log instance.</p>`,13),u=e("h3",{id:"modifiers",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#modifiers"},[e("span",null,"Modifiers")])],-1),f=e("p",null,"Modifiers are used to alter log behavior or add context.",-1),h=e("h3",{id:"terminators",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#terminators"},[e("span",null,"Terminators")])],-1),p=e("p",null,"Terminators end a log and generate it at the specified level.",-1);function g(_,b){const l=o("RouteLink");return d(),r("div",null,[m,e("ul",null,[e("li",null,[a(l,{to:"/reference/getters.html#data"},{default:n(()=>[t("data")]),_:1}),t(" - Returns the log data.")]),e("li",null,[a(l,{to:"/reference/getters.html#modifierdata"},{default:n(()=>[t("modifierData")]),_:1}),t(" - Returns object containing key/values from called modifiers.")]),e("li",null,[a(l,{to:"/reference/getters.html#configuration"},{default:n(()=>[t("configuration")]),_:1}),t(" - Returns the configuration that this log instance is using.")])]),u,f,e("ul",null,[e("li",null,[a(l,{to:"/reference/modifiers.html#assert"},{default:n(()=>[t("assert")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#closethread"},{default:n(()=>[t("closeThread")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#count"},{default:n(()=>[t("count")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#countclear"},{default:n(()=>[t("countClear")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#countreset"},{default:n(()=>[t("countReset")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#dir"},{default:n(()=>[t("dir")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#dirxml"},{default:n(()=>[t("dirxml")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#dump"},{default:n(()=>[t("dump")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#format"},{default:n(()=>[t("format")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#group"},{default:n(()=>[t("group")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#groupcollapsed"},{default:n(()=>[t("groupCollapsed")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#groupend"},{default:n(()=>[t("groupEnd")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#if"},{default:n(()=>[t("if")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#label"},{default:n(()=>[t("label")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#meta"},{default:n(()=>[t("meta")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#namespace--ns"},{default:n(()=>[t("namespace/ns")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#silent"},{default:n(()=>[t("silent")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#table"},{default:n(()=>[t("table")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#time"},{default:n(()=>[t("time")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#timeend"},{default:n(()=>[t("timeEnd")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#timenow"},{default:n(()=>[t("timeNow")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#timestamp"},{default:n(()=>[t("timestamp")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#trace"},{default:n(()=>[t("trace")]),_:1})]),e("li",null,[a(l,{to:"/reference/modifiers.html#withemoji"},{default:n(()=>[t("withEmoji")]),_:1})])]),h,p,e("ul",null,[e("li",null,[a(l,{to:"/reference/terminators.html#alert"},{default:n(()=>[t("alert")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#error"},{default:n(()=>[t("error")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#warn"},{default:n(()=>[t("warn")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#info"},{default:n(()=>[t("info")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#fail"},{default:n(()=>[t("fail")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#success"},{default:n(()=>[t("success")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#log"},{default:n(()=>[t("log")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#debug"},{default:n(()=>[t("debug")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#verbose"},{default:n(()=>[t("verbose")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#custom"},{default:n(()=>[t("custom")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#thread"},{default:n(()=>[t("thread")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#seal"},{default:n(()=>[t("seal")]),_:1})]),e("li",null,[a(l,{to:"/reference/terminators.html#sealtag"},{default:n(()=>[t("sealTag")]),_:1})])])])}const k=s(c,[["render",g],["__file","log-class.html.vue"]]),x=JSON.parse(`{"path":"/reference/log-class.html","title":"Log Class","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Class Methods","slug":"class-methods","link":"#class-methods","children":[{"level":3,"title":"Getters","slug":"getters","link":"#getters","children":[]},{"level":3,"title":"Modifiers","slug":"modifiers","link":"#modifiers","children":[]},{"level":3,"title":"Terminators","slug":"terminators","link":"#terminators","children":[]}]}],"git":{"updatedTime":1726004801000,"contributors":[{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1}]},"filePathRelative":"reference/log-class.md","excerpt":"\\n<p>The <strong>Log Class</strong> is the core of the Adze library and contains most of the features. All Adze logs\\nbegin with the Log Class.</p>\\n<p>When generating a new log, you'll start by importing the Log Class which is the default export\\nof the library. In all examples you will see it imported with the name <code>adze</code>.</p>"}`);export{k as comp,x as data};
