import{_ as o,c as l,b as s,e as t,w as e,d as n,a as p,r as i,o as c}from"./app-BSViwGMH.js";const r={},u=s("h1",{id:"putting-it-all-together",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#putting-it-all-together"},[s("span",null,"Putting It All Together")])],-1),d=s("p",null,"In summary, we have learned how to do the following:",-1),m=p(`<h2 id="production-example" tabindex="-1"><a class="header-anchor" href="#production-example"><span>Production Example</span></a></h2><p>Here is an overview of a basic implementation of Adze for use in a production environment.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> AdzeTransportFile <span class="token keyword">from</span> <span class="token string">&#39;@adze/transport-file&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Make the output format pretty when in development. Use JSON formatting in all other environments.</span></span>
<span class="line"><span class="token keyword">const</span> format <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEV</span> <span class="token operator">?</span> <span class="token string">&#39;pretty&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Get an environment variable for controlling my active log level. Default to info level.</span></span>
<span class="line"><span class="token keyword">const</span> activeLevel <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span> <span class="token operator">??</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Setup our middleware to write logs to rotating log files</span></span>
<span class="line"><span class="token keyword">const</span> fileTransport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdzeTransportFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> directory<span class="token operator">:</span> <span class="token string">&#39;./logs&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> fileTransport<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Configure our logger globally.</span></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  activeLevel<span class="token punctuation">,</span></span>
<span class="line">  format<span class="token punctuation">,</span></span>
<span class="line">  middleware<span class="token operator">:</span> <span class="token punctuation">[</span>fileTransport<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Listen for alerts to trigger a notification</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;alert&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// POST my alert to a service that will notify me</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create our logger instance to use throughout our app</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> adze<span class="token punctuation">.</span>timestamp<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;MyApp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> logger<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And using our logger in another module...</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// my-module.ts</span></span>
<span class="line"><span class="token keyword">import</span> _logger <span class="token keyword">from</span> <span class="token string">&#39;./logger&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add a namespace of &quot;my-module&quot; for this module&#39;s logs.</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> _logger<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;my-module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;This is some information about my application.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g={class:"custom-container tip"},k=s("p",{class:"custom-container-title"},"TIP",-1);function v(f,h){const a=i("RouteLink");return c(),l("div",null,[u,d,s("ul",null,[s("li",null,[t(a,{to:"/getting-started/installation.html"},{default:e(()=>[n("Installing Adze")]),_:1})]),s("li",null,[t(a,{to:"/getting-started/setup.html"},{default:e(()=>[n("Setting up Adze for use throughout our applications")]),_:1})]),s("li",null,[t(a,{to:"/getting-started/setup.html#configure-the-shared-logger"},{default:e(()=>[n("Configuring and customizing Adze")]),_:1})]),s("li",null,[t(a,{to:"/getting-started/annotation.html"},{default:e(()=>[n("Annotating our logs with meta data")]),_:1})]),s("li",null,[t(a,{to:"/getting-started/capture-data.html"},{default:e(()=>[n("Capturing our log data for transport")]),_:1})]),s("li",null,[t(a,{to:"/getting-started/filtering.html"},{default:e(()=>[n("Filtering our logs for readability")]),_:1})]),s("li",null,[t(a,{to:"/getting-started/tools.html"},{default:e(()=>[n("and using tools to filter our logs in our runtime environments")]),_:1})])]),s("p",null,[n("If you would like to dive even deeper into the functionality that Adze provides, please read through the "),t(a,{to:"/reference/introduction.html"},{default:e(()=>[n("Reference Manual")]),_:1}),n(". Here you will be introduced to all of the available "),t(a,{to:"/reference/modifiers.html"},{default:e(()=>[n("modifiers")]),_:1}),n(" and "),t(a,{to:"/reference/terminators.html"},{default:e(()=>[n("terminators")]),_:1}),n(", as well as greater detail about "),t(a,{to:"/reference/formatters.html"},{default:e(()=>[n("log formatting")]),_:1}),n(" and "),t(a,{to:"/reference/configuration.html"},{default:e(()=>[n("customizability")]),_:1}),n(".")]),m,s("div",g,[k,s("p",null,[n("Now go read the "),t(a,{to:"/reference/introduction.html"},{default:e(()=>[n("reference manual")]),_:1}),n(" and have fun!")])])])}const _=o(r,[["render",v],["__file","putting-it-all-together.html.vue"]]),y=JSON.parse('{"path":"/getting-started/putting-it-all-together.html","title":"Putting It All Together","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Production Example","slug":"production-example","link":"#production-example","children":[]}],"git":{"updatedTime":1726004801000,"contributors":[{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1}]},"filePathRelative":"getting-started/putting-it-all-together.md","excerpt":"\\n<p>In summary, we have learned how to do the following:</p>\\n<ul>\\n<li><a href=\\"/getting-started/installation.html\\" target=\\"_blank\\">Installing Adze</a></li>\\n<li><a href=\\"/getting-started/setup.html\\" target=\\"_blank\\">Setting up Adze for use throughout our applications</a></li>\\n<li><a href=\\"/getting-started/setup.html#configure-the-shared-logger\\" target=\\"_blank\\">Configuring and customizing Adze</a></li>\\n<li><a href=\\"/getting-started/annotation.html\\" target=\\"_blank\\">Annotating our logs with meta data</a></li>\\n<li><a href=\\"/getting-started/capture-data.html\\" target=\\"_blank\\">Capturing our log data for transport</a></li>\\n<li><a href=\\"/getting-started/filtering.html\\" target=\\"_blank\\">Filtering our logs for readability</a></li>\\n<li><a href=\\"/getting-started/tools.html\\" target=\\"_blank\\">and using tools to filter our logs in our runtime environments</a></li>\\n</ul>"}');export{_ as comp,y as data};
