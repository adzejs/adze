import{_ as o,c as l,b as t,d as n,e as a,w as e,a as i,r as p,o as r}from"./app-BSViwGMH.js";const c="/assets/microfrontend-example-5znqJunK.png",u="/assets/overrides-example-browser-Bvx--2G9.png",d="/assets/overrides-example-node-D18ZIMDr.png",g={},h=t("h1",{id:"global-store",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#global-store"},[t("span",null,"Global Store")])],-1),m=t("strong",null,"Global Store",-1),k=i('<h2 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work"><span>How Does It Work?</span></a></h2><p>One of the primary purposes of the Global Store is to enable large project to centrally control how their logs render. Let&#39;s imagine we have a micro-frontend architecture where we have multiple front-end applications running in the same browser context.</p><p><img src="'+c+`" alt="Microfrontend example"></p><p>One of the major challenges with logging with microfrontends is that all of the applications share the same runtime environment. This means that any logs that an application generates are mixed in with logs generated by any of the other applications.</p><p>Debugging one of these apps would mean we would have to sort through a lot of logs that are not applicable. In addition, there would normally be no easy way to configure the logging of these applications centrally.</p><p>With the Adze Global Store you can easily configure all instances running in the same browser context. Let&#39;s take a look at some code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is a log!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code looks pretty simple. We&#39;re just importing Adze and generating a single log. However, behind the scenes, Adze will check if a <strong>Global Store</strong> exists, and if it doesn&#39;t exist it will automatically instantiate an instance of it in the global context of your environment.</p><p>Here&#39;s where it will be created:</p><ul><li><code>window.$adzeGlobal</code> - If your environment is a web browser / <a href="https://docs.deno.com/api/web/~/Window" target="_blank" rel="noopener noreferrer">deno</a>, the Global Store will be attached to the <code>window</code>.</li><li><code>global.$adzeGlobal</code> - If your environment is <a href="https://nodejs.org/api/globals.html#global" target="_blank" rel="noopener noreferrer">node</a> / <a href="https://bun.sh/docs/api/globals" target="_blank" rel="noopener noreferrer">bun</a>, the Global Store will be attached to the <code>global</code> value.</li></ul><p>The logs that are generated within your runtime context will take any configuration that is set on the Global Store and merge it on top of its current configuration as an override.</p><p>What this means is that even if multiple applications generate logs, you can control all of the logs by providing configuration to the Global Store.</p><h2 id="using-the-setup-function" tabindex="-1"><a class="header-anchor" href="#using-the-setup-function"><span>Using the Setup Function</span></a></h2><p>Let&#39;s look at an example of overriding log configuration centrally using the Global Store with the <code>setup()</code> function.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// By calling setup, we will instantiate the global store with some configuration overrides.</span></span>
<span class="line"><span class="token comment">// We will restrict the active log level to info for everything in our runtime context.</span></span>
<span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  activeLevel<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  format<span class="token operator">:</span> <span class="token string">&#39;pretty&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Meanwhile... in microfrontend application #1...</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// mfe-application-1.ts</span></span>
<span class="line"><span class="token keyword">import</span> adze <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> adze<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;application-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to Application #1!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Something happened that I want to log about.&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;Some more details here...&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And in microfrontend application #2...</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// mfe-application-2.ts</span></span>
<span class="line"><span class="token keyword">import</span> adze <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> adze<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;application-2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to Application #2!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Oh no! An error occurred in application #2!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;Logging some more details for debugging purposes.&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="browser-output" tabindex="-1"><a class="header-anchor" href="#browser-output"><span>Browser Output</span></a></h4><p><img src="`+u+'" alt="Example browser output of the active level overrides"></p><h4 id="server-output" tabindex="-1"><a class="header-anchor" href="#server-output"><span>Server Output</span></a></h4><p><img src="'+d+'" alt="Example server output of the active level overrides"></p><hr>',24);function f(b,v){const s=p("RouteLink");return r(),l("div",null,[h,t("p",null,[n("The "),m,n(" is a global cache and control hub for your Adze logs. The primary purposes of a GlobalStore are to enable global "),a(s,{to:"/reference/configuration.html"},{default:e(()=>[n("configuration")]),_:1}),n(" overrides, log listeners, and "),a(s,{to:"/reference/global-store.html#tools"},{default:e(()=>[n("tools")]),_:1}),n(" for filtering and recalling your "),a(s,{to:"/reference/configuration.html#user-configuration"},{default:e(()=>[n("cached")]),_:1}),n(" logs. To see how a GlobalStore fits into the architecture, refer to the "),a(s,{to:"/getting-started/introduction.html#lifecycle"},{default:e(()=>[n("Lifecycle Diagram")]),_:1}),n(".")]),k,t("p",null,[n("Notice that in our example output that the "),a(s,{to:"/reference/terminators.html#log"},{default:e(()=>[n("log")]),_:1}),n(" and "),a(s,{to:"/reference/terminators.html#debug"},{default:e(()=>[n("debug")]),_:1}),n(" logs are not rendering. This is because our store is forcing their log level to only show up to "),a(s,{to:"/reference/terminators.html#info"},{default:e(()=>[n("info")]),_:1}),n(" level. Also, even though each application is defining the log format to use the "),a(s,{to:"/reference/formatters.html#json-formatter"},{default:e(()=>[n("json format")]),_:1}),n(", the logs are printing with the "),a(s,{to:"/reference/formatters.html#pretty-formatter"},{default:e(()=>[n("pretty format")]),_:1}),n(" because the log configuration is overwritten by the global configuration.")])])}const y=o(g,[["render",f],["__file","global-store.html.vue"]]),_=JSON.parse('{"path":"/getting-started/global-store.html","title":"Global Store","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"How Does It Work?","slug":"how-does-it-work","link":"#how-does-it-work","children":[]},{"level":2,"title":"Using the Setup Function","slug":"using-the-setup-function","link":"#using-the-setup-function","children":[]}],"git":{"updatedTime":1726150288000,"contributors":[{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1},{"name":"Andrew Stacy","email":"astacy@stratacache.com","commits":1}]},"filePathRelative":"getting-started/global-store.md","excerpt":"\\n<p>The <strong>Global Store</strong> is a global cache and control hub for your Adze logs. The primary purposes of a\\nGlobalStore are to enable global <a href=\\"/reference/configuration.html\\" target=\\"_blank\\">configuration</a> overrides, log listeners,\\nand <a href=\\"/reference/global-store.html#tools\\" target=\\"_blank\\">tools</a> for filtering and recalling your <a href=\\"/reference/configuration.html#user-configuration\\" target=\\"_blank\\">cached</a> logs. To\\nsee how a GlobalStore fits into the architecture, refer to the <a href=\\"/getting-started/introduction.html#lifecycle\\" target=\\"_blank\\">Lifecycle Diagram</a>.</p>"}');export{y as comp,_ as data};
