import{_ as e,c as t,b as p,d as n,e as l,w as i,a as s,r as o,o as c}from"./app-yceZIKom.js";const u="/assets/filtering-example-namespaces-1-DYy5H5DJ.png",r="/assets/filter-example-labels-1-COcv_Atg.png",d="/assets/filter-example-levels-1-B40u61Ek.png",k={},m=s(`<h1 id="filtering-logs" tabindex="-1"><a class="header-anchor" href="#filtering-logs"><span>Filtering Logs</span></a></h1><p>When working in large applications, often you will have a large number of logs that are generated. With a large number of logs it can be difficult to sift through them to find the logs that you care about.</p><p>Adze offers a few ways to help deal with filtering your logs so that you can focus on the ones that are currently relevant to you.</p><p>When setting up Adze, in the configuration you can provide criteria for what logs will be rendered based on either their label, namespace, or level. This filter can either <code>&quot;include&quot;</code> or <code>&quot;exclude&quot;</code> logs.</p><ul><li>If the <strong>include</strong> filter type is used, only logs that match the values will be printed.</li><li>If the <strong>exclude</strong> filter type is used, any logs that match the values will not be printed.</li></ul><h2 id="filtering-namespaces" tabindex="-1"><a class="header-anchor" href="#filtering-namespaces"><span>Filtering Namespaces</span></a></h2><p>Let&#39;s take a look at an example of how to apply an <code>&quot;include&quot;</code> filter against some logs with namespaces.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  filters<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    namespaces<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      type<span class="token operator">:</span> <span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;I will print because I&#39;m included.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;I will print because I&#39;m included.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I will NOT print because I am not included.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I will print because I&#39;m included.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I will not print because I do not have any namespaces.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-output" tabindex="-1"><a class="header-anchor" href="#example-output"><span>Example Output</span></a></h4><p><img src="`+u+`" alt="Example output after filtering only namespaces that include the names foo and bar"></p><hr><p>Filtering by namespaces is particularly useful when debugging as it allows you to focus on a specific code module without the noise of other logs. There is, however, one drawback that can make filtering by namespaces cumbersome.</p><p><em>How do I know what the namespaces in my app are?</em></p><h3 id="restricting-namespaces-ts-only" tabindex="-1"><a class="header-anchor" href="#restricting-namespaces-ts-only"><span>Restricting Namespaces (TS Only)</span></a></h3><p>If your application uses TypeScript, Adze provides a convenient way to force all namespaces to be registered in a centralized location. This is especially helpful because it forces developers to keep a running list of all namespaces in use. This makes it much easier to know which namespaces to filter by.</p><p>Let&#39;s look at an example of restricting namespaces.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Let&#39;s create a TS type for the valid namespaces in our application</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ValidNamespaces</span> <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> adze<span class="token punctuation">.</span>timestamp<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">seal</span><span class="token generic class-name"><span class="token operator">&lt;</span>ValidNamespaces<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, in other places in our app where we import our sealed logger we will only be able to apply namespaces of <code>&quot;foo&quot;</code> and <code>&quot;bar&quot;</code>.</p><p>Let&#39;s look at an example where we try to use an invalid namespace.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&#39;./logger&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Trying to log something in the baz module.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//      ~~~~~ &lt;- Argument of type &#39;&quot;baz&quot;&#39; is not assignable to parameter of type &#39;ValidNamespaces&#39;.ts(2345)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Typescript will prevent us from writing a namespace of <code>&#39;baz&#39;</code> until we add <code>&#39;baz&#39;</code> to our <code>ValidNamespaces</code> type.</p><h2 id="filtering-labels" tabindex="-1"><a class="header-anchor" href="#filtering-labels"><span>Filtering Labels</span></a></h2><p>Just like our example above where we are filtering namespaces, we can also filter logs by labels.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  filters<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    labels<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      type<span class="token operator">:</span> <span class="token string">&#39;exclude&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;I will not print because I&#39;m excluded.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;I will print because I&#39;m NOT excluded.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I will print because I am NOT excluded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I will not print because I&#39;m excluded.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I will not print because I do not have a label.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-output-1" tabindex="-1"><a class="header-anchor" href="#example-output-1"><span>Example Output</span></a></h4><p><img src="`+r+'" alt="Example output after filtering labels that exclude the name foo"></p><hr><h2 id="filtering-by-levels" tabindex="-1"><a class="header-anchor" href="#filtering-by-levels"><span>Filtering by Levels</span></a></h2>',28),g=s(`<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  filters<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    levels<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      type<span class="token operator">:</span> <span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;log&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;I will print because I am included.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;I will not print because I am NOT included.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I will print because I am included.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;I will not print because I am not included.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;I will not print because I am not included.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-output-2" tabindex="-1"><a class="header-anchor" href="#example-output-2"><span>Example Output</span></a></h4><p><img src="`+d+'" alt="Example output after filtering levels that include the levels warn and log"></p><hr>',4);function v(b,h){const a=o("RouteLink");return c(),t("div",null,[m,p("p",null,[n("Lastly, we can filter logs by log levels using a "),l(a,{to:"/reference/configuration.html#levelselector-type"},{default:i(()=>[n("LevelSelector")]),_:1}),n(" value.")]),g])}const y=e(k,[["render",v],["__file","filtering.html.vue"]]),w=JSON.parse('{"path":"/getting-started/filtering.html","title":"Filtering Logs","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Filtering Namespaces","slug":"filtering-namespaces","link":"#filtering-namespaces","children":[{"level":3,"title":"Restricting Namespaces (TS Only)","slug":"restricting-namespaces-ts-only","link":"#restricting-namespaces-ts-only","children":[]}]},{"level":2,"title":"Filtering Labels","slug":"filtering-labels","link":"#filtering-labels","children":[]},{"level":2,"title":"Filtering by Levels","slug":"filtering-by-levels","link":"#filtering-by-levels","children":[]}],"git":{"updatedTime":1726004801000,"contributors":[{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1}]},"filePathRelative":"getting-started/filtering.md","excerpt":"\\n<p>When working in large applications, often you will have a large number of logs that are generated.\\nWith a large number of logs it can be difficult to sift through them to find the logs that you care\\nabout.</p>\\n<p>Adze offers a few ways to help deal with filtering your logs so that you can focus on the ones that\\nare currently relevant to you.</p>"}');export{y as comp,w as data};
