import{_ as p,c as l,b as t,d as n,e as a,w as e,a as o,r as i,o as c}from"./app-CiZ6VypJ.js";const r="/assets/setup-shared-logger-jLtQgX4T.png",u={},d=o(`<h1 id="setting-up-adze" tabindex="-1"><a class="header-anchor" href="#setting-up-adze"><span>Setting Up Adze</span></a></h1><p>Although Adze can be used in a very simple, no-config manner by just importing it and using it, most often we want to centrally create shared loggers that can be imported and used throughout our application.</p><h2 id="create-a-shared-logger" tabindex="-1"><a class="header-anchor" href="#create-a-shared-logger"><span>Create a Shared Logger</span></a></h2><p>To create a shared logger, first create a new file somewhere that makes sense in your application (like <code>./src/logger.[ts|js]</code>).</p><p>After you have created your file, let&#39;s import our dependencies.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ./src/logger.ts</span></span>
<span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...more setup code will go here</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here you may have noticed the presence of the <code>setup</code> function that we are importing. This function is used to create a global log store and to apply global configuration to all adze logs.</p>`,7),m=o(`<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ./src/logger.ts</span></span>
<span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  meta<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    hello<span class="token operator">:</span> <span class="token string">&#39;world!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> adze<span class="token punctuation">.</span>withEmoji<span class="token punctuation">.</span>timestamp<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> logger<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The interesting thing about the code above is that we are calling the <code>seal</code> method instead of a typical log terminator like <code>info</code> or <code>error</code>.</p><p>What <code>seal</code> does is it returns a new Log class that inherits any modifiers and configuration from the parent log chain. In this case, it will inherit the modifiers <code>withEmoji</code> and <code>timestamp</code>.</p><p>Now, let&#39;s import and use our new shared logger.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// ./src/index.ts</span></span>
<span class="line"><span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&#39;./logger&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Logging from the index.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-output-from-index-ts" tabindex="-1"><a class="header-anchor" href="#example-output-from-index-ts"><span>Example output from index.ts</span></a></h4><p><img src="`+r+'" alt="Shared logger output"></p><h2 id="shared-logger-configuration" tabindex="-1"><a class="header-anchor" href="#shared-logger-configuration"><span>Shared Logger Configuration</span></a></h2>',8),g=t("code",null,"seal()",-1),k=o(`<p>For example, let&#39;s say we want to apply a middleware for transporting our logs to a remote API, but we only want to apply it to a specific child logger and not all loggers.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> AdzeTransportFile <span class="token keyword">from</span> <span class="token string">&#39;@adze/transport-file&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Setup our middleware to write logs to rotating log files</span></span>
<span class="line"><span class="token keyword">const</span> fileTransport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdzeTransportFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> directory<span class="token operator">:</span> <span class="token string">&#39;./logs&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> fileTransport<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Setup our middleware to write logs to rotating log files</span></span>
<span class="line"><span class="token keyword">const</span> remoteTransport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteTransport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> remoteTransport<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Configure our logger globally.</span></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  middleware<span class="token operator">:</span> <span class="token punctuation">[</span>fileTransport<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// &lt;-- This middleware applies to all loggers.</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create our logger instance to use throughout our app</span></span>
<span class="line"><span class="token keyword">const</span> logger <span class="token operator">=</span> adze<span class="token punctuation">.</span>timestamp<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;MyApp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create another logger that is exclusively used for a remote transport of its logs.</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> remoteLogger <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  middleware<span class="token operator">:</span> <span class="token punctuation">[</span>remoteTransport<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// &lt;-- This middleware will only apply to our remoteLogger.</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> logger<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice in the example above we are creating a remoteLogger that inherits its settings from our regular logger but extends the configuration by applying the remoteTransport middleware to it.</p><p>All subsequent logs that are generated by the <code>remoteLogger</code> will not make use of the <code>remoteTransport</code> middleware.</p><p>Keeping this in mind, you can overwrite any setup configuration when you call the <code>seal()</code> terminator.</p>`,5);function h(v,b){const s=i("RouteLink");return c(),l("div",null,[d,t("p",null,[n("Now that we have imported our dependencies, let's create and export a shared logger that has emoji's enabled and outputs timestamps with every log. We'll also attach some meta data globally to all loggers using the "),a(s,{to:"/reference/global-store.html#setup-function"},{default:e(()=>[n("setup function")]),_:1}),n(". We'll go more in-depth on why we we're doing this "),a(s,{to:"/getting-started/capture-data.html"},{default:e(()=>[n("later")]),_:1}),n(".")]),m,t("p",null,[n("In our example above, we created a shared logger by using the "),g,n(" method. Another feature of the "),a(s,{to:"/reference/terminators.html#seal"},{default:e(()=>[n("seal method")]),_:1}),n(" is that it allows you to provide an alternative setup configuration as a parameter.")]),k])}const w=p(u,[["render",h],["__file","setup.html.vue"]]),y=JSON.parse('{"path":"/getting-started/setup.html","title":"Setting Up Adze","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Create a Shared Logger","slug":"create-a-shared-logger","link":"#create-a-shared-logger","children":[]},{"level":2,"title":"Shared Logger Configuration","slug":"shared-logger-configuration","link":"#shared-logger-configuration","children":[]}],"git":{"updatedTime":1759846379000,"contributors":[{"name":"Andrew Stacy","email":"astacy@stratacache.com","commits":2},{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1}]},"filePathRelative":"getting-started/setup.md","excerpt":"\\n<p>Although Adze can be used in a very simple, no-config manner by just importing it and using it,\\nmost often we want to centrally create shared loggers that can be imported and used throughout our\\napplication.</p>\\n<h2>Create a Shared Logger</h2>\\n<p>To create a shared logger, first create a new file somewhere that makes sense in your application\\n(like <code>./src/logger.[ts|js]</code>).</p>"}');export{w as comp,y as data};
