import{_ as o,c as i,b as n,d as s,e as a,w as t,a as l,r as p,o as r}from"./app-CiZ6VypJ.js";const c={},d=n("h1",{id:"middleware",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#middleware"},[n("span",null,"Middleware")])],-1),u=n("strong",null,"Middleware Class",-1),h=l(`<p>Look for Adze middleware libraries for extending the functionality of your logs or for transporting your log data to various targets.</p><p>The <strong>Middleware Class</strong> is meant to be used as a base class that is extended for creating middleware components for Adze to use.</p><p>Because Adze is <a href="https://en.wikipedia.org/wiki/Isomorphic_JavaScript" target="_blank" rel="noopener noreferrer">isomorphic</a>, all middleware <strong>MUST</strong> also be isomorphic.</p><h2 id="environment-targeting" tabindex="-1"><a class="header-anchor" href="#environment-targeting"><span>Environment Targeting</span></a></h2><p>When creating middleware, sometimes you care about browser and backend environments, and sometimes you only care about one of them.</p><p>The Middleware Class requires that you specify your target if you only care about a single environment. If you don&#39;t specify your target environment, it will default to assuming your middleware cares about <code>&#39;both&#39;</code>. You can specify your target by providing your value as the first parameter to the <code>super()</code> call in your middleware constructor.</p><p>The options are:</p><ul><li><code>&quot;both&quot;</code> - (Default) This middleware will operate in both server and browser environments.</li><li><code>&quot;browser&quot;</code> - This middleware only operates in the browser.</li><li><code>&quot;server&quot;</code> - This middleware only operates in backend environments.</li></ul><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HelloMiddleware</span> <span class="token keyword">extends</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Let&#39;s target the server environment for our middleware.</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loading-dependencies" tabindex="-1"><a class="header-anchor" href="#loading-dependencies"><span>Loading Dependencies</span></a></h2><p>Middleware dependencies may function in one or both types of environments. To support all of the various situations, the Middleware Class provides simple hooks for conditionally loading dependencies.</p><p>These hooks are called when the consumer of the middleware calls the <code>load</code> method on the middleware instance. This is required because we must await our conditionally loaded dependencies.</p><p>The methods that are called for each environment are:</p><ul><li><code>protected async loadServerDependencies()</code> - Hook for loading server side dependencies.</li><li><code>protected async loadBrowserDependencies()</code> - Hook for loading browser side dependencies.</li></ul><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Make sure to include the &quot;type&quot; value here! Otherwise your code will try to import the function!</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> writeFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HelloMiddleware</span> <span class="token keyword">extends</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> writeFile<span class="token operator">:</span> <span class="token keyword">typeof</span> writeFile<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Load dependencies for the server environment.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">async</span> <span class="token function">loadServerDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// We&#39;ll load the fs.readFile function so we can write data to our file system.</span></span>
<span class="line">    <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Save our dependency to the private writeFile property to be used elsewhere in our middleware.</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>writeFile <span class="token operator">=</span> fs<span class="token punctuation">.</span>writeFile<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Load dependencies for the browser environment.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">async</span> <span class="token function">loadBrowserDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// We won&#39;t put anything here because we&#39;re only targeting the server.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-the-middleware" tabindex="-1"><a class="header-anchor" href="#using-the-middleware"><span>Using the Middleware</span></a></h3>`,18),m=l(`<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> HelloMiddleware <span class="token keyword">from</span> <span class="token string">&#39;./hello-middleware&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> helloMw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> helloMw<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  middleware<span class="token operator">:</span> <span class="token punctuation">[</span>helloMw<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="using-lifecycle-hooks" tabindex="-1"><a class="header-anchor" href="#using-lifecycle-hooks"><span>Using Lifecycle Hooks</span></a></h2>`,3),k=l(`<h3 id="constructed" tabindex="-1"><a class="header-anchor" href="#constructed"><span>constructed</span></a></h3><p>This hook is called during construction of a log instance.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  constructed<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),f=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),v=n("td",null,"1",-1),b=n("td",null,"log",-1),g=l(`<br><h3 id="beforemodifierapplied" tabindex="-1"><a class="header-anchor" href="#beforemodifierapplied"><span>beforeModifierApplied</span></a></h3><p>This hook is called just before a modifier is applied to a log instance.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  beforeModifierApplied<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">,</span> name<span class="token operator">:</span> ModifierName<span class="token punctuation">,</span> data<span class="token operator">:</span> ModifierData<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),w=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),_=n("td",null,"1",-1),y=n("td",null,"log",-1),T=n("td",null,"2",-1),x=n("td",null,"name",-1),M=n("code",null,'"withEmoji"',-1),A=n("td",null,"3",-1),j=n("td",null,"data",-1),L=l(`<br><h3 id="aftermodifierapplied" tabindex="-1"><a class="header-anchor" href="#aftermodifierapplied"><span>afterModifierApplied</span></a></h3><p>This hook is called just after a modifier is applied to a log instance.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  afterModifierApplied<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">,</span> name<span class="token operator">:</span> ModifierName<span class="token punctuation">,</span> data<span class="token operator">:</span> ModifierData<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),D=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),z=n("td",null,"1",-1),F=n("td",null,"log",-1),P=n("td",null,"2",-1),q=n("td",null,"name",-1),O=n("code",null,'"withEmoji"',-1),S=n("td",null,"3",-1),H=n("td",null,"data",-1),C=l(`<br><h3 id="beforeformatapplied" tabindex="-1"><a class="header-anchor" href="#beforeformatapplied"><span>beforeFormatApplied</span></a></h3><p>This hook is called just before a formatter is applied to a log instance to format a message. The hook must return a message (<code>unknown[]</code>). It can return the message parameter mutated or unchanged. Whatever is returned will be the new log message.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  beforeFormatApplied<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">,</span> format<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),E=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),N=n("td",null,"1",-1),B=n("td",null,"log",-1),U=n("td",null,"2",-1),V=n("td",null,"format",-1),W=n("tr",null,[n("td",null,"3"),n("td",null,"message"),n("td",null,"Array of arguments to be printed to the console.")],-1),I=l(`<br><h3 id="afterformatapplied" tabindex="-1"><a class="header-anchor" href="#afterformatapplied"><span>afterFormatApplied</span></a></h3><p>This hook is called just after a formatter is applied to a log instance to format a message.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  afterFormatApplied<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">,</span> format<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),R=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),J=n("td",null,"1",-1),Y=n("td",null,"log",-1),G=n("td",null,"2",-1),K=n("td",null,"format",-1),Q=n("td",null,"3",-1),X=n("td",null,"message",-1),Z=l(`<br><h3 id="beforeprint" tabindex="-1"><a class="header-anchor" href="#beforeprint"><span>beforePrint</span></a></h3><p>This hook is called just before a log instance message is printed to the browser or console.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  beforePrint<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),$=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),nn=n("td",null,"1",-1),sn=n("td",null,"log",-1),en=l(`<br><h3 id="beforeterminated" tabindex="-1"><a class="header-anchor" href="#beforeterminated"><span>beforeTerminated</span></a></h3><p>This hook is called just before a log is terminated.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  beforeTerminated<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">,</span> terminator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),an=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),tn=n("td",null,"1",-1),ln=n("td",null,"log",-1),on=n("td",null,"2",-1),pn=n("td",null,"terminator",-1),rn=n("tr",null,[n("td",null,"3"),n("td",null,"args"),n("td",null,"The log arguments prior to formatting.")],-1),cn=l(`<br><h3 id="afterterminated" tabindex="-1"><a class="header-anchor" href="#afterterminated"><span>afterTerminated</span></a></h3><p>This hook is called just when a log instance has completed termination.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span></span>
<span class="line">  afterTerminated<span class="token operator">?</span><span class="token punctuation">(</span>log<span class="token operator">:</span> Log<span class="token punctuation">,</span> terminator<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),dn=n("thead",null,[n("tr",null,[n("th",null,"Order"),n("th",null,"Parameter"),n("th",null,"Description")])],-1),un=n("td",null,"1",-1),hn=n("td",null,"log",-1),mn=n("td",null,"2",-1),kn=n("td",null,"terminator",-1),fn=n("td",null,"3",-1),vn=n("td",null,"args",-1);function bn(gn,wn){const e=p("RouteLink");return r(),i("div",null,[d,n("p",null,[s("Adze is able to be extended through middleware classes. Adze exports a "),u,s(" that can be extended to hook into various points in a log's "),a(e,{to:"/reference/introduction.html#lifecycle"},{default:t(()=>[s("lifecycle")]),_:1}),s(".")]),h,n("p",null,[s("To use our middleware, we'll need to make sure we instantiate it and await a call to the load method before passing it in to the "),a(e,{to:"/reference/configuration.html#setup-function"},{default:t(()=>[s("setup")]),_:1}),s(" function.")]),m,n("p",null,[s("To hook into various points in the Adze log "),a(e,{to:"/reference/introduction.html#lifecycle"},{default:t(()=>[s("lifecycle")]),_:1}),s(", we can define hooks in our middleware. The hooks listed below are in order of when they are called in the lifecycle.")]),k,n("table",null,[f,n("tbody",null,[n("tr",null,[v,b,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])])])]),g,n("table",null,[w,n("tbody",null,[n("tr",null,[_,y,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])]),n("tr",null,[T,x,n("td",null,[s("The name of the "),a(e,{to:"/reference/modifiers.html"},{default:t(()=>[s("modifier")]),_:1}),s(" that was called (ie. "),M,s(")")])]),n("tr",null,[A,j,n("td",null,[s("The cumulative "),a(e,{to:"/reference/modifiers.html"},{default:t(()=>[s("modifier")]),_:1}),s(" data object from all modifier calls.")])])])]),L,n("table",null,[D,n("tbody",null,[n("tr",null,[z,F,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])]),n("tr",null,[P,q,n("td",null,[s("The name of the "),a(e,{to:"/reference/modifiers.html"},{default:t(()=>[s("modifier")]),_:1}),s(" that was called (ie. "),O,s(")")])]),n("tr",null,[S,H,n("td",null,[s("The cumulative "),a(e,{to:"/reference/modifiers.html"},{default:t(()=>[s("modifier")]),_:1}),s(" data object from all modifier calls.")])])])]),C,n("table",null,[E,n("tbody",null,[n("tr",null,[N,B,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])]),n("tr",null,[U,V,n("td",null,[s("The name of the log "),a(e,{to:"/reference/formatters.html"},{default:t(()=>[s("formatter")]),_:1}),s(" that will be used.")])]),W])]),I,n("table",null,[R,n("tbody",null,[n("tr",null,[J,Y,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])]),n("tr",null,[G,K,n("td",null,[s("The name of the log "),a(e,{to:"/reference/formatters.html"},{default:t(()=>[s("formatter")]),_:1}),s(" that was used.")])]),n("tr",null,[Q,X,n("td",null,[s("Array of "),a(e,{to:"/reference/formatters.html"},{default:t(()=>[s("formatted")]),_:1}),s(" arguments to be printed to the console.")])])])]),Z,n("table",null,[$,n("tbody",null,[n("tr",null,[nn,sn,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])])])]),en,n("table",null,[an,n("tbody",null,[n("tr",null,[tn,ln,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])]),n("tr",null,[on,pn,n("td",null,[s("The name of the "),a(e,{to:"/reference/terminators.html"},{default:t(()=>[s("terminator")]),_:1}),s(" that is being called to print the log.")])]),rn])]),cn,n("table",null,[dn,n("tbody",null,[n("tr",null,[un,hn,n("td",null,[s("The instance of the log. This can be used to access its "),a(e,{to:"/reference/log-class.html#getters"},{default:t(()=>[s("data")]),_:1}),s(".")])]),n("tr",null,[mn,kn,n("td",null,[s("The name of the "),a(e,{to:"/reference/terminators.html"},{default:t(()=>[s("terminator")]),_:1}),s(" that is being called to print the log.")])]),n("tr",null,[fn,vn,n("td",null,[s("The "),a(e,{to:"/reference/formatters.html"},{default:t(()=>[s("formatted")]),_:1}),s(" arguments that will be printed.")])])])])])}const yn=o(c,[["render",bn],["__file","middleware.html.vue"]]),Tn=JSON.parse(`{"path":"/reference/middleware.html","title":"Middleware","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Environment Targeting","slug":"environment-targeting","link":"#environment-targeting","children":[]},{"level":2,"title":"Loading Dependencies","slug":"loading-dependencies","link":"#loading-dependencies","children":[{"level":3,"title":"Using the Middleware","slug":"using-the-middleware","link":"#using-the-middleware","children":[]}]},{"level":2,"title":"Using Lifecycle Hooks","slug":"using-lifecycle-hooks","link":"#using-lifecycle-hooks","children":[{"level":3,"title":"constructed","slug":"constructed","link":"#constructed","children":[]},{"level":3,"title":"beforeModifierApplied","slug":"beforemodifierapplied","link":"#beforemodifierapplied","children":[]},{"level":3,"title":"afterModifierApplied","slug":"aftermodifierapplied","link":"#aftermodifierapplied","children":[]},{"level":3,"title":"beforeFormatApplied","slug":"beforeformatapplied","link":"#beforeformatapplied","children":[]},{"level":3,"title":"afterFormatApplied","slug":"afterformatapplied","link":"#afterformatapplied","children":[]},{"level":3,"title":"beforePrint","slug":"beforeprint","link":"#beforeprint","children":[]},{"level":3,"title":"beforeTerminated","slug":"beforeterminated","link":"#beforeterminated","children":[]},{"level":3,"title":"afterTerminated","slug":"afterterminated","link":"#afterterminated","children":[]}]}],"git":{"updatedTime":1731801346000,"contributors":[{"name":"Andrew Stacy","email":"astacy@stratacache.com","commits":2},{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1}]},"filePathRelative":"reference/middleware.md","excerpt":"\\n<p>Adze is able to be extended through middleware classes. Adze exports a <strong>Middleware Class</strong> that can\\nbe extended to hook into various points in a log's <a href=\\"/reference/introduction.html#lifecycle\\" target=\\"_blank\\">lifecycle</a>.</p>\\n<p>Look for Adze middleware libraries for extending the functionality of your logs or for transporting\\nyour log data to various targets.</p>"}`);export{yn as comp,Tn as data};
