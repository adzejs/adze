import{_ as i}from"./lifecycle-agZhburq.js";import{_ as r,c as l,b as t,e as n,w as s,d as e,a as o,r as c,o as d}from"./app-yceZIKom.js";const h="/assets/modifier-example-CS90LMvz.png",p={},m=o('<h1 id="concepts" tabindex="-1"><a class="header-anchor" href="#concepts"><span>Concepts</span></a></h1><p>Adze as a library has a few core goals it attempts to meet.</p><p>The first goal is to provide <strong>a logging library that just works</strong> in both the server and browser environments.</p><p>The second goal is to provide <strong>a simple Typescript compatible API</strong> that wraps, extends, or replicates all of the functionality of the standard <a href="https://developer.mozilla.org/en-US/docs/Web/API/console" target="_blank" rel="noopener noreferrer">Console API</a>. The API is nearly identical to the standard console API, but is more feature rich and includes chaining methods for configuring your logs as you go.</p><p>Lastly, <strong>most other libraries do too much</strong>. Adze seeks to separate concerns when it comes to generating logs and transporting them to another source. Other libraries tend to try to solve both problems which leads to library bloat. Adze provides a middleware API and log listeners for handling log data transport separately.</p><h2 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle"><span>Lifecycle</span></a></h2><p>Let&#39;s take a look under the hood to see how the Adze architecture enables its API and see when the various middleware hooks are called.</p><p><img src="'+i+'" alt="Lifecycle Diagram of Adze Logs"></p><h2 id="the-log-chain" tabindex="-1"><a class="header-anchor" href="#the-log-chain"><span>The Log Chain</span></a></h2><p>As you can see in the diagram, a log chain is made up of three parts:</p>',10),u=t("ul",null,[t("li",null,"This is where all logs begin, often by calling its static methods to start a chain.")],-1),g=t("ul",null,[t("li",null,"These log methods modify the instance and then return it.")],-1),f=t("ul",null,[t("li",null,"These methods end the chain and generate the log.")],-1),_=o(`<h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//[Log Class].[Modifier].[Modifier].[Terminator](...arguments)</span></span>
<span class="line">adze<span class="token punctuation">.</span>timestamp<span class="token punctuation">.</span>timeNow<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Logging the current time since pageload.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="log-class" tabindex="-1"><a class="header-anchor" href="#log-class"><span>Log Class</span></a></h3><p><strong>Every modifier and terminator method that can be called has a static implementation.</strong></p><p>By calling any of the methods statically, it will also generate a log instance. If a modifier was called, the log instance will be returned and you can continue your chain. To finalize and print a log, simply call a terminator method.</p><h3 id="modifiers" tabindex="-1"><a class="header-anchor" href="#modifiers"><span>Modifiers</span></a></h3>`,6),y=t("strong",null,"modifiers",-1),b=t("code",null,"timeNow",-1),v=o(`<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">adze<span class="token punctuation">.</span>timeNow<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is the time from pageload.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And it would output like this:</p><p><img src="`+h+'" alt="Adze log with time now modifier preview"></p><hr>',4),k=t("h3",{id:"terminator",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#terminator"},[t("span",null,"Terminator")])],-1),w=t("code",null,"log()",-1);function T(x,A){const a=c("RouteLink");return d(),l("div",null,[m,t("ul",null,[t("li",null,[n(a,{to:"/reference/log-class.html"},{default:s(()=>[e("Log Class")]),_:1}),u]),t("li",null,[n(a,{to:"/reference/modifiers.html"},{default:s(()=>[e("Modifiers")]),_:1}),g]),t("li",null,[n(a,{to:"/reference/terminators.html"},{default:s(()=>[e("Terminator")]),_:1}),f])]),_,t("p",null,[e("Once you have a Log instance you can immediately "),n(a,{to:"/reference/terminators.html"},{default:s(()=>[e("terminate")]),_:1}),e(" it, or you can call certain methods that this library calls "),y,e(". Modifiers are methods on a Log instance that changes its behavior. For example, if you wanted to add a performance timestamp to your log you could use the "),b,e(" modifier.")]),v,t("p",null,[e("For documentation of all of the supported modifiers, please read the "),n(a,{to:"/reference/modifiers.html"},{default:s(()=>[e("Modifiers")]),_:1}),e(" page of the "),n(a,{to:"/reference/introduction.html"},{default:s(()=>[e("Reference Manual")]),_:1}),e(".")]),k,t("p",null,[e("In our "),n(a,{to:"/reference/modifiers.html"},{default:s(()=>[e("Modifiers")]),_:1}),e(" example code above, you can see we ended our chain with "),n(a,{to:"/reference/terminators.html#log"},{default:s(()=>[w]),_:1}),e(". The log method is one of the nine "),n(a,{to:"/reference/terminators.html"},{default:s(()=>[e("default log terminators")]),_:1}),e(". The library also comes with other special terminators like "),n(a,{to:"/reference/terminators.html#custom"},{default:s(()=>[e("custom")]),_:1}),e(". A log method is considered a terminator when it ends your log chain.")]),t("p",null,[e("For more information about all of the supported terminators, please read the "),n(a,{to:"/reference/terminators.html"},{default:s(()=>[e("Terminators")]),_:1}),e(" page of the "),n(a,{to:"/reference/introduction.html"},{default:s(()=>[e("Reference Manual")]),_:1}),e(".")])])}const z=r(p,[["render",T],["__file","concepts.html.vue"]]),C=JSON.parse('{"path":"/getting-started/concepts.html","title":"Concepts","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Lifecycle","slug":"lifecycle","link":"#lifecycle","children":[]},{"level":2,"title":"The Log Chain","slug":"the-log-chain","link":"#the-log-chain","children":[{"level":3,"title":"Log Class","slug":"log-class","link":"#log-class","children":[]},{"level":3,"title":"Modifiers","slug":"modifiers","link":"#modifiers","children":[]},{"level":3,"title":"Terminator","slug":"terminator","link":"#terminator","children":[]}]}],"git":{"updatedTime":1726004801000,"contributors":[{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1}]},"filePathRelative":"getting-started/concepts.md","excerpt":"\\n<p>Adze as a library has a few core goals it attempts to meet.</p>\\n<p>The first goal is to provide <strong>a logging library that just works</strong> in both the server and browser\\nenvironments.</p>\\n<p>The second goal is to provide <strong>a simple Typescript compatible API</strong> that wraps, extends, or replicates\\nall of the functionality of the standard <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Console API</a>.\\nThe API is nearly identical to the standard console API, but is more feature rich and includes\\nchaining methods for configuring your logs as you go.</p>"}');export{z as comp,C as data};
