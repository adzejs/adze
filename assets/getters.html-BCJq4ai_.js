import{_ as i,c as l,b as a,d as n,e as t,w as e,a as o,r as p,o as c}from"./app-BSViwGMH.js";const d="/assets/modifierData-example-browser-SoWAmAJM.png",r="/assets/modifierData-example-node-V0hM7orG.png",u={},h=a("h1",{id:"data-getters",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#data-getters"},[a("span",null,"Data Getters")])],-1),m=o('<ul><li><a href="#data">data</a> - Returns the log data.</li><li><a href="">modifierData</a> - Returns object containing key/values from called modifiers.</li><li><a href="">configuration</a> - Returns the configuration that this log instance is using.</li></ul><h2 id="data" tabindex="-1"><a class="header-anchor" href="#data"><span>data</span></a></h2><p>The data getter contains all of the finalized log data after the log has been terminated.</p>',3),g=a("code",null,"middleware",-1),k=a("code",null,"formatters",-1),f=o(`<table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>level</td><td><code>number</code></td><td>The level value of this log.</td></tr><tr><td>emoji</td><td><code>string</code></td><td>The emoji associated to this log.</td></tr><tr><td>levelName</td><td><code>string</code></td><td>The level name that this log was terminated with.</td></tr><tr><td>method</td><td><code>string</code></td><td>The standard console method used to print this log.</td></tr><tr><td>style</td><td><code>string</code></td><td>The styles used for pretty printing this log.</td></tr><tr><td>args</td><td><code>unknown[]</code></td><td>The arguments provided to be logged.</td></tr><tr><td>message</td><td><code>unknown[]</code></td><td>The formatted log arguments to be printed.</td></tr></tbody></table><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Let&#39;s create a log listener and then access the log data</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>log<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> level <span class="token operator">=</span> log<span class="token punctuation">.</span>data<span class="token punctuation">.</span>level<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// do something else...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="modifierdata" tabindex="-1"><a class="header-anchor" href="#modifierdata"><span>modifierData</span></a></h2><p>The modifier data is an object containing values that will be applied to the log when it is terminated. Each time a modifier is executed, it either modifies the log&#39;s configuration or it adds a value to the <code>modifierData</code> property.</p><p>These values will ultimately be applied to how the log renders and will be included in the log data object after the log is terminated.</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>level</td><td><code>number</code></td><td>The level value of this log.</td></tr><tr><td>emoji</td><td><code>string</code></td><td>The emoji associated to this log.</td></tr><tr><td>levelName</td><td><code>string</code></td><td>The level name that this log was terminated with.</td></tr><tr><td>method</td><td><code>string</code></td><td>The standard console method used to print this log.</td></tr><tr><td>style</td><td><code>string</code></td><td>The styles used for pretty printing this log.</td></tr><tr><td>args</td><td><code>unknown[]</code></td><td>The arguments provided to be logged.</td></tr><tr><td>message</td><td><code>unknown[]</code></td><td>The formatted log arguments to be printed.</td></tr></tbody></table><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>log<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// We cannot call adze logs here or we&#39;ll trigger an infinite loop.</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>modifierData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// adze.withEmoji.log(&#39;This is a log&#39;);</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is a namespaced log.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="browser-output" tabindex="-1"><a class="header-anchor" href="#browser-output"><span>Browser Output</span></a></h4><p><img src="`+d+'" alt="example browser output of logging modifier data"></p><h4 id="server-output" tabindex="-1"><a class="header-anchor" href="#server-output"><span>Server Output</span></a></h4><p><img src="'+r+'" alt="example server output of logging modifier data"></p><br><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>configuration</span></a></h2>',16),v=o(`<h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> adze<span class="token punctuation">,</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;adze&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>log<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// We cannot call adze logs here or we&#39;ll trigger an infinite loop.</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// adze.withEmoji.log(&#39;This is a log&#39;);</span></span>
<span class="line">adze<span class="token punctuation">.</span><span class="token function">ns</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is a namespaced log.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function b(w,y){const s=p("RouteLink");return c(),l("div",null,[h,a("p",null,[n("Every Adze log instance exposes three getters for getting log data. Usually you will want to "),t(s,{to:"/getting-started/capture-data.html"},{default:e(()=>[n("capture log data")]),_:1}),n(" when inside of a "),t(s,{to:"/reference/global-store.html#addlistener"},{default:e(()=>[n("listener")]),_:1}),n(" or a "),t(s,{to:"/reference/middleware.html"},{default:e(()=>[n("middleware")]),_:1}),n(" hook.")]),m,a("p",null,[n("In addition to all of the properties defined in the "),t(s,{to:"/reference/configuration.html#user-configuration"},{default:e(()=>[n("User Configuration")]),_:1}),n(" (with the exception of the "),g,n(" and "),k,n(" properties), the log data also includes the properties in the table below.")]),f,a("p",null,[n("The configuration getter returns the configuration object for this log instance. It will contain default values to fill in any omitted values from the provided "),t(s,{to:"/reference/configuration.html#user-configuration"},{default:e(()=>[n("User Configuration")]),_:1}),n(".")]),a("p",null,[n("If global configuration values are present from the "),t(s,{to:"/reference/global-store.html"},{default:e(()=>[n("Global Store")]),_:1}),n(", then those values will take precendence and override the default or user configured values.")]),a("p",null,[n("For more information on the values, refer to the "),t(s,{to:"/reference/configuration.html"},{default:e(()=>[n("Configuration page")]),_:1}),n(".")]),v])}const x=i(u,[["render",b],["__file","getters.html.vue"]]),T=JSON.parse('{"path":"/reference/getters.html","title":"Data Getters","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"data","slug":"data","link":"#data","children":[]},{"level":2,"title":"modifierData","slug":"modifierdata","link":"#modifierdata","children":[]},{"level":2,"title":"configuration","slug":"configuration","link":"#configuration","children":[]}],"git":{"updatedTime":1726004801000,"contributors":[{"name":"Andrew Stacy","email":"ajstacy@gmail.com","commits":1}]},"filePathRelative":"reference/getters.md","excerpt":"\\n<p>Every Adze log instance exposes three getters for getting log data. Usually you will want to\\n<a href=\\"/getting-started/capture-data.html\\" target=\\"_blank\\">capture log data</a> when inside of a\\n<a href=\\"/reference/global-store.html#addlistener\\" target=\\"_blank\\">listener</a> or a <a href=\\"/reference/middleware.html\\" target=\\"_blank\\">middleware</a> hook.</p>"}');export{x as comp,T as data};
